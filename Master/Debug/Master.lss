
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800200  000044da  0000456e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000044da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002fb  0080029e  0080029e  0000460c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000460c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000463c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000428  00000000  00000000  0000467c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005df2  00000000  00000000  00004aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018ba  00000000  00000000  0000a896  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003469  00000000  00000000  0000c150  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000113c  00000000  00000000  0000f5bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000231c  00000000  00000000  000106f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000422d  00000000  00000000  00012a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000440  00000000  00000000  00016c41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	98 c0       	rjmp	.+304    	; 0x132 <__ctors_end>
       2:	00 00       	nop
       4:	c7 c0       	rjmp	.+398    	; 0x194 <__bad_interrupt>
       6:	00 00       	nop
       8:	c5 c0       	rjmp	.+394    	; 0x194 <__bad_interrupt>
       a:	00 00       	nop
       c:	f5 c0       	rjmp	.+490    	; 0x1f8 <__vector_3>
       e:	00 00       	nop
      10:	c1 c0       	rjmp	.+386    	; 0x194 <__bad_interrupt>
      12:	00 00       	nop
      14:	bf c0       	rjmp	.+382    	; 0x194 <__bad_interrupt>
      16:	00 00       	nop
      18:	16 c1       	rjmp	.+556    	; 0x246 <__vector_6>
      1a:	00 00       	nop
      1c:	bb c0       	rjmp	.+374    	; 0x194 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b9 c0       	rjmp	.+370    	; 0x194 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__vector_9>
      28:	b5 c0       	rjmp	.+362    	; 0x194 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 31 17 	jmp	0x2e62	; 0x2e62 <__vector_11>
      30:	b1 c0       	rjmp	.+354    	; 0x194 <__bad_interrupt>
      32:	00 00       	nop
      34:	af c0       	rjmp	.+350    	; 0x194 <__bad_interrupt>
      36:	00 00       	nop
      38:	ad c0       	rjmp	.+346    	; 0x194 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c0 c1       	rjmp	.+896    	; 0x3be <__vector_15>
      3e:	00 00       	nop
      40:	a9 c0       	rjmp	.+338    	; 0x194 <__bad_interrupt>
      42:	00 00       	nop
      44:	a7 c0       	rjmp	.+334    	; 0x194 <__bad_interrupt>
      46:	00 00       	nop
      48:	a5 c0       	rjmp	.+330    	; 0x194 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a3 c0       	rjmp	.+326    	; 0x194 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a1 c0       	rjmp	.+322    	; 0x194 <__bad_interrupt>
      52:	00 00       	nop
      54:	9f c0       	rjmp	.+318    	; 0x194 <__bad_interrupt>
      56:	00 00       	nop
      58:	9d c0       	rjmp	.+314    	; 0x194 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1b c1       	rjmp	.+566    	; 0x294 <__vector_23>
      5e:	00 00       	nop
      60:	99 c0       	rjmp	.+306    	; 0x194 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 da 1c 	jmp	0x39b4	; 0x39b4 <__vector_25>
      68:	0c 94 09 1d 	jmp	0x3a12	; 0x3a12 <__vector_26>
      6c:	93 c0       	rjmp	.+294    	; 0x194 <__bad_interrupt>
      6e:	00 00       	nop
      70:	91 c0       	rjmp	.+290    	; 0x194 <__bad_interrupt>
      72:	00 00       	nop
      74:	8f c0       	rjmp	.+286    	; 0x194 <__bad_interrupt>
      76:	00 00       	nop
      78:	8d c0       	rjmp	.+282    	; 0x194 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8b c0       	rjmp	.+278    	; 0x194 <__bad_interrupt>
      7e:	00 00       	nop
      80:	89 c0       	rjmp	.+274    	; 0x194 <__bad_interrupt>
      82:	00 00       	nop
      84:	87 c0       	rjmp	.+270    	; 0x194 <__bad_interrupt>
      86:	00 00       	nop
      88:	85 c0       	rjmp	.+266    	; 0x194 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	83 c0       	rjmp	.+262    	; 0x194 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 73 1d 	jmp	0x3ae6	; 0x3ae6 <__vector_36>
      94:	0c 94 a2 1d 	jmp	0x3b44	; 0x3b44 <__vector_37>
      98:	7d c0       	rjmp	.+250    	; 0x194 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	7b c0       	rjmp	.+246    	; 0x194 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	79 c0       	rjmp	.+242    	; 0x194 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	77 c0       	rjmp	.+238    	; 0x194 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	75 c0       	rjmp	.+234    	; 0x194 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	73 c0       	rjmp	.+230    	; 0x194 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	71 c0       	rjmp	.+226    	; 0x194 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	6f c0       	rjmp	.+222    	; 0x194 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	6d c0       	rjmp	.+218    	; 0x194 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	6b c0       	rjmp	.+214    	; 0x194 <__bad_interrupt>
      be:	00 00       	nop
      c0:	69 c0       	rjmp	.+210    	; 0x194 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	67 c0       	rjmp	.+206    	; 0x194 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	65 c0       	rjmp	.+202    	; 0x194 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <__vector_51>
      d0:	0c 94 e0 1d 	jmp	0x3bc0	; 0x3bc0 <__vector_52>
      d4:	5f c0       	rjmp	.+190    	; 0x194 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__vector_54>
      dc:	0c 94 6f 1e 	jmp	0x3cde	; 0x3cde <__vector_55>
      e0:	59 c0       	rjmp	.+178    	; 0x194 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 00       	.word	0x003f	; ????

00000130 <__ctors_start>:
     130:	de 17       	cp	r29, r30

00000132 <__ctors_end>:
     132:	11 24       	eor	r1, r1
     134:	1f be       	out	0x3f, r1	; 63
     136:	cf ef       	ldi	r28, 0xFF	; 255
     138:	d1 e2       	ldi	r29, 0x21	; 33
     13a:	de bf       	out	0x3e, r29	; 62
     13c:	cd bf       	out	0x3d, r28	; 61
     13e:	00 e0       	ldi	r16, 0x00	; 0
     140:	0c bf       	out	0x3c, r16	; 60

00000142 <__do_copy_data>:
     142:	12 e0       	ldi	r17, 0x02	; 2
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b2 e0       	ldi	r27, 0x02	; 2
     148:	ea ed       	ldi	r30, 0xDA	; 218
     14a:	f4 e4       	ldi	r31, 0x44	; 68
     14c:	00 e0       	ldi	r16, 0x00	; 0
     14e:	0b bf       	out	0x3b, r16	; 59
     150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x14>
     152:	07 90       	elpm	r0, Z+
     154:	0d 92       	st	X+, r0
     156:	ae 39       	cpi	r26, 0x9E	; 158
     158:	b1 07       	cpc	r27, r17
     15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0x10>

0000015c <__do_clear_bss>:
     15c:	25 e0       	ldi	r18, 0x05	; 5
     15e:	ae e9       	ldi	r26, 0x9E	; 158
     160:	b2 e0       	ldi	r27, 0x02	; 2
     162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
     164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
     166:	a9 39       	cpi	r26, 0x99	; 153
     168:	b2 07       	cpc	r27, r18
     16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>

0000016c <__do_global_ctors>:
     16c:	10 e0       	ldi	r17, 0x00	; 0
     16e:	c9 e9       	ldi	r28, 0x99	; 153
     170:	d0 e0       	ldi	r29, 0x00	; 0
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	06 c0       	rjmp	.+12     	; 0x182 <__do_global_ctors+0x16>
     176:	21 97       	sbiw	r28, 0x01	; 1
     178:	01 09       	sbc	r16, r1
     17a:	80 2f       	mov	r24, r16
     17c:	fe 01       	movw	r30, r28
     17e:	0e 94 63 22 	call	0x44c6	; 0x44c6 <__tablejump2__>
     182:	c8 39       	cpi	r28, 0x98	; 152
     184:	d1 07       	cpc	r29, r17
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	08 07       	cpc	r16, r24
     18a:	a9 f7       	brne	.-22     	; 0x176 <__do_global_ctors+0xa>
     18c:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <main>
     190:	0c 94 6b 22 	jmp	0x44d6	; 0x44d6 <_exit>

00000194 <__bad_interrupt>:
     194:	35 cf       	rjmp	.-406    	; 0x0 <__vectors>

00000196 <_ZN7encoder22Init_encoder_interruptEv>:
volatile bool PidUpdateFlagDriveY = true;


void encoder::Init_encoder_interrupt()
{
	sei();
     196:	78 94       	sei
	EICRA = 0b00110000;
     198:	80 e3       	ldi	r24, 0x30	; 48
     19a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	EICRB = 0b00001100;
     19e:	8c e0       	ldi	r24, 0x0C	; 12
     1a0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
	EIMSK |=  (1<<INT2) |(1<<INT5);
     1a4:	8d b3       	in	r24, 0x1d	; 29
     1a6:	84 62       	ori	r24, 0x24	; 36
     1a8:	8d bb       	out	0x1d, r24	; 29
     1aa:	08 95       	ret

000001ac <_ZN7encoder10Init_timerEv>:
}

void encoder::Init_timer()	//FOR SPEED TUNING OF 4 MOTORS
{
	sei();
     1ac:	78 94       	sei
	TCCR0B |= (1<<CS02) | (1<<CS00);
     1ae:	85 b5       	in	r24, 0x25	; 37
     1b0:	85 60       	ori	r24, 0x05	; 5
     1b2:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<TOIE0);
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
     1ba:	08 95       	ret

000001bc <_ZN7encoder11getdistanceEv>:
}
float encoder::getdistance()
	{
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	ec 01       	movw	r28, r24
	distance = (3.1415 * encoderdiameter * count_encoder)/(encoderPPR) ; 
     1c2:	68 81       	ld	r22, Y
     1c4:	79 81       	ldd	r23, Y+1	; 0x01
     1c6:	07 2e       	mov	r0, r23
     1c8:	00 0c       	add	r0, r0
     1ca:	88 0b       	sbc	r24, r24
     1cc:	99 0b       	sbc	r25, r25
     1ce:	0e 94 4f 20 	call	0x409e	; 0x409e <__floatsisf>
     1d2:	2e ef       	ldi	r18, 0xFE	; 254
     1d4:	34 e3       	ldi	r19, 0x34	; 52
     1d6:	46 e3       	ldi	r20, 0x36	; 54
     1d8:	53 e4       	ldi	r21, 0x43	; 67
     1da:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	48 e4       	ldi	r20, 0x48	; 72
     1e4:	53 e4       	ldi	r21, 0x43	; 67
     1e6:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__divsf3>
     1ea:	6c 83       	std	Y+4, r22	; 0x04
     1ec:	7d 83       	std	Y+5, r23	; 0x05
     1ee:	8e 83       	std	Y+6, r24	; 0x06
     1f0:	9f 83       	std	Y+7, r25	; 0x07
	return distance;
}
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <__vector_3>:

ISR(INT2_vect)	//for x -axis encoder
{
     1f8:	1f 92       	push	r1
     1fa:	0f 92       	push	r0
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	0f 92       	push	r0
     200:	11 24       	eor	r1, r1
     202:	0b b6       	in	r0, 0x3b	; 59
     204:	0f 92       	push	r0
     206:	8f 93       	push	r24
     208:	9f 93       	push	r25
     20a:	ef 93       	push	r30
     20c:	ff 93       	push	r31
	if((bit_is_set(PINA,PA0)))
     20e:	00 9b       	sbis	0x00, 0	; 0
     210:	08 c0       	rjmp	.+16     	; 0x222 <__vector_3+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     212:	e6 ea       	ldi	r30, 0xA6	; 166
     214:	f2 e0       	ldi	r31, 0x02	; 2
     216:	80 81       	ld	r24, Z
     218:	91 81       	ldd	r25, Z+1	; 0x01
     21a:	01 96       	adiw	r24, 0x01	; 1
     21c:	91 83       	std	Z+1, r25	; 0x01
     21e:	80 83       	st	Z, r24
     220:	07 c0       	rjmp	.+14     	; 0x230 <__vector_3+0x38>
		inline void dcr_count(){count_encoder--;};
     222:	e6 ea       	ldi	r30, 0xA6	; 166
     224:	f2 e0       	ldi	r31, 0x02	; 2
     226:	80 81       	ld	r24, Z
     228:	91 81       	ldd	r25, Z+1	; 0x01
     22a:	01 97       	sbiw	r24, 0x01	; 1
     22c:	91 83       	std	Z+1, r25	; 0x01
     22e:	80 83       	st	Z, r24
	{
		encoderX.inc_count();
	}
	else
		encoderX.dcr_count();
}
     230:	ff 91       	pop	r31
     232:	ef 91       	pop	r30
     234:	9f 91       	pop	r25
     236:	8f 91       	pop	r24
     238:	0f 90       	pop	r0
     23a:	0b be       	out	0x3b, r0	; 59
     23c:	0f 90       	pop	r0
     23e:	0f be       	out	0x3f, r0	; 63
     240:	0f 90       	pop	r0
     242:	1f 90       	pop	r1
     244:	18 95       	reti

00000246 <__vector_6>:

ISR(INT5_vect)	//for y-axis encoder
{
     246:	1f 92       	push	r1
     248:	0f 92       	push	r0
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	0f 92       	push	r0
     24e:	11 24       	eor	r1, r1
     250:	0b b6       	in	r0, 0x3b	; 59
     252:	0f 92       	push	r0
     254:	8f 93       	push	r24
     256:	9f 93       	push	r25
     258:	ef 93       	push	r30
     25a:	ff 93       	push	r31
	if((bit_is_set(PINA,PA5)))
     25c:	05 9b       	sbis	0x00, 5	; 0
     25e:	08 c0       	rjmp	.+16     	; 0x270 <__vector_6+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     260:	ee e9       	ldi	r30, 0x9E	; 158
     262:	f2 e0       	ldi	r31, 0x02	; 2
     264:	80 81       	ld	r24, Z
     266:	91 81       	ldd	r25, Z+1	; 0x01
     268:	01 96       	adiw	r24, 0x01	; 1
     26a:	91 83       	std	Z+1, r25	; 0x01
     26c:	80 83       	st	Z, r24
     26e:	07 c0       	rjmp	.+14     	; 0x27e <__vector_6+0x38>
		inline void dcr_count(){count_encoder--;};
     270:	ee e9       	ldi	r30, 0x9E	; 158
     272:	f2 e0       	ldi	r31, 0x02	; 2
     274:	80 81       	ld	r24, Z
     276:	91 81       	ldd	r25, Z+1	; 0x01
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
	{
		encoderY.inc_count();
	}
	else
		encoderY.dcr_count();
}
     27e:	ff 91       	pop	r31
     280:	ef 91       	pop	r30
     282:	9f 91       	pop	r25
     284:	8f 91       	pop	r24
     286:	0f 90       	pop	r0
     288:	0b be       	out	0x3b, r0	; 59
     28a:	0f 90       	pop	r0
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	0f 90       	pop	r0
     290:	1f 90       	pop	r1
     292:	18 95       	reti

00000294 <__vector_23>:

ISR(TIMER0_OVF_vect)
{
     294:	1f 92       	push	r1
     296:	0f 92       	push	r0
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	0f 92       	push	r0
     29c:	11 24       	eor	r1, r1
     29e:	8f 93       	push	r24
	PidUpdateFlagCompass = true;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <PidUpdateFlagCompass>
	PidUpdateFlagLinetrackerBack = true;
     2a6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <PidUpdateFlagLinetrackerBack>
	PidUpdateFlagLinetrackerFront = true;
     2aa:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <PidUpdateFlagLinetrackerFront>
 
	PidUpdateFlagDriveX = true;
     2ae:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <PidUpdateFlagDriveX>
	PidUpdateFlagDriveY = true;
     2b2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <PidUpdateFlagDriveY>
	
     2b6:	8f 91       	pop	r24
     2b8:	0f 90       	pop	r0
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	0f 90       	pop	r0
     2be:	1f 90       	pop	r1
     2c0:	18 95       	reti

000002c2 <_Z13init_HMC5883Lv>:
	}
	else
	{
		Calculate_Motor_Differential_Velocity_With_Center_Pivot(speed);
	}
}
     2c2:	0e 94 3f 1c 	call	0x387e	; 0x387e <_Z8i2c_initv>
     2c6:	8c e3       	ldi	r24, 0x3C	; 60
     2c8:	0e 94 45 1c 	call	0x388a	; 0x388a <_Z9i2c_starth>
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	0e 94 b2 1c 	call	0x3964	; 0x3964 <_Z9i2c_writeh>
     2d2:	80 e7       	ldi	r24, 0x70	; 112
     2d4:	0e 94 b2 1c 	call	0x3964	; 0x3964 <_Z9i2c_writeh>
     2d8:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <_Z8i2c_stopv>
     2dc:	8c e3       	ldi	r24, 0x3C	; 60
     2de:	0e 94 45 1c 	call	0x388a	; 0x388a <_Z9i2c_starth>
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	0e 94 b2 1c 	call	0x3964	; 0x3964 <_Z9i2c_writeh>
     2e8:	80 ea       	ldi	r24, 0xA0	; 160
     2ea:	0e 94 b2 1c 	call	0x3964	; 0x3964 <_Z9i2c_writeh>
     2ee:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <_Z8i2c_stopv>
     2f2:	8c e3       	ldi	r24, 0x3C	; 60
     2f4:	0e 94 45 1c 	call	0x388a	; 0x388a <_Z9i2c_starth>
     2f8:	82 e0       	ldi	r24, 0x02	; 2
     2fa:	0e 94 b2 1c 	call	0x3964	; 0x3964 <_Z9i2c_writeh>
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	0e 94 b2 1c 	call	0x3964	; 0x3964 <_Z9i2c_writeh>
     304:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <_Z8i2c_stopv>
     308:	08 95       	ret

0000030a <_Z12read_Compassv>:
     30a:	8c e3       	ldi	r24, 0x3C	; 60
     30c:	0e 94 45 1c 	call	0x388a	; 0x388a <_Z9i2c_starth>
     310:	83 e0       	ldi	r24, 0x03	; 3
     312:	0e 94 b2 1c 	call	0x3964	; 0x3964 <_Z9i2c_writeh>
     316:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <_Z8i2c_stopv>
     31a:	8d e3       	ldi	r24, 0x3D	; 61
     31c:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <_Z13i2c_rep_starth>
     320:	0e 94 c4 1c 	call	0x3988	; 0x3988 <_Z11i2c_readAckv>
     324:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <raw_x>
     328:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <raw_x+0x1>
     32c:	0e 94 c4 1c 	call	0x3988	; 0x3988 <_Z11i2c_readAckv>
     330:	20 91 9c 04 	lds	r18, 0x049C	; 0x80049c <raw_x>
     334:	30 91 9d 04 	lds	r19, 0x049D	; 0x80049d <raw_x+0x1>
     338:	28 2b       	or	r18, r24
     33a:	30 93 9d 04 	sts	0x049D, r19	; 0x80049d <raw_x+0x1>
     33e:	20 93 9c 04 	sts	0x049C, r18	; 0x80049c <raw_x>
     342:	0e 94 c4 1c 	call	0x3988	; 0x3988 <_Z11i2c_readAckv>
     346:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <raw_z>
     34a:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <raw_z+0x1>
     34e:	0e 94 c4 1c 	call	0x3988	; 0x3988 <_Z11i2c_readAckv>
     352:	20 91 98 04 	lds	r18, 0x0498	; 0x800498 <raw_z>
     356:	30 91 99 04 	lds	r19, 0x0499	; 0x800499 <raw_z+0x1>
     35a:	28 2b       	or	r18, r24
     35c:	30 93 99 04 	sts	0x0499, r19	; 0x800499 <raw_z+0x1>
     360:	20 93 98 04 	sts	0x0498, r18	; 0x800498 <raw_z>
     364:	0e 94 c4 1c 	call	0x3988	; 0x3988 <_Z11i2c_readAckv>
     368:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <raw_y>
     36c:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <raw_y+0x1>
     370:	0e 94 cf 1c 	call	0x399e	; 0x399e <_Z11i2c_readNakv>
     374:	20 91 9a 04 	lds	r18, 0x049A	; 0x80049a <raw_y>
     378:	30 91 9b 04 	lds	r19, 0x049B	; 0x80049b <raw_y+0x1>
     37c:	28 2b       	or	r18, r24
     37e:	30 93 9b 04 	sts	0x049B, r19	; 0x80049b <raw_y+0x1>
     382:	20 93 9a 04 	sts	0x049A, r18	; 0x80049a <raw_y>
     386:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <_Z8i2c_stopv>
     38a:	08 95       	ret

0000038c <_Z6millisv>:
     38c:	2f b7       	in	r18, 0x3f	; 63
     38e:	f8 94       	cli
     390:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <timer2_millis>
     394:	70 91 95 04 	lds	r23, 0x0495	; 0x800495 <timer2_millis+0x1>
     398:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <timer2_millis+0x2>
     39c:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <timer2_millis+0x3>
     3a0:	2f bf       	out	0x3f, r18	; 63
     3a2:	08 95       	ret

000003a4 <_Z21initialise_timeperiodv>:
     3a4:	e1 eb       	ldi	r30, 0xB1	; 177
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	80 81       	ld	r24, Z
     3aa:	84 60       	ori	r24, 0x04	; 4
     3ac:	80 83       	st	Z, r24
     3ae:	e0 e7       	ldi	r30, 0x70	; 112
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	80 81       	ld	r24, Z
     3b4:	81 60       	ori	r24, 0x01	; 1
     3b6:	80 83       	st	Z, r24
     3b8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
     3bc:	08 95       	ret

000003be <__vector_15>:
     3be:	1f 92       	push	r1
     3c0:	0f 92       	push	r0
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	0f 92       	push	r0
     3c6:	11 24       	eor	r1, r1
     3c8:	8f 93       	push	r24
     3ca:	9f 93       	push	r25
     3cc:	af 93       	push	r26
     3ce:	bf 93       	push	r27
     3d0:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <timer2_millis>
     3d4:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <timer2_millis+0x1>
     3d8:	a0 91 96 04 	lds	r26, 0x0496	; 0x800496 <timer2_millis+0x2>
     3dc:	b0 91 97 04 	lds	r27, 0x0497	; 0x800497 <timer2_millis+0x3>
     3e0:	01 96       	adiw	r24, 0x01	; 1
     3e2:	a1 1d       	adc	r26, r1
     3e4:	b1 1d       	adc	r27, r1
     3e6:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <timer2_millis>
     3ea:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <timer2_millis+0x1>
     3ee:	a0 93 96 04 	sts	0x0496, r26	; 0x800496 <timer2_millis+0x2>
     3f2:	b0 93 97 04 	sts	0x0497, r27	; 0x800497 <timer2_millis+0x3>
     3f6:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <timer2_fract>
     3fa:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <timer2_fract+0x1>
     3fe:	a0 91 92 04 	lds	r26, 0x0492	; 0x800492 <timer2_fract+0x2>
     402:	b0 91 93 04 	lds	r27, 0x0493	; 0x800493 <timer2_fract+0x3>
     406:	03 96       	adiw	r24, 0x03	; 3
     408:	a1 1d       	adc	r26, r1
     40a:	b1 1d       	adc	r27, r1
     40c:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <timer2_fract>
     410:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <timer2_fract+0x1>
     414:	a0 93 92 04 	sts	0x0492, r26	; 0x800492 <timer2_fract+0x2>
     418:	b0 93 93 04 	sts	0x0493, r27	; 0x800493 <timer2_fract+0x3>
     41c:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <timer2_fract>
     420:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <timer2_fract+0x1>
     424:	a0 91 92 04 	lds	r26, 0x0492	; 0x800492 <timer2_fract+0x2>
     428:	b0 91 93 04 	lds	r27, 0x0493	; 0x800493 <timer2_fract+0x3>
     42c:	8d 37       	cpi	r24, 0x7D	; 125
     42e:	91 05       	cpc	r25, r1
     430:	a1 05       	cpc	r26, r1
     432:	b1 05       	cpc	r27, r1
     434:	38 f1       	brcs	.+78     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     436:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <timer2_fract>
     43a:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <timer2_fract+0x1>
     43e:	a0 91 92 04 	lds	r26, 0x0492	; 0x800492 <timer2_fract+0x2>
     442:	b0 91 93 04 	lds	r27, 0x0493	; 0x800493 <timer2_fract+0x3>
     446:	8d 57       	subi	r24, 0x7D	; 125
     448:	91 09       	sbc	r25, r1
     44a:	a1 09       	sbc	r26, r1
     44c:	b1 09       	sbc	r27, r1
     44e:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <timer2_fract>
     452:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <timer2_fract+0x1>
     456:	a0 93 92 04 	sts	0x0492, r26	; 0x800492 <timer2_fract+0x2>
     45a:	b0 93 93 04 	sts	0x0493, r27	; 0x800493 <timer2_fract+0x3>
     45e:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <timer2_millis>
     462:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <timer2_millis+0x1>
     466:	a0 91 96 04 	lds	r26, 0x0496	; 0x800496 <timer2_millis+0x2>
     46a:	b0 91 97 04 	lds	r27, 0x0497	; 0x800497 <timer2_millis+0x3>
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	a1 1d       	adc	r26, r1
     472:	b1 1d       	adc	r27, r1
     474:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <timer2_millis>
     478:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <timer2_millis+0x1>
     47c:	a0 93 96 04 	sts	0x0496, r26	; 0x800496 <timer2_millis+0x2>
     480:	b0 93 97 04 	sts	0x0497, r27	; 0x800497 <timer2_millis+0x3>
     484:	bf 91       	pop	r27
     486:	af 91       	pop	r26
     488:	9f 91       	pop	r25
     48a:	8f 91       	pop	r24
     48c:	0f 90       	pop	r0
     48e:	0f be       	out	0x3f, r0	; 63
     490:	0f 90       	pop	r0
     492:	1f 90       	pop	r1
     494:	18 95       	reti

00000496 <_Z8initGY88v>:
     496:	15 df       	rcall	.-470    	; 0x2c2 <_Z13init_HMC5883Lv>
     498:	87 e1       	ldi	r24, 0x17	; 23
     49a:	94 e0       	ldi	r25, 0x04	; 4
     49c:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <_ZN7MPU60504InitEv>
     4a0:	62 e3       	ldi	r22, 0x32	; 50
     4a2:	87 e1       	ldi	r24, 0x17	; 23
     4a4:	94 e0       	ldi	r25, 0x04	; 4
     4a6:	0e 94 1f 1a 	call	0x343e	; 0x343e <_ZN7MPU605013calibrateGyroEh>
     4aa:	7c df       	rcall	.-264    	; 0x3a4 <_Z21initialise_timeperiodv>
     4ac:	6f df       	rcall	.-290    	; 0x38c <_Z6millisv>
     4ae:	60 93 fb 03 	sts	0x03FB, r22	; 0x8003fb <previousTime>
     4b2:	70 93 fc 03 	sts	0x03FC, r23	; 0x8003fc <previousTime+0x1>
     4b6:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <previousTime+0x2>
     4ba:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <previousTime+0x3>
     4be:	08 95       	ret

000004c0 <_Z25compass_tilt_compensationfffff>:
     4c0:	4f 92       	push	r4
     4c2:	5f 92       	push	r5
     4c4:	6f 92       	push	r6
     4c6:	7f 92       	push	r7
     4c8:	8f 92       	push	r8
     4ca:	9f 92       	push	r9
     4cc:	af 92       	push	r10
     4ce:	bf 92       	push	r11
     4d0:	cf 92       	push	r12
     4d2:	df 92       	push	r13
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	64 97       	sbiw	r28, 0x14	; 20
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	69 83       	std	Y+1, r22	; 0x01
     4f2:	7a 83       	std	Y+2, r23	; 0x02
     4f4:	8b 83       	std	Y+3, r24	; 0x03
     4f6:	9c 83       	std	Y+4, r25	; 0x04
     4f8:	29 01       	movw	r4, r18
     4fa:	3a 01       	movw	r6, r20
     4fc:	e9 8a       	std	Y+17, r14	; 0x11
     4fe:	fa 8a       	std	Y+18, r15	; 0x12
     500:	0b 8b       	std	Y+19, r16	; 0x13
     502:	1c 8b       	std	Y+20, r17	; 0x14
     504:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <cos>
     508:	6d 87       	std	Y+13, r22	; 0x0d
     50a:	7e 87       	std	Y+14, r23	; 0x0e
     50c:	8f 87       	std	Y+15, r24	; 0x0f
     50e:	98 8b       	std	Y+16, r25	; 0x10
     510:	69 81       	ldd	r22, Y+1	; 0x01
     512:	7a 81       	ldd	r23, Y+2	; 0x02
     514:	8b 81       	ldd	r24, Y+3	; 0x03
     516:	9c 81       	ldd	r25, Y+4	; 0x04
     518:	0e 94 cb 21 	call	0x4396	; 0x4396 <sin>
     51c:	69 83       	std	Y+1, r22	; 0x01
     51e:	7a 83       	std	Y+2, r23	; 0x02
     520:	8b 83       	std	Y+3, r24	; 0x03
     522:	9c 83       	std	Y+4, r25	; 0x04
     524:	c3 01       	movw	r24, r6
     526:	b2 01       	movw	r22, r4
     528:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <cos>
     52c:	6d 83       	std	Y+5, r22	; 0x05
     52e:	7e 83       	std	Y+6, r23	; 0x06
     530:	8f 83       	std	Y+7, r24	; 0x07
     532:	98 87       	std	Y+8, r25	; 0x08
     534:	c3 01       	movw	r24, r6
     536:	b2 01       	movw	r22, r4
     538:	0e 94 cb 21 	call	0x4396	; 0x4396 <sin>
     53c:	69 87       	std	Y+9, r22	; 0x09
     53e:	7a 87       	std	Y+10, r23	; 0x0a
     540:	8b 87       	std	Y+11, r24	; 0x0b
     542:	9c 87       	std	Y+12, r25	; 0x0c
     544:	a6 01       	movw	r20, r12
     546:	95 01       	movw	r18, r10
     548:	6d 81       	ldd	r22, Y+5	; 0x05
     54a:	7e 81       	ldd	r23, Y+6	; 0x06
     54c:	8f 81       	ldd	r24, Y+7	; 0x07
     54e:	98 85       	ldd	r25, Y+8	; 0x08
     550:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     554:	2b 01       	movw	r4, r22
     556:	3c 01       	movw	r6, r24
     558:	28 a5       	ldd	r18, Y+40	; 0x28
     55a:	39 a5       	ldd	r19, Y+41	; 0x29
     55c:	4a a5       	ldd	r20, Y+42	; 0x2a
     55e:	5b a5       	ldd	r21, Y+43	; 0x2b
     560:	69 85       	ldd	r22, Y+9	; 0x09
     562:	7a 85       	ldd	r23, Y+10	; 0x0a
     564:	8b 85       	ldd	r24, Y+11	; 0x0b
     566:	9c 85       	ldd	r25, Y+12	; 0x0c
     568:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     56c:	9b 01       	movw	r18, r22
     56e:	ac 01       	movw	r20, r24
     570:	c3 01       	movw	r24, r6
     572:	b2 01       	movw	r22, r4
     574:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <__subsf3>
     578:	2b 01       	movw	r4, r22
     57a:	3c 01       	movw	r6, r24
     57c:	a6 01       	movw	r20, r12
     57e:	95 01       	movw	r18, r10
     580:	69 81       	ldd	r22, Y+1	; 0x01
     582:	7a 81       	ldd	r23, Y+2	; 0x02
     584:	8b 81       	ldd	r24, Y+3	; 0x03
     586:	9c 81       	ldd	r25, Y+4	; 0x04
     588:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     58c:	29 85       	ldd	r18, Y+9	; 0x09
     58e:	3a 85       	ldd	r19, Y+10	; 0x0a
     590:	4b 85       	ldd	r20, Y+11	; 0x0b
     592:	5c 85       	ldd	r21, Y+12	; 0x0c
     594:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     598:	4b 01       	movw	r8, r22
     59a:	5c 01       	movw	r10, r24
     59c:	a8 01       	movw	r20, r16
     59e:	97 01       	movw	r18, r14
     5a0:	6d 85       	ldd	r22, Y+13	; 0x0d
     5a2:	7e 85       	ldd	r23, Y+14	; 0x0e
     5a4:	8f 85       	ldd	r24, Y+15	; 0x0f
     5a6:	98 89       	ldd	r25, Y+16	; 0x10
     5a8:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     5ac:	9b 01       	movw	r18, r22
     5ae:	ac 01       	movw	r20, r24
     5b0:	c5 01       	movw	r24, r10
     5b2:	b4 01       	movw	r22, r8
     5b4:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <__subsf3>
     5b8:	4b 01       	movw	r8, r22
     5ba:	5c 01       	movw	r10, r24
     5bc:	28 a5       	ldd	r18, Y+40	; 0x28
     5be:	39 a5       	ldd	r19, Y+41	; 0x29
     5c0:	4a a5       	ldd	r20, Y+42	; 0x2a
     5c2:	5b a5       	ldd	r21, Y+43	; 0x2b
     5c4:	69 81       	ldd	r22, Y+1	; 0x01
     5c6:	7a 81       	ldd	r23, Y+2	; 0x02
     5c8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ca:	9c 81       	ldd	r25, Y+4	; 0x04
     5cc:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     5d0:	2d 81       	ldd	r18, Y+5	; 0x05
     5d2:	3e 81       	ldd	r19, Y+6	; 0x06
     5d4:	4f 81       	ldd	r20, Y+7	; 0x07
     5d6:	58 85       	ldd	r21, Y+8	; 0x08
     5d8:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     5dc:	9b 01       	movw	r18, r22
     5de:	ac 01       	movw	r20, r24
     5e0:	c5 01       	movw	r24, r10
     5e2:	b4 01       	movw	r22, r8
     5e4:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
     5e8:	90 58       	subi	r25, 0x80	; 128
     5ea:	a3 01       	movw	r20, r6
     5ec:	92 01       	movw	r18, r4
     5ee:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <atan2>
     5f2:	21 ee       	ldi	r18, 0xE1	; 225
     5f4:	3e e2       	ldi	r19, 0x2E	; 46
     5f6:	45 e6       	ldi	r20, 0x65	; 101
     5f8:	52 e4       	ldi	r21, 0x42	; 66
     5fa:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     5fe:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
     602:	9b 01       	movw	r18, r22
     604:	77 23       	and	r23, r23
     606:	14 f4       	brge	.+4      	; 0x60c <_Z25compass_tilt_compensationfffff+0x14c>
     608:	28 59       	subi	r18, 0x98	; 152
     60a:	3e 4f       	sbci	r19, 0xFE	; 254
     60c:	c9 01       	movw	r24, r18
     60e:	64 96       	adiw	r28, 0x14	; 20
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	ff 90       	pop	r15
     624:	ef 90       	pop	r14
     626:	df 90       	pop	r13
     628:	cf 90       	pop	r12
     62a:	bf 90       	pop	r11
     62c:	af 90       	pop	r10
     62e:	9f 90       	pop	r9
     630:	8f 90       	pop	r8
     632:	7f 90       	pop	r7
     634:	6f 90       	pop	r6
     636:	5f 90       	pop	r5
     638:	4f 90       	pop	r4
     63a:	08 95       	ret

0000063c <_Z24getAverageCompensatedYawv>:
     63c:	4f 92       	push	r4
     63e:	5f 92       	push	r5
     640:	6f 92       	push	r6
     642:	7f 92       	push	r7
     644:	af 92       	push	r10
     646:	bf 92       	push	r11
     648:	cf 92       	push	r12
     64a:	df 92       	push	r13
     64c:	ef 92       	push	r14
     64e:	ff 92       	push	r15
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
     65c:	28 97       	sbiw	r28, 0x08	; 8
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	f8 94       	cli
     662:	de bf       	out	0x3e, r29	; 62
     664:	0f be       	out	0x3f, r0	; 63
     666:	cd bf       	out	0x3d, r28	; 61
     668:	60 91 9a 04 	lds	r22, 0x049A	; 0x80049a <raw_y>
     66c:	70 91 9b 04 	lds	r23, 0x049B	; 0x80049b <raw_y+0x1>
     670:	07 2e       	mov	r0, r23
     672:	00 0c       	add	r0, r0
     674:	88 0b       	sbc	r24, r24
     676:	99 0b       	sbc	r25, r25
     678:	0e 94 4f 20 	call	0x409e	; 0x409e <__floatsisf>
     67c:	5b 01       	movw	r10, r22
     67e:	6c 01       	movw	r12, r24
     680:	60 91 9c 04 	lds	r22, 0x049C	; 0x80049c <raw_x>
     684:	70 91 9d 04 	lds	r23, 0x049D	; 0x80049d <raw_x+0x1>
     688:	07 2e       	mov	r0, r23
     68a:	00 0c       	add	r0, r0
     68c:	88 0b       	sbc	r24, r24
     68e:	99 0b       	sbc	r25, r25
     690:	0e 94 4f 20 	call	0x409e	; 0x409e <__floatsisf>
     694:	69 83       	std	Y+1, r22	; 0x01
     696:	7a 83       	std	Y+2, r23	; 0x02
     698:	8b 83       	std	Y+3, r24	; 0x03
     69a:	9c 83       	std	Y+4, r25	; 0x04
     69c:	25 e3       	ldi	r18, 0x35	; 53
     69e:	3a ef       	ldi	r19, 0xFA	; 250
     6a0:	4e e8       	ldi	r20, 0x8E	; 142
     6a2:	5c e3       	ldi	r21, 0x3C	; 60
     6a4:	60 91 03 04 	lds	r22, 0x0403	; 0x800403 <_ZL14filtered_pitch>
     6a8:	70 91 04 04 	lds	r23, 0x0404	; 0x800404 <_ZL14filtered_pitch+0x1>
     6ac:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <_ZL14filtered_pitch+0x2>
     6b0:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <_ZL14filtered_pitch+0x3>
     6b4:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     6b8:	6d 83       	std	Y+5, r22	; 0x05
     6ba:	7e 83       	std	Y+6, r23	; 0x06
     6bc:	8f 83       	std	Y+7, r24	; 0x07
     6be:	98 87       	std	Y+8, r25	; 0x08
     6c0:	25 e3       	ldi	r18, 0x35	; 53
     6c2:	3a ef       	ldi	r19, 0xFA	; 250
     6c4:	4e e8       	ldi	r20, 0x8E	; 142
     6c6:	5c e3       	ldi	r21, 0x3C	; 60
     6c8:	60 91 07 04 	lds	r22, 0x0407	; 0x800407 <_ZL13filtered_roll>
     6cc:	70 91 08 04 	lds	r23, 0x0408	; 0x800408 <_ZL13filtered_roll+0x1>
     6d0:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <_ZL13filtered_roll+0x2>
     6d4:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZL13filtered_roll+0x3>
     6d8:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     6dc:	2b 01       	movw	r4, r22
     6de:	3c 01       	movw	r6, r24
     6e0:	60 91 98 04 	lds	r22, 0x0498	; 0x800498 <raw_z>
     6e4:	70 91 99 04 	lds	r23, 0x0499	; 0x800499 <raw_z+0x1>
     6e8:	07 2e       	mov	r0, r23
     6ea:	00 0c       	add	r0, r0
     6ec:	88 0b       	sbc	r24, r24
     6ee:	99 0b       	sbc	r25, r25
     6f0:	0e 94 4f 20 	call	0x409e	; 0x409e <__floatsisf>
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	7f 93       	push	r23
     6fa:	6f 93       	push	r22
     6fc:	e9 80       	ldd	r14, Y+1	; 0x01
     6fe:	fa 80       	ldd	r15, Y+2	; 0x02
     700:	0b 81       	ldd	r16, Y+3	; 0x03
     702:	1c 81       	ldd	r17, Y+4	; 0x04
     704:	2d 81       	ldd	r18, Y+5	; 0x05
     706:	3e 81       	ldd	r19, Y+6	; 0x06
     708:	4f 81       	ldd	r20, Y+7	; 0x07
     70a:	58 85       	ldd	r21, Y+8	; 0x08
     70c:	c3 01       	movw	r24, r6
     70e:	b2 01       	movw	r22, r4
     710:	d7 de       	rcall	.-594    	; 0x4c0 <_Z25compass_tilt_compensationfffff>
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	bc 01       	movw	r22, r24
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 4d 20 	call	0x409a	; 0x409a <__floatunsisf>
     724:	2b 01       	movw	r4, r22
     726:	3c 01       	movw	r6, r24
     728:	2a e0       	ldi	r18, 0x0A	; 10
     72a:	29 83       	std	Y+1, r18	; 0x01
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	cb 01       	movw	r24, r22
     732:	a3 01       	movw	r20, r6
     734:	92 01       	movw	r18, r4
     736:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
     73a:	29 81       	ldd	r18, Y+1	; 0x01
     73c:	21 50       	subi	r18, 0x01	; 1
     73e:	29 83       	std	Y+1, r18	; 0x01
     740:	21 11       	cpse	r18, r1
     742:	f7 cf       	rjmp	.-18     	; 0x732 <_Z24getAverageCompensatedYawv+0xf6>
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	40 e2       	ldi	r20, 0x20	; 32
     74a:	51 e4       	ldi	r21, 0x41	; 65
     74c:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__divsf3>
     750:	28 96       	adiw	r28, 0x08	; 8
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	ff 90       	pop	r15
     766:	ef 90       	pop	r14
     768:	df 90       	pop	r13
     76a:	cf 90       	pop	r12
     76c:	bf 90       	pop	r11
     76e:	af 90       	pop	r10
     770:	7f 90       	pop	r7
     772:	6f 90       	pop	r6
     774:	5f 90       	pop	r5
     776:	4f 90       	pop	r4
     778:	08 95       	ret

0000077a <_Z10getYawGY88v>:
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	2c 97       	sbiw	r28, 0x0c	; 12
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	67 e1       	ldi	r22, 0x17	; 23
     79c:	74 e0       	ldi	r23, 0x04	; 4
     79e:	ce 01       	movw	r24, r28
     7a0:	01 96       	adiw	r24, 0x01	; 1
     7a2:	0e 94 0d 19 	call	0x321a	; 0x321a <_ZN7MPU605018readNormalizeAccelEv>
     7a6:	8c e0       	ldi	r24, 0x0C	; 12
     7a8:	fe 01       	movw	r30, r28
     7aa:	31 96       	adiw	r30, 0x01	; 1
     7ac:	af ee       	ldi	r26, 0xEF	; 239
     7ae:	b3 e0       	ldi	r27, 0x03	; 3
     7b0:	01 90       	ld	r0, Z+
     7b2:	0d 92       	st	X+, r0
     7b4:	8a 95       	dec	r24
     7b6:	e1 f7       	brne	.-8      	; 0x7b0 <_Z10getYawGY88v+0x36>
     7b8:	87 e1       	ldi	r24, 0x17	; 23
     7ba:	94 e0       	ldi	r25, 0x04	; 4
     7bc:	0e 94 aa 1b 	call	0x3754	; 0x3754 <_ZN7MPU60508rateGyroEv>
     7c0:	0f ee       	ldi	r16, 0xEF	; 239
     7c2:	13 e0       	ldi	r17, 0x03	; 3
     7c4:	f8 01       	movw	r30, r16
     7c6:	c0 84       	ldd	r12, Z+8	; 0x08
     7c8:	d1 84       	ldd	r13, Z+9	; 0x09
     7ca:	e2 84       	ldd	r14, Z+10	; 0x0a
     7cc:	f3 84       	ldd	r15, Z+11	; 0x0b
     7ce:	60 81       	ld	r22, Z
     7d0:	71 81       	ldd	r23, Z+1	; 0x01
     7d2:	82 81       	ldd	r24, Z+2	; 0x02
     7d4:	93 81       	ldd	r25, Z+3	; 0x03
     7d6:	a7 01       	movw	r20, r14
     7d8:	96 01       	movw	r18, r12
     7da:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <atan2>
     7de:	21 ee       	ldi	r18, 0xE1	; 225
     7e0:	3e e2       	ldi	r19, 0x2E	; 46
     7e2:	45 e6       	ldi	r20, 0x65	; 101
     7e4:	52 e4       	ldi	r21, 0x42	; 66
     7e6:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     7ea:	60 93 13 04 	sts	0x0413, r22	; 0x800413 <_ZL15unfiltered_roll>
     7ee:	70 93 14 04 	sts	0x0414, r23	; 0x800414 <_ZL15unfiltered_roll+0x1>
     7f2:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <_ZL15unfiltered_roll+0x2>
     7f6:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <_ZL15unfiltered_roll+0x3>
     7fa:	f8 01       	movw	r30, r16
     7fc:	64 81       	ldd	r22, Z+4	; 0x04
     7fe:	75 81       	ldd	r23, Z+5	; 0x05
     800:	86 81       	ldd	r24, Z+6	; 0x06
     802:	97 81       	ldd	r25, Z+7	; 0x07
     804:	a7 01       	movw	r20, r14
     806:	96 01       	movw	r18, r12
     808:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <atan2>
     80c:	21 ee       	ldi	r18, 0xE1	; 225
     80e:	3e e2       	ldi	r19, 0x2E	; 46
     810:	45 e6       	ldi	r20, 0x65	; 101
     812:	52 e4       	ldi	r21, 0x42	; 66
     814:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     818:	60 93 0f 04 	sts	0x040F, r22	; 0x80040f <_ZL16unfiltered_pitch>
     81c:	70 93 10 04 	sts	0x0410, r23	; 0x800410 <_ZL16unfiltered_pitch+0x1>
     820:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <_ZL16unfiltered_pitch+0x2>
     824:	90 93 12 04 	sts	0x0412, r25	; 0x800412 <_ZL16unfiltered_pitch+0x3>
     828:	70 dd       	rcall	.-1312   	; 0x30a <_Z12read_Compassv>
     82a:	b0 dd       	rcall	.-1184   	; 0x38c <_Z6millisv>
     82c:	00 91 fb 03 	lds	r16, 0x03FB	; 0x8003fb <previousTime>
     830:	10 91 fc 03 	lds	r17, 0x03FC	; 0x8003fc <previousTime+0x1>
     834:	20 91 fd 03 	lds	r18, 0x03FD	; 0x8003fd <previousTime+0x2>
     838:	30 91 fe 03 	lds	r19, 0x03FE	; 0x8003fe <previousTime+0x3>
     83c:	60 17       	cp	r22, r16
     83e:	71 07       	cpc	r23, r17
     840:	82 07       	cpc	r24, r18
     842:	93 07       	cpc	r25, r19
     844:	09 f4       	brne	.+2      	; 0x848 <_Z10getYawGY88v+0xce>
     846:	f0 c0       	rjmp	.+480    	; 0xa28 <_Z10getYawGY88v+0x2ae>
     848:	a1 dd       	rcall	.-1214   	; 0x38c <_Z6millisv>
     84a:	60 93 fb 03 	sts	0x03FB, r22	; 0x8003fb <previousTime>
     84e:	70 93 fc 03 	sts	0x03FC, r23	; 0x8003fc <previousTime+0x1>
     852:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <previousTime+0x2>
     856:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <previousTime+0x3>
     85a:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <readFirstData>
     85e:	88 23       	and	r24, r24
     860:	91 f1       	breq	.+100    	; 0x8c6 <_Z10getYawGY88v+0x14c>
     862:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <_ZL15unfiltered_roll>
     866:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <_ZL15unfiltered_roll+0x1>
     86a:	a0 91 15 04 	lds	r26, 0x0415	; 0x800415 <_ZL15unfiltered_roll+0x2>
     86e:	b0 91 16 04 	lds	r27, 0x0416	; 0x800416 <_ZL15unfiltered_roll+0x3>
     872:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <_ZL13filtered_roll>
     876:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <_ZL13filtered_roll+0x1>
     87a:	a0 93 09 04 	sts	0x0409, r26	; 0x800409 <_ZL13filtered_roll+0x2>
     87e:	b0 93 0a 04 	sts	0x040A, r27	; 0x80040a <_ZL13filtered_roll+0x3>
     882:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <_ZL16unfiltered_pitch>
     886:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <_ZL16unfiltered_pitch+0x1>
     88a:	a0 91 11 04 	lds	r26, 0x0411	; 0x800411 <_ZL16unfiltered_pitch+0x2>
     88e:	b0 91 12 04 	lds	r27, 0x0412	; 0x800412 <_ZL16unfiltered_pitch+0x3>
     892:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <_ZL14filtered_pitch>
     896:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <_ZL14filtered_pitch+0x1>
     89a:	a0 93 05 04 	sts	0x0405, r26	; 0x800405 <_ZL14filtered_pitch+0x2>
     89e:	b0 93 06 04 	sts	0x0406, r27	; 0x800406 <_ZL14filtered_pitch+0x3>
     8a2:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <_ZL14unfiltered_yaw>
     8a6:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <_ZL14unfiltered_yaw+0x1>
     8aa:	a0 91 0d 04 	lds	r26, 0x040D	; 0x80040d <_ZL14unfiltered_yaw+0x2>
     8ae:	b0 91 0e 04 	lds	r27, 0x040E	; 0x80040e <_ZL14unfiltered_yaw+0x3>
     8b2:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <_ZL12filtered_yaw>
     8b6:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <_ZL12filtered_yaw+0x1>
     8ba:	a0 93 01 04 	sts	0x0401, r26	; 0x800401 <_ZL12filtered_yaw+0x2>
     8be:	b0 93 02 04 	sts	0x0402, r27	; 0x800402 <_ZL12filtered_yaw+0x3>
     8c2:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <readFirstData>
     8c6:	87 e1       	ldi	r24, 0x17	; 23
     8c8:	94 e0       	ldi	r25, 0x04	; 4
     8ca:	0e 94 03 1c 	call	0x3806	; 0x3806 <_ZN7MPU605012getGyroRateXEv>
     8ce:	2f e6       	ldi	r18, 0x6F	; 111
     8d0:	32 e1       	ldi	r19, 0x12	; 18
     8d2:	43 e8       	ldi	r20, 0x83	; 131
     8d4:	5a e3       	ldi	r21, 0x3A	; 58
     8d6:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     8da:	20 91 07 04 	lds	r18, 0x0407	; 0x800407 <_ZL13filtered_roll>
     8de:	30 91 08 04 	lds	r19, 0x0408	; 0x800408 <_ZL13filtered_roll+0x1>
     8e2:	40 91 09 04 	lds	r20, 0x0409	; 0x800409 <_ZL13filtered_roll+0x2>
     8e6:	50 91 0a 04 	lds	r21, 0x040A	; 0x80040a <_ZL13filtered_roll+0x3>
     8ea:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
     8ee:	2b e7       	ldi	r18, 0x7B	; 123
     8f0:	34 e1       	ldi	r19, 0x14	; 20
     8f2:	4e e6       	ldi	r20, 0x6E	; 110
     8f4:	5f e3       	ldi	r21, 0x3F	; 63
     8f6:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     8fa:	6b 01       	movw	r12, r22
     8fc:	7c 01       	movw	r14, r24
     8fe:	29 e2       	ldi	r18, 0x29	; 41
     900:	3c e5       	ldi	r19, 0x5C	; 92
     902:	4f e8       	ldi	r20, 0x8F	; 143
     904:	5d e3       	ldi	r21, 0x3D	; 61
     906:	60 91 13 04 	lds	r22, 0x0413	; 0x800413 <_ZL15unfiltered_roll>
     90a:	70 91 14 04 	lds	r23, 0x0414	; 0x800414 <_ZL15unfiltered_roll+0x1>
     90e:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <_ZL15unfiltered_roll+0x2>
     912:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <_ZL15unfiltered_roll+0x3>
     916:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     91a:	9b 01       	movw	r18, r22
     91c:	ac 01       	movw	r20, r24
     91e:	c7 01       	movw	r24, r14
     920:	b6 01       	movw	r22, r12
     922:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
     926:	60 93 07 04 	sts	0x0407, r22	; 0x800407 <_ZL13filtered_roll>
     92a:	70 93 08 04 	sts	0x0408, r23	; 0x800408 <_ZL13filtered_roll+0x1>
     92e:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <_ZL13filtered_roll+0x2>
     932:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <_ZL13filtered_roll+0x3>
     936:	87 e1       	ldi	r24, 0x17	; 23
     938:	94 e0       	ldi	r25, 0x04	; 4
     93a:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN7MPU605012getGyroRateYEv>
     93e:	2f e6       	ldi	r18, 0x6F	; 111
     940:	32 e1       	ldi	r19, 0x12	; 18
     942:	43 e8       	ldi	r20, 0x83	; 131
     944:	5a e3       	ldi	r21, 0x3A	; 58
     946:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     94a:	20 91 03 04 	lds	r18, 0x0403	; 0x800403 <_ZL14filtered_pitch>
     94e:	30 91 04 04 	lds	r19, 0x0404	; 0x800404 <_ZL14filtered_pitch+0x1>
     952:	40 91 05 04 	lds	r20, 0x0405	; 0x800405 <_ZL14filtered_pitch+0x2>
     956:	50 91 06 04 	lds	r21, 0x0406	; 0x800406 <_ZL14filtered_pitch+0x3>
     95a:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
     95e:	2b e7       	ldi	r18, 0x7B	; 123
     960:	34 e1       	ldi	r19, 0x14	; 20
     962:	4e e6       	ldi	r20, 0x6E	; 110
     964:	5f e3       	ldi	r21, 0x3F	; 63
     966:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     96a:	6b 01       	movw	r12, r22
     96c:	7c 01       	movw	r14, r24
     96e:	29 e2       	ldi	r18, 0x29	; 41
     970:	3c e5       	ldi	r19, 0x5C	; 92
     972:	4f e8       	ldi	r20, 0x8F	; 143
     974:	5d e3       	ldi	r21, 0x3D	; 61
     976:	60 91 0f 04 	lds	r22, 0x040F	; 0x80040f <_ZL16unfiltered_pitch>
     97a:	70 91 10 04 	lds	r23, 0x0410	; 0x800410 <_ZL16unfiltered_pitch+0x1>
     97e:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <_ZL16unfiltered_pitch+0x2>
     982:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <_ZL16unfiltered_pitch+0x3>
     986:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     98a:	9b 01       	movw	r18, r22
     98c:	ac 01       	movw	r20, r24
     98e:	c7 01       	movw	r24, r14
     990:	b6 01       	movw	r22, r12
     992:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
     996:	60 93 03 04 	sts	0x0403, r22	; 0x800403 <_ZL14filtered_pitch>
     99a:	70 93 04 04 	sts	0x0404, r23	; 0x800404 <_ZL14filtered_pitch+0x1>
     99e:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <_ZL14filtered_pitch+0x2>
     9a2:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <_ZL14filtered_pitch+0x3>
     9a6:	4a de       	rcall	.-876    	; 0x63c <_Z24getAverageCompensatedYawv>
     9a8:	60 93 0b 04 	sts	0x040B, r22	; 0x80040b <_ZL14unfiltered_yaw>
     9ac:	70 93 0c 04 	sts	0x040C, r23	; 0x80040c <_ZL14unfiltered_yaw+0x1>
     9b0:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <_ZL14unfiltered_yaw+0x2>
     9b4:	90 93 0e 04 	sts	0x040E, r25	; 0x80040e <_ZL14unfiltered_yaw+0x3>
     9b8:	87 e1       	ldi	r24, 0x17	; 23
     9ba:	94 e0       	ldi	r25, 0x04	; 4
     9bc:	0e 94 13 1c 	call	0x3826	; 0x3826 <_ZN7MPU605012getGyroRateZEv>
     9c0:	2f e6       	ldi	r18, 0x6F	; 111
     9c2:	32 e1       	ldi	r19, 0x12	; 18
     9c4:	43 e8       	ldi	r20, 0x83	; 131
     9c6:	5a e3       	ldi	r21, 0x3A	; 58
     9c8:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     9cc:	20 91 ff 03 	lds	r18, 0x03FF	; 0x8003ff <_ZL12filtered_yaw>
     9d0:	30 91 00 04 	lds	r19, 0x0400	; 0x800400 <_ZL12filtered_yaw+0x1>
     9d4:	40 91 01 04 	lds	r20, 0x0401	; 0x800401 <_ZL12filtered_yaw+0x2>
     9d8:	50 91 02 04 	lds	r21, 0x0402	; 0x800402 <_ZL12filtered_yaw+0x3>
     9dc:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
     9e0:	2d ec       	ldi	r18, 0xCD	; 205
     9e2:	3c ec       	ldi	r19, 0xCC	; 204
     9e4:	4c ec       	ldi	r20, 0xCC	; 204
     9e6:	5d e3       	ldi	r21, 0x3D	; 61
     9e8:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     9ec:	6b 01       	movw	r12, r22
     9ee:	7c 01       	movw	r14, r24
     9f0:	26 e6       	ldi	r18, 0x66	; 102
     9f2:	36 e6       	ldi	r19, 0x66	; 102
     9f4:	46 e6       	ldi	r20, 0x66	; 102
     9f6:	5f e3       	ldi	r21, 0x3F	; 63
     9f8:	60 91 0b 04 	lds	r22, 0x040B	; 0x80040b <_ZL14unfiltered_yaw>
     9fc:	70 91 0c 04 	lds	r23, 0x040C	; 0x80040c <_ZL14unfiltered_yaw+0x1>
     a00:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <_ZL14unfiltered_yaw+0x2>
     a04:	90 91 0e 04 	lds	r25, 0x040E	; 0x80040e <_ZL14unfiltered_yaw+0x3>
     a08:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     a0c:	9b 01       	movw	r18, r22
     a0e:	ac 01       	movw	r20, r24
     a10:	c7 01       	movw	r24, r14
     a12:	b6 01       	movw	r22, r12
     a14:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
     a18:	60 93 ff 03 	sts	0x03FF, r22	; 0x8003ff <_ZL12filtered_yaw>
     a1c:	70 93 00 04 	sts	0x0400, r23	; 0x800400 <_ZL12filtered_yaw+0x1>
     a20:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <_ZL12filtered_yaw+0x2>
     a24:	90 93 02 04 	sts	0x0402, r25	; 0x800402 <_ZL12filtered_yaw+0x3>
     a28:	60 91 ff 03 	lds	r22, 0x03FF	; 0x8003ff <_ZL12filtered_yaw>
     a2c:	70 91 00 04 	lds	r23, 0x0400	; 0x800400 <_ZL12filtered_yaw+0x1>
     a30:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <_ZL12filtered_yaw+0x2>
     a34:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <_ZL12filtered_yaw+0x3>
     a38:	0e 94 21 20 	call	0x4042	; 0x4042 <__fixunssfsi>
     a3c:	cb 01       	movw	r24, r22
     a3e:	2c 96       	adiw	r28, 0x0c	; 12
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	de bf       	out	0x3e, r29	; 62
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	cd bf       	out	0x3d, r28	; 61
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ff 90       	pop	r15
     a54:	ef 90       	pop	r14
     a56:	df 90       	pop	r13
     a58:	cf 90       	pop	r12
     a5a:	08 95       	ret

00000a5c <_Z13initializeAllv>:
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	ed e4       	ldi	r30, 0x4D	; 77
     a66:	f3 e0       	ldi	r31, 0x03	; 3
     a68:	88 e2       	ldi	r24, 0x28	; 40
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	92 8b       	std	Z+18, r25	; 0x12
     a6e:	81 8b       	std	Z+17, r24	; 0x11
     a70:	14 8a       	std	Z+20, r1	; 0x14
     a72:	13 8a       	std	Z+19, r1	; 0x13
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	a0 eb       	ldi	r26, 0xB0	; 176
     a7a:	b0 e4       	ldi	r27, 0x40	; 64
     a7c:	85 8b       	std	Z+21, r24	; 0x15
     a7e:	96 8b       	std	Z+22, r25	; 0x16
     a80:	a7 8b       	std	Z+23, r26	; 0x17
     a82:	b0 8f       	std	Z+24, r27	; 0x18
     a84:	11 8e       	std	Z+25, r1	; 0x19
     a86:	12 8e       	std	Z+26, r1	; 0x1a
     a88:	13 8e       	std	Z+27, r1	; 0x1b
     a8a:	14 8e       	std	Z+28, r1	; 0x1c
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	aa ef       	ldi	r26, 0xFA	; 250
     a92:	b3 e4       	ldi	r27, 0x43	; 67
     a94:	85 8f       	std	Z+29, r24	; 0x1d
     a96:	96 8f       	std	Z+30, r25	; 0x1e
     a98:	a7 8f       	std	Z+31, r26	; 0x1f
     a9a:	b0 a3       	std	Z+32, r27	; 0x20
     a9c:	ec e2       	ldi	r30, 0x2C	; 44
     a9e:	f3 e0       	ldi	r31, 0x03	; 3
     aa0:	8a e9       	ldi	r24, 0x9A	; 154
     aa2:	99 e9       	ldi	r25, 0x99	; 153
     aa4:	a9 e1       	ldi	r26, 0x19	; 25
     aa6:	be e3       	ldi	r27, 0x3E	; 62
     aa8:	85 8b       	std	Z+21, r24	; 0x15
     aaa:	96 8b       	std	Z+22, r25	; 0x16
     aac:	a7 8b       	std	Z+23, r26	; 0x17
     aae:	b0 8f       	std	Z+24, r27	; 0x18
     ab0:	11 8e       	std	Z+25, r1	; 0x19
     ab2:	12 8e       	std	Z+26, r1	; 0x1a
     ab4:	13 8e       	std	Z+27, r1	; 0x1b
     ab6:	14 8e       	std	Z+28, r1	; 0x1c
     ab8:	46 e6       	ldi	r20, 0x66	; 102
     aba:	56 e6       	ldi	r21, 0x66	; 102
     abc:	66 e6       	ldi	r22, 0x66	; 102
     abe:	7f e3       	ldi	r23, 0x3F	; 63
     ac0:	45 8f       	std	Z+29, r20	; 0x1d
     ac2:	56 8f       	std	Z+30, r21	; 0x1e
     ac4:	67 8f       	std	Z+31, r22	; 0x1f
     ac6:	70 a3       	std	Z+32, r23	; 0x20
     ac8:	eb e0       	ldi	r30, 0x0B	; 11
     aca:	f3 e0       	ldi	r31, 0x03	; 3
     acc:	85 8b       	std	Z+21, r24	; 0x15
     ace:	96 8b       	std	Z+22, r25	; 0x16
     ad0:	a7 8b       	std	Z+23, r26	; 0x17
     ad2:	b0 8f       	std	Z+24, r27	; 0x18
     ad4:	11 8e       	std	Z+25, r1	; 0x19
     ad6:	12 8e       	std	Z+26, r1	; 0x1a
     ad8:	13 8e       	std	Z+27, r1	; 0x1b
     ada:	14 8e       	std	Z+28, r1	; 0x1c
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	a0 e8       	ldi	r26, 0x80	; 128
     ae2:	bf e3       	ldi	r27, 0x3F	; 63
     ae4:	85 8f       	std	Z+29, r24	; 0x1d
     ae6:	96 8f       	std	Z+30, r25	; 0x1e
     ae8:	a7 8f       	std	Z+31, r26	; 0x1f
     aea:	b0 a3       	std	Z+32, r27	; 0x20
     aec:	a6 ee       	ldi	r26, 0xE6	; 230
     aee:	b2 e0       	ldi	r27, 0x02	; 2
     af0:	8d e2       	ldi	r24, 0x2D	; 45
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	1f 96       	adiw	r26, 0x0f	; 15
     af6:	9c 93       	st	X, r25
     af8:	8e 93       	st	-X, r24
     afa:	1e 97       	sbiw	r26, 0x0e	; 14
     afc:	e5 ec       	ldi	r30, 0xC5	; 197
     afe:	f2 e0       	ldi	r31, 0x02	; 2
     b00:	97 87       	std	Z+15, r25	; 0x0f
     b02:	86 87       	std	Z+14, r24	; 0x0e
     b04:	0a e9       	ldi	r16, 0x9A	; 154
     b06:	19 e9       	ldi	r17, 0x99	; 153
     b08:	29 e9       	ldi	r18, 0x99	; 153
     b0a:	3f e3       	ldi	r19, 0x3F	; 63
     b0c:	55 96       	adiw	r26, 0x15	; 21
     b0e:	0d 93       	st	X+, r16
     b10:	1d 93       	st	X+, r17
     b12:	2d 93       	st	X+, r18
     b14:	3c 93       	st	X, r19
     b16:	58 97       	sbiw	r26, 0x18	; 24
     b18:	59 96       	adiw	r26, 0x19	; 25
     b1a:	1d 92       	st	X+, r1
     b1c:	1d 92       	st	X+, r1
     b1e:	1d 92       	st	X+, r1
     b20:	1c 92       	st	X, r1
     b22:	5c 97       	sbiw	r26, 0x1c	; 28
     b24:	40 e0       	ldi	r20, 0x00	; 0
     b26:	50 e0       	ldi	r21, 0x00	; 0
     b28:	60 e8       	ldi	r22, 0x80	; 128
     b2a:	71 e4       	ldi	r23, 0x41	; 65
     b2c:	5d 96       	adiw	r26, 0x1d	; 29
     b2e:	4d 93       	st	X+, r20
     b30:	5d 93       	st	X+, r21
     b32:	6d 93       	st	X+, r22
     b34:	7c 93       	st	X, r23
     b36:	90 97       	sbiw	r26, 0x20	; 32
     b38:	05 8b       	std	Z+21, r16	; 0x15
     b3a:	16 8b       	std	Z+22, r17	; 0x16
     b3c:	27 8b       	std	Z+23, r18	; 0x17
     b3e:	30 8f       	std	Z+24, r19	; 0x18
     b40:	11 8e       	std	Z+25, r1	; 0x19
     b42:	12 8e       	std	Z+26, r1	; 0x1a
     b44:	13 8e       	std	Z+27, r1	; 0x1b
     b46:	14 8e       	std	Z+28, r1	; 0x1c
     b48:	45 8f       	std	Z+29, r20	; 0x1d
     b4a:	56 8f       	std	Z+30, r21	; 0x1e
     b4c:	67 8f       	std	Z+31, r22	; 0x1f
     b4e:	70 a3       	std	Z+32, r23	; 0x20
     b50:	a2 dc       	rcall	.-1724   	; 0x496 <_Z8initGY88v>
     b52:	1c dc       	rcall	.-1992   	; 0x38c <_Z6millisv>
     b54:	60 93 eb 03 	sts	0x03EB, r22	; 0x8003eb <startTime>
     b58:	70 93 ec 03 	sts	0x03EC, r23	; 0x8003ec <startTime+0x1>
     b5c:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <startTime+0x2>
     b60:	90 93 ee 03 	sts	0x03EE, r25	; 0x8003ee <startTime+0x3>
     b64:	cd e4       	ldi	r28, 0x4D	; 77
     b66:	d3 e0       	ldi	r29, 0x03	; 3
     b68:	11 dc       	rcall	.-2014   	; 0x38c <_Z6millisv>
     b6a:	00 91 eb 03 	lds	r16, 0x03EB	; 0x8003eb <startTime>
     b6e:	10 91 ec 03 	lds	r17, 0x03EC	; 0x8003ec <startTime+0x1>
     b72:	20 91 ed 03 	lds	r18, 0x03ED	; 0x8003ed <startTime+0x2>
     b76:	30 91 ee 03 	lds	r19, 0x03EE	; 0x8003ee <startTime+0x3>
     b7a:	dc 01       	movw	r26, r24
     b7c:	cb 01       	movw	r24, r22
     b7e:	80 1b       	sub	r24, r16
     b80:	91 0b       	sbc	r25, r17
     b82:	a2 0b       	sbc	r26, r18
     b84:	b3 0b       	sbc	r27, r19
     b86:	84 3f       	cpi	r24, 0xF4	; 244
     b88:	91 40       	sbci	r25, 0x01	; 1
     b8a:	a1 05       	cpc	r26, r1
     b8c:	b1 05       	cpc	r27, r1
     b8e:	48 f4       	brcc	.+18     	; 0xba2 <_Z13initializeAllv+0x146>
     b90:	f4 dd       	rcall	.-1048   	; 0x77a <_Z10getYawGY88v>
     b92:	90 93 d0 03 	sts	0x03D0, r25	; 0x8003d0 <initialCompassAngle+0x1>
     b96:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <initialCompassAngle>
     b9a:	18 8a       	std	Y+16, r1	; 0x10
     b9c:	9f 87       	std	Y+15, r25	; 0x0f
     b9e:	8e 87       	std	Y+14, r24	; 0x0e
     ba0:	e3 cf       	rjmp	.-58     	; 0xb68 <_Z13initializeAllv+0x10c>
     ba2:	0e 94 1b 1c 	call	0x3836	; 0x3836 <_Z16checkRobotMotionv>
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	1f 91       	pop	r17
     bac:	0f 91       	pop	r16
     bae:	08 95       	ret

00000bb0 <_Z10BrakeMotorv>:
     bb0:	e8 e0       	ldi	r30, 0x08	; 8
     bb2:	f1 e0       	ldi	r31, 0x01	; 1
     bb4:	90 81       	ld	r25, Z
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	89 27       	eor	r24, r25
     bba:	80 83       	st	Z, r24
     bbc:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <movingxfront>
     bc0:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <movingxback>
     bc4:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <movingyfront>
     bc8:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <movingyback>
     bcc:	08 95       	ret

00000bce <_Z15sendDataToSlavev>:
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	8f e7       	ldi	r24, 0x7F	; 127
     bd4:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <_Z10uart2_putch>
     bd8:	c3 ee       	ldi	r28, 0xE3	; 227
     bda:	d3 e0       	ldi	r29, 0x03	; 3
     bdc:	88 81       	ld	r24, Y
     bde:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <_Z10uart2_putch>
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <_Z10uart2_putch>
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <_Z10uart2_putch>
     bee:	8b 81       	ldd	r24, Y+3	; 0x03
     bf0:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <_Z10uart2_putch>
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	08 95       	ret

00000bfa <_Z21Goto_Fence_And_Detectv>:
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <movingyfront>
     c02:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     c06:	83 ff       	sbrs	r24, 3
     c08:	57 c0       	rjmp	.+174    	; 0xcb8 <_Z21Goto_Fence_And_Detectv+0xbe>
     c0a:	63 9b       	sbis	0x0c, 3	; 12
     c0c:	58 c0       	rjmp	.+176    	; 0xcbe <_Z21Goto_Fence_And_Detectv+0xc4>
     c0e:	54 c0       	rjmp	.+168    	; 0xcb8 <_Z21Goto_Fence_And_Detectv+0xbe>
     c10:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     c14:	83 ff       	sbrs	r24, 3
     c16:	6f c0       	rjmp	.+222    	; 0xcf6 <_Z21Goto_Fence_And_Detectv+0xfc>
     c18:	8a c0       	rjmp	.+276    	; 0xd2e <_Z21Goto_Fence_And_Detectv+0x134>
     c1a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     c1e:	83 fd       	sbrc	r24, 3
     c20:	89 c0       	rjmp	.+274    	; 0xd34 <_Z21Goto_Fence_And_Detectv+0x13a>
     c22:	63 99       	sbic	0x0c, 3	; 12
     c24:	47 c0       	rjmp	.+142    	; 0xcb4 <_Z21Goto_Fence_And_Detectv+0xba>
     c26:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     c2a:	83 ff       	sbrs	r24, 3
     c2c:	9b c0       	rjmp	.+310    	; 0xd64 <_Z21Goto_Fence_And_Detectv+0x16a>
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	a0 c0       	rjmp	.+320    	; 0xd72 <_Z21Goto_Fence_And_Detectv+0x178>
     c32:	eb ed       	ldi	r30, 0xDB	; 219
     c34:	f3 e0       	ldi	r31, 0x03	; 3
     c36:	11 82       	std	Z+1, r1	; 0x01
     c38:	10 82       	st	Z, r1
     c3a:	13 82       	std	Z+3, r1	; 0x03
     c3c:	12 82       	std	Z+2, r1	; 0x02
     c3e:	15 82       	std	Z+5, r1	; 0x05
     c40:	14 82       	std	Z+4, r1	; 0x04
     c42:	17 82       	std	Z+7, r1	; 0x07
     c44:	16 82       	std	Z+6, r1	; 0x06
     c46:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <first_data_time_of_limit_switches_pressed>
     c4a:	88 23       	and	r24, r24
     c4c:	59 f0       	breq	.+22     	; 0xc64 <_Z21Goto_Fence_And_Detectv+0x6a>
     c4e:	9e db       	rcall	.-2244   	; 0x38c <_Z6millisv>
     c50:	60 93 e7 03 	sts	0x03E7, r22	; 0x8003e7 <time_of_limit_switches_pressed>
     c54:	70 93 e8 03 	sts	0x03E8, r23	; 0x8003e8 <time_of_limit_switches_pressed+0x1>
     c58:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <time_of_limit_switches_pressed+0x2>
     c5c:	90 93 ea 03 	sts	0x03EA, r25	; 0x8003ea <time_of_limit_switches_pressed+0x3>
     c60:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <first_data_time_of_limit_switches_pressed>
     c64:	93 db       	rcall	.-2266   	; 0x38c <_Z6millisv>
     c66:	00 91 e7 03 	lds	r16, 0x03E7	; 0x8003e7 <time_of_limit_switches_pressed>
     c6a:	10 91 e8 03 	lds	r17, 0x03E8	; 0x8003e8 <time_of_limit_switches_pressed+0x1>
     c6e:	20 91 e9 03 	lds	r18, 0x03E9	; 0x8003e9 <time_of_limit_switches_pressed+0x2>
     c72:	30 91 ea 03 	lds	r19, 0x03EA	; 0x8003ea <time_of_limit_switches_pressed+0x3>
     c76:	ab 01       	movw	r20, r22
     c78:	bc 01       	movw	r22, r24
     c7a:	40 1b       	sub	r20, r16
     c7c:	51 0b       	sbc	r21, r17
     c7e:	62 0b       	sbc	r22, r18
     c80:	73 0b       	sbc	r23, r19
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	42 30       	cpi	r20, 0x02	; 2
     c86:	51 05       	cpc	r21, r1
     c88:	61 05       	cpc	r22, r1
     c8a:	71 05       	cpc	r23, r1
     c8c:	08 f0       	brcs	.+2      	; 0xc90 <_Z21Goto_Fence_And_Detectv+0x96>
     c8e:	71 c0       	rjmp	.+226    	; 0xd72 <_Z21Goto_Fence_And_Detectv+0x178>
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	6f c0       	rjmp	.+222    	; 0xd72 <_Z21Goto_Fence_And_Detectv+0x178>
     c94:	eb ed       	ldi	r30, 0xDB	; 219
     c96:	f3 e0       	ldi	r31, 0x03	; 3
     c98:	8f e0       	ldi	r24, 0x0F	; 15
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	91 83       	std	Z+1, r25	; 0x01
     c9e:	80 83       	st	Z, r24
     ca0:	13 82       	std	Z+3, r1	; 0x03
     ca2:	12 82       	std	Z+2, r1	; 0x02
     ca4:	15 82       	std	Z+5, r1	; 0x05
     ca6:	14 82       	std	Z+4, r1	; 0x04
     ca8:	81 ef       	ldi	r24, 0xF1	; 241
     caa:	9f ef       	ldi	r25, 0xFF	; 255
     cac:	97 83       	std	Z+7, r25	; 0x07
     cae:	86 83       	std	Z+6, r24	; 0x06
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	5f c0       	rjmp	.+190    	; 0xd72 <_Z21Goto_Fence_And_Detectv+0x178>
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	5d c0       	rjmp	.+186    	; 0xd72 <_Z21Goto_Fence_And_Detectv+0x178>
     cb8:	63 99       	sbic	0x0c, 3	; 12
     cba:	aa cf       	rjmp	.-172    	; 0xc10 <_Z21Goto_Fence_And_Detectv+0x16>
     cbc:	38 c0       	rjmp	.+112    	; 0xd2e <_Z21Goto_Fence_And_Detectv+0x134>
     cbe:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <inverseKinematicsTrue>
     cc2:	eb ed       	ldi	r30, 0xDB	; 219
     cc4:	f3 e0       	ldi	r31, 0x03	; 3
     cc6:	8e e1       	ldi	r24, 0x1E	; 30
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	91 83       	std	Z+1, r25	; 0x01
     ccc:	80 83       	st	Z, r24
     cce:	13 82       	std	Z+3, r1	; 0x03
     cd0:	12 82       	std	Z+2, r1	; 0x02
     cd2:	15 82       	std	Z+5, r1	; 0x05
     cd4:	14 82       	std	Z+4, r1	; 0x04
     cd6:	8c ee       	ldi	r24, 0xEC	; 236
     cd8:	9f ef       	ldi	r25, 0xFF	; 255
     cda:	97 83       	std	Z+7, r25	; 0x07
     cdc:	86 83       	std	Z+6, r24	; 0x06
     cde:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <time_of_limit_switches_pressed>
     ce2:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <time_of_limit_switches_pressed+0x1>
     ce6:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <time_of_limit_switches_pressed+0x2>
     cea:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <time_of_limit_switches_pressed+0x3>
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <first_data_time_of_limit_switches_pressed>
     cf4:	96 cf       	rjmp	.-212    	; 0xc22 <_Z21Goto_Fence_And_Detectv+0x28>
     cf6:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <inverseKinematicsTrue>
     cfa:	eb ed       	ldi	r30, 0xDB	; 219
     cfc:	f3 e0       	ldi	r31, 0x03	; 3
     cfe:	84 e1       	ldi	r24, 0x14	; 20
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	91 83       	std	Z+1, r25	; 0x01
     d04:	80 83       	st	Z, r24
     d06:	13 82       	std	Z+3, r1	; 0x03
     d08:	12 82       	std	Z+2, r1	; 0x02
     d0a:	15 82       	std	Z+5, r1	; 0x05
     d0c:	14 82       	std	Z+4, r1	; 0x04
     d0e:	82 ee       	ldi	r24, 0xE2	; 226
     d10:	9f ef       	ldi	r25, 0xFF	; 255
     d12:	97 83       	std	Z+7, r25	; 0x07
     d14:	86 83       	std	Z+6, r24	; 0x06
     d16:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <time_of_limit_switches_pressed>
     d1a:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <time_of_limit_switches_pressed+0x1>
     d1e:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <time_of_limit_switches_pressed+0x2>
     d22:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <time_of_limit_switches_pressed+0x3>
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <first_data_time_of_limit_switches_pressed>
     d2c:	7a cf       	rjmp	.-268    	; 0xc22 <_Z21Goto_Fence_And_Detectv+0x28>
     d2e:	63 99       	sbic	0x0c, 3	; 12
     d30:	74 cf       	rjmp	.-280    	; 0xc1a <_Z21Goto_Fence_And_Detectv+0x20>
     d32:	77 cf       	rjmp	.-274    	; 0xc22 <_Z21Goto_Fence_And_Detectv+0x28>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <inverseKinematicsTrue>
     d3a:	e5 ed       	ldi	r30, 0xD5	; 213
     d3c:	f3 e0       	ldi	r31, 0x03	; 3
     d3e:	28 ed       	ldi	r18, 0xD8	; 216
     d40:	3f ef       	ldi	r19, 0xFF	; 255
     d42:	31 83       	std	Z+1, r19	; 0x01
     d44:	20 83       	st	Z, r18
     d46:	13 82       	std	Z+3, r1	; 0x03
     d48:	12 82       	std	Z+2, r1	; 0x02
     d4a:	15 82       	std	Z+5, r1	; 0x05
     d4c:	14 82       	std	Z+4, r1	; 0x04
     d4e:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <time_of_limit_switches_pressed>
     d52:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <time_of_limit_switches_pressed+0x1>
     d56:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <time_of_limit_switches_pressed+0x2>
     d5a:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <time_of_limit_switches_pressed+0x3>
     d5e:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <first_data_time_of_limit_switches_pressed>
     d62:	5f cf       	rjmp	.-322    	; 0xc22 <_Z21Goto_Fence_And_Detectv+0x28>
     d64:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <inverseKinematicsTrue>
     d68:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <pressRobot>
     d6c:	81 11       	cpse	r24, r1
     d6e:	92 cf       	rjmp	.-220    	; 0xc94 <_Z21Goto_Fence_And_Detectv+0x9a>
     d70:	60 cf       	rjmp	.-320    	; 0xc32 <_Z21Goto_Fence_And_Detectv+0x38>
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	08 95       	ret

00000d78 <_Z19calculateCompassPIDv>:
     d78:	2f 92       	push	r2
     d7a:	3f 92       	push	r3
     d7c:	4f 92       	push	r4
     d7e:	5f 92       	push	r5
     d80:	6f 92       	push	r6
     d82:	7f 92       	push	r7
     d84:	8f 92       	push	r8
     d86:	9f 92       	push	r9
     d88:	af 92       	push	r10
     d8a:	bf 92       	push	r11
     d8c:	cf 92       	push	r12
     d8e:	df 92       	push	r13
     d90:	ef 92       	push	r14
     d92:	ff 92       	push	r15
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <_Z19calculateCompassPIDv+0x26>
     d9e:	1f 92       	push	r1
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <PidUpdateFlagCompass>
     da8:	88 23       	and	r24, r24
     daa:	09 f4       	brne	.+2      	; 0xdae <_Z19calculateCompassPIDv+0x36>
     dac:	19 c1       	rjmp	.+562    	; 0xfe0 <_Z19calculateCompassPIDv+0x268>
     dae:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <compassPID>
     db2:	88 23       	and	r24, r24
     db4:	09 f4       	brne	.+2      	; 0xdb8 <_Z19calculateCompassPIDv+0x40>
     db6:	18 c1       	rjmp	.+560    	; 0xfe8 <_Z19calculateCompassPIDv+0x270>
     db8:	e0 dc       	rcall	.-1600   	; 0x77a <_Z10getYawGY88v>
     dba:	8c 01       	movw	r16, r24
     dbc:	ed e4       	ldi	r30, 0x4D	; 77
     dbe:	f3 e0       	ldi	r31, 0x03	; 3
     dc0:	91 83       	std	Z+1, r25	; 0x01
     dc2:	80 83       	st	Z, r24
     dc4:	86 85       	ldd	r24, Z+14	; 0x0e
     dc6:	97 85       	ldd	r25, Z+15	; 0x0f
     dc8:	80 1b       	sub	r24, r16
     dca:	91 0b       	sbc	r25, r17
     dcc:	85 3b       	cpi	r24, 0xB5	; 181
     dce:	91 05       	cpc	r25, r1
     dd0:	3c f0       	brlt	.+14     	; 0xde0 <_Z19calculateCompassPIDv+0x68>
     dd2:	88 56       	subi	r24, 0x68	; 104
     dd4:	91 40       	sbci	r25, 0x01	; 1
     dd6:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <compass+0x3>
     dda:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <compass+0x2>
     dde:	0f c0       	rjmp	.+30     	; 0xdfe <_Z19calculateCompassPIDv+0x86>
     de0:	8c 34       	cpi	r24, 0x4C	; 76
     de2:	2f ef       	ldi	r18, 0xFF	; 255
     de4:	92 07       	cpc	r25, r18
     de6:	2c f0       	brlt	.+10     	; 0xdf2 <_Z19calculateCompassPIDv+0x7a>
     de8:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <compass+0x3>
     dec:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <compass+0x2>
     df0:	06 c0       	rjmp	.+12     	; 0xdfe <_Z19calculateCompassPIDv+0x86>
     df2:	88 59       	subi	r24, 0x98	; 152
     df4:	9e 4f       	sbci	r25, 0xFE	; 254
     df6:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <compass+0x3>
     dfa:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <compass+0x2>
     dfe:	20 90 4f 03 	lds	r2, 0x034F	; 0x80034f <compass+0x2>
     e02:	30 90 50 03 	lds	r3, 0x0350	; 0x800350 <compass+0x3>
     e06:	b1 01       	movw	r22, r2
     e08:	03 2c       	mov	r0, r3
     e0a:	00 0c       	add	r0, r0
     e0c:	88 0b       	sbc	r24, r24
     e0e:	99 0b       	sbc	r25, r25
     e10:	0e 94 4f 20 	call	0x409e	; 0x409e <__floatsisf>
     e14:	4b 01       	movw	r8, r22
     e16:	5c 01       	movw	r10, r24
     e18:	20 91 66 03 	lds	r18, 0x0366	; 0x800366 <compass+0x19>
     e1c:	30 91 67 03 	lds	r19, 0x0367	; 0x800367 <compass+0x1a>
     e20:	40 91 68 03 	lds	r20, 0x0368	; 0x800368 <compass+0x1b>
     e24:	50 91 69 03 	lds	r21, 0x0369	; 0x800369 <compass+0x1c>
     e28:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     e2c:	20 91 57 03 	lds	r18, 0x0357	; 0x800357 <compass+0xa>
     e30:	30 91 58 03 	lds	r19, 0x0358	; 0x800358 <compass+0xb>
     e34:	40 91 59 03 	lds	r20, 0x0359	; 0x800359 <compass+0xc>
     e38:	50 91 5a 03 	lds	r21, 0x035A	; 0x80035a <compass+0xd>
     e3c:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
     e40:	6b 01       	movw	r12, r22
     e42:	7c 01       	movw	r14, r24
     e44:	60 93 57 03 	sts	0x0357, r22	; 0x800357 <compass+0xa>
     e48:	70 93 58 03 	sts	0x0358, r23	; 0x800358 <compass+0xb>
     e4c:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <compass+0xc>
     e50:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <compass+0xd>
     e54:	60 91 5e 03 	lds	r22, 0x035E	; 0x80035e <compass+0x11>
     e58:	70 91 5f 03 	lds	r23, 0x035F	; 0x80035f <compass+0x12>
     e5c:	07 2e       	mov	r0, r23
     e5e:	00 0c       	add	r0, r0
     e60:	88 0b       	sbc	r24, r24
     e62:	99 0b       	sbc	r25, r25
     e64:	0e 94 4f 20 	call	0x409e	; 0x409e <__floatsisf>
     e68:	69 83       	std	Y+1, r22	; 0x01
     e6a:	7a 83       	std	Y+2, r23	; 0x02
     e6c:	8b 83       	std	Y+3, r24	; 0x03
     e6e:	9c 83       	std	Y+4, r25	; 0x04
     e70:	2d ec       	ldi	r18, 0xCD	; 205
     e72:	3c ec       	ldi	r19, 0xCC	; 204
     e74:	4c ec       	ldi	r20, 0xCC	; 204
     e76:	5d e3       	ldi	r21, 0x3D	; 61
     e78:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     e7c:	2b 01       	movw	r4, r22
     e7e:	3c 01       	movw	r6, r24
     e80:	c7 01       	movw	r24, r14
     e82:	b6 01       	movw	r22, r12
     e84:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
     e88:	9b 01       	movw	r18, r22
     e8a:	77 23       	and	r23, r23
     e8c:	24 f4       	brge	.+8      	; 0xe96 <_Z19calculateCompassPIDv+0x11e>
     e8e:	22 27       	eor	r18, r18
     e90:	33 27       	eor	r19, r19
     e92:	26 1b       	sub	r18, r22
     e94:	37 0b       	sbc	r19, r23
     e96:	b9 01       	movw	r22, r18
     e98:	33 0f       	add	r19, r19
     e9a:	88 0b       	sbc	r24, r24
     e9c:	99 0b       	sbc	r25, r25
     e9e:	0e 94 4f 20 	call	0x409e	; 0x409e <__floatsisf>
     ea2:	a3 01       	movw	r20, r6
     ea4:	92 01       	movw	r18, r4
     ea6:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__gesf2>
     eaa:	18 16       	cp	r1, r24
     eac:	24 f5       	brge	.+72     	; 0xef6 <_Z19calculateCompassPIDv+0x17e>
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	a9 01       	movw	r20, r18
     eb4:	c7 01       	movw	r24, r14
     eb6:	b6 01       	movw	r22, r12
     eb8:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__gesf2>
     ebc:	18 16       	cp	r1, r24
     ebe:	4c f4       	brge	.+18     	; 0xed2 <_Z19calculateCompassPIDv+0x15a>
     ec0:	40 92 57 03 	sts	0x0357, r4	; 0x800357 <compass+0xa>
     ec4:	50 92 58 03 	sts	0x0358, r5	; 0x800358 <compass+0xb>
     ec8:	60 92 59 03 	sts	0x0359, r6	; 0x800359 <compass+0xc>
     ecc:	70 92 5a 03 	sts	0x035A, r7	; 0x80035a <compass+0xd>
     ed0:	12 c0       	rjmp	.+36     	; 0xef6 <_Z19calculateCompassPIDv+0x17e>
     ed2:	2d ec       	ldi	r18, 0xCD	; 205
     ed4:	3c ec       	ldi	r19, 0xCC	; 204
     ed6:	4c ec       	ldi	r20, 0xCC	; 204
     ed8:	5d eb       	ldi	r21, 0xBD	; 189
     eda:	69 81       	ldd	r22, Y+1	; 0x01
     edc:	7a 81       	ldd	r23, Y+2	; 0x02
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	9c 81       	ldd	r25, Y+4	; 0x04
     ee2:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     ee6:	60 93 57 03 	sts	0x0357, r22	; 0x800357 <compass+0xa>
     eea:	70 93 58 03 	sts	0x0358, r23	; 0x800358 <compass+0xb>
     eee:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <compass+0xc>
     ef2:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <compass+0xd>
     ef6:	c1 01       	movw	r24, r2
     ef8:	99 23       	and	r25, r25
     efa:	24 f4       	brge	.+8      	; 0xf04 <_Z19calculateCompassPIDv+0x18c>
     efc:	88 27       	eor	r24, r24
     efe:	99 27       	eor	r25, r25
     f00:	82 19       	sub	r24, r2
     f02:	93 09       	sbc	r25, r3
     f04:	02 97       	sbiw	r24, 0x02	; 2
     f06:	e4 f1       	brlt	.+120    	; 0xf80 <_Z19calculateCompassPIDv+0x208>
     f08:	20 91 62 03 	lds	r18, 0x0362	; 0x800362 <compass+0x15>
     f0c:	30 91 63 03 	lds	r19, 0x0363	; 0x800363 <compass+0x16>
     f10:	40 91 64 03 	lds	r20, 0x0364	; 0x800364 <compass+0x17>
     f14:	50 91 65 03 	lds	r21, 0x0365	; 0x800365 <compass+0x18>
     f18:	c5 01       	movw	r24, r10
     f1a:	b4 01       	movw	r22, r8
     f1c:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     f20:	6b 01       	movw	r12, r22
     f22:	7c 01       	movw	r14, r24
     f24:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <compass+0x4>
     f28:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <compass+0x5>
     f2c:	b8 01       	movw	r22, r16
     f2e:	68 1b       	sub	r22, r24
     f30:	79 0b       	sbc	r23, r25
     f32:	07 2e       	mov	r0, r23
     f34:	00 0c       	add	r0, r0
     f36:	88 0b       	sbc	r24, r24
     f38:	99 0b       	sbc	r25, r25
     f3a:	0e 94 4f 20 	call	0x409e	; 0x409e <__floatsisf>
     f3e:	20 91 6a 03 	lds	r18, 0x036A	; 0x80036a <compass+0x1d>
     f42:	30 91 6b 03 	lds	r19, 0x036B	; 0x80036b <compass+0x1e>
     f46:	40 91 6c 03 	lds	r20, 0x036C	; 0x80036c <compass+0x1f>
     f4a:	50 91 6d 03 	lds	r21, 0x036D	; 0x80036d <compass+0x20>
     f4e:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
     f52:	9b 01       	movw	r18, r22
     f54:	ac 01       	movw	r20, r24
     f56:	c7 01       	movw	r24, r14
     f58:	b6 01       	movw	r22, r12
     f5a:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <__subsf3>
     f5e:	20 91 57 03 	lds	r18, 0x0357	; 0x800357 <compass+0xa>
     f62:	30 91 58 03 	lds	r19, 0x0358	; 0x800358 <compass+0xb>
     f66:	40 91 59 03 	lds	r20, 0x0359	; 0x800359 <compass+0xc>
     f6a:	50 91 5a 03 	lds	r21, 0x035A	; 0x80035a <compass+0xd>
     f6e:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
     f72:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
     f76:	70 93 54 03 	sts	0x0354, r23	; 0x800354 <compass+0x7>
     f7a:	60 93 53 03 	sts	0x0353, r22	; 0x800353 <compass+0x6>
     f7e:	08 c0       	rjmp	.+16     	; 0xf90 <_Z19calculateCompassPIDv+0x218>
     f80:	ed e4       	ldi	r30, 0x4D	; 77
     f82:	f3 e0       	ldi	r31, 0x03	; 3
     f84:	12 86       	std	Z+10, r1	; 0x0a
     f86:	13 86       	std	Z+11, r1	; 0x0b
     f88:	14 86       	std	Z+12, r1	; 0x0c
     f8a:	15 86       	std	Z+13, r1	; 0x0d
     f8c:	17 82       	std	Z+7, r1	; 0x07
     f8e:	16 82       	std	Z+6, r1	; 0x06
     f90:	ed e4       	ldi	r30, 0x4D	; 77
     f92:	f3 e0       	ldi	r31, 0x03	; 3
     f94:	80 81       	ld	r24, Z
     f96:	91 81       	ldd	r25, Z+1	; 0x01
     f98:	95 83       	std	Z+5, r25	; 0x05
     f9a:	84 83       	std	Z+4, r24	; 0x04
     f9c:	86 81       	ldd	r24, Z+6	; 0x06
     f9e:	97 81       	ldd	r25, Z+7	; 0x07
     fa0:	21 89       	ldd	r18, Z+17	; 0x11
     fa2:	32 89       	ldd	r19, Z+18	; 0x12
     fa4:	ac 01       	movw	r20, r24
     fa6:	99 23       	and	r25, r25
     fa8:	24 f4       	brge	.+8      	; 0xfb2 <_Z19calculateCompassPIDv+0x23a>
     faa:	44 27       	eor	r20, r20
     fac:	55 27       	eor	r21, r21
     fae:	48 1b       	sub	r20, r24
     fb0:	59 0b       	sbc	r21, r25
     fb2:	24 17       	cp	r18, r20
     fb4:	35 07       	cpc	r19, r21
     fb6:	54 f4       	brge	.+20     	; 0xfcc <_Z19calculateCompassPIDv+0x254>
     fb8:	28 17       	cp	r18, r24
     fba:	39 07       	cpc	r19, r25
     fbc:	1c f0       	brlt	.+6      	; 0xfc4 <_Z19calculateCompassPIDv+0x24c>
     fbe:	31 95       	neg	r19
     fc0:	21 95       	neg	r18
     fc2:	31 09       	sbc	r19, r1
     fc4:	30 93 54 03 	sts	0x0354, r19	; 0x800354 <compass+0x7>
     fc8:	20 93 53 03 	sts	0x0353, r18	; 0x800353 <compass+0x6>
     fcc:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <compass+0x6>
     fd0:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <compass+0x7>
     fd4:	90 93 da 03 	sts	0x03DA, r25	; 0x8003da <velocity_robot+0x5>
     fd8:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <velocity_robot+0x4>
     fdc:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <PidUpdateFlagCompass>
     fe0:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <compassPID>
     fe4:	81 11       	cpse	r24, r1
     fe6:	04 c0       	rjmp	.+8      	; 0xff0 <_Z19calculateCompassPIDv+0x278>
     fe8:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <velocity_robot+0x5>
     fec:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <velocity_robot+0x4>
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	1f 91       	pop	r17
     ffe:	0f 91       	pop	r16
    1000:	ff 90       	pop	r15
    1002:	ef 90       	pop	r14
    1004:	df 90       	pop	r13
    1006:	cf 90       	pop	r12
    1008:	bf 90       	pop	r11
    100a:	af 90       	pop	r10
    100c:	9f 90       	pop	r9
    100e:	8f 90       	pop	r8
    1010:	7f 90       	pop	r7
    1012:	6f 90       	pop	r6
    1014:	5f 90       	pop	r5
    1016:	4f 90       	pop	r4
    1018:	3f 90       	pop	r3
    101a:	2f 90       	pop	r2
    101c:	08 95       	ret

0000101e <_Z12calculatevelv>:
    101e:	2f 92       	push	r2
    1020:	3f 92       	push	r3
    1022:	4f 92       	push	r4
    1024:	5f 92       	push	r5
    1026:	6f 92       	push	r6
    1028:	7f 92       	push	r7
    102a:	8f 92       	push	r8
    102c:	9f 92       	push	r9
    102e:	af 92       	push	r10
    1030:	bf 92       	push	r11
    1032:	cf 92       	push	r12
    1034:	df 92       	push	r13
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	00 d0       	rcall	.+0      	; 0x1044 <_Z12calculatevelv+0x26>
    1044:	1f 92       	push	r1
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <inverseKinematicsTrue>
    104e:	88 23       	and	r24, r24
    1050:	09 f4       	brne	.+2      	; 0x1054 <_Z12calculatevelv+0x36>
    1052:	57 c0       	rjmp	.+174    	; 0x1102 <_Z12calculatevelv+0xe4>
    1054:	0f 2e       	mov	r0, r31
    1056:	fb ed       	ldi	r31, 0xDB	; 219
    1058:	cf 2e       	mov	r12, r31
    105a:	f3 e0       	ldi	r31, 0x03	; 3
    105c:	df 2e       	mov	r13, r31
    105e:	f0 2d       	mov	r31, r0
    1060:	0f 2e       	mov	r0, r31
    1062:	f3 e2       	ldi	r31, 0x23	; 35
    1064:	4f 2e       	mov	r4, r31
    1066:	f2 e0       	ldi	r31, 0x02	; 2
    1068:	5f 2e       	mov	r5, r31
    106a:	f0 2d       	mov	r31, r0
    106c:	0f 2e       	mov	r0, r31
    106e:	f3 ee       	ldi	r31, 0xE3	; 227
    1070:	2f 2e       	mov	r2, r31
    1072:	f3 e0       	ldi	r31, 0x03	; 3
    1074:	3f 2e       	mov	r3, r31
    1076:	f0 2d       	mov	r31, r0
    1078:	0f 2e       	mov	r0, r31
    107a:	fb ed       	ldi	r31, 0xDB	; 219
    107c:	6f 2e       	mov	r6, r31
    107e:	f3 e0       	ldi	r31, 0x03	; 3
    1080:	7f 2e       	mov	r7, r31
    1082:	f0 2d       	mov	r31, r0
    1084:	da 82       	std	Y+2, r13	; 0x02
    1086:	c9 82       	std	Y+1, r12	; 0x01
    1088:	05 ed       	ldi	r16, 0xD5	; 213
    108a:	13 e0       	ldi	r17, 0x03	; 3
    108c:	72 01       	movw	r14, r4
    108e:	1b 82       	std	Y+3, r1	; 0x03
    1090:	1c 82       	std	Y+4, r1	; 0x04
    1092:	d8 01       	movw	r26, r16
    1094:	6d 91       	ld	r22, X+
    1096:	7d 91       	ld	r23, X+
    1098:	8d 01       	movw	r16, r26
    109a:	f7 01       	movw	r30, r14
    109c:	81 90       	ld	r8, Z+
    109e:	91 90       	ld	r9, Z+
    10a0:	a1 90       	ld	r10, Z+
    10a2:	b1 90       	ld	r11, Z+
    10a4:	7f 01       	movw	r14, r30
    10a6:	07 2e       	mov	r0, r23
    10a8:	00 0c       	add	r0, r0
    10aa:	88 0b       	sbc	r24, r24
    10ac:	99 0b       	sbc	r25, r25
    10ae:	0e 94 4f 20 	call	0x409e	; 0x409e <__floatsisf>
    10b2:	a5 01       	movw	r20, r10
    10b4:	94 01       	movw	r18, r8
    10b6:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
    10ba:	4b 01       	movw	r8, r22
    10bc:	5c 01       	movw	r10, r24
    10be:	2b 81       	ldd	r18, Y+3	; 0x03
    10c0:	3c 81       	ldd	r19, Y+4	; 0x04
    10c2:	b9 01       	movw	r22, r18
    10c4:	33 0f       	add	r19, r19
    10c6:	88 0b       	sbc	r24, r24
    10c8:	99 0b       	sbc	r25, r25
    10ca:	0e 94 4f 20 	call	0x409e	; 0x409e <__floatsisf>
    10ce:	9b 01       	movw	r18, r22
    10d0:	ac 01       	movw	r20, r24
    10d2:	c5 01       	movw	r24, r10
    10d4:	b4 01       	movw	r22, r8
    10d6:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
    10da:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
    10de:	7c 83       	std	Y+4, r23	; 0x04
    10e0:	6b 83       	std	Y+3, r22	; 0x03
    10e2:	06 15       	cp	r16, r6
    10e4:	17 05       	cpc	r17, r7
    10e6:	a9 f6       	brne	.-86     	; 0x1092 <_Z12calculatevelv+0x74>
    10e8:	a9 81       	ldd	r26, Y+1	; 0x01
    10ea:	ba 81       	ldd	r27, Y+2	; 0x02
    10ec:	6d 93       	st	X+, r22
    10ee:	7c 93       	st	X, r23
    10f0:	f2 e0       	ldi	r31, 0x02	; 2
    10f2:	cf 0e       	add	r12, r31
    10f4:	d1 1c       	adc	r13, r1
    10f6:	2c e0       	ldi	r18, 0x0C	; 12
    10f8:	42 0e       	add	r4, r18
    10fa:	51 1c       	adc	r5, r1
    10fc:	c2 14       	cp	r12, r2
    10fe:	d3 04       	cpc	r13, r3
    1100:	09 f6       	brne	.-126    	; 0x1084 <_Z12calculatevelv+0x66>
    1102:	e3 ee       	ldi	r30, 0xE3	; 227
    1104:	f3 e0       	ldi	r31, 0x03	; 3
    1106:	ab ed       	ldi	r26, 0xDB	; 219
    1108:	b3 e0       	ldi	r27, 0x03	; 3
    110a:	2d 91       	ld	r18, X+
    110c:	3c 91       	ld	r19, X
    110e:	47 e1       	ldi	r20, 0x17	; 23
    1110:	42 9f       	mul	r20, r18
    1112:	c0 01       	movw	r24, r0
    1114:	43 9f       	mul	r20, r19
    1116:	90 0d       	add	r25, r0
    1118:	11 24       	eor	r1, r1
    111a:	29 ef       	ldi	r18, 0xF9	; 249
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	b9 01       	movw	r22, r18
    1120:	0e 94 3c 22 	call	0x4478	; 0x4478 <__divmodhi4>
    1124:	60 83       	st	Z, r22
    1126:	60 91 dd 03 	lds	r22, 0x03DD	; 0x8003dd <velocity_motor+0x2>
    112a:	70 91 de 03 	lds	r23, 0x03DE	; 0x8003de <velocity_motor+0x3>
    112e:	46 9f       	mul	r20, r22
    1130:	c0 01       	movw	r24, r0
    1132:	47 9f       	mul	r20, r23
    1134:	90 0d       	add	r25, r0
    1136:	11 24       	eor	r1, r1
    1138:	b9 01       	movw	r22, r18
    113a:	0e 94 3c 22 	call	0x4478	; 0x4478 <__divmodhi4>
    113e:	61 83       	std	Z+1, r22	; 0x01
    1140:	60 91 df 03 	lds	r22, 0x03DF	; 0x8003df <velocity_motor+0x4>
    1144:	70 91 e0 03 	lds	r23, 0x03E0	; 0x8003e0 <velocity_motor+0x5>
    1148:	46 9f       	mul	r20, r22
    114a:	c0 01       	movw	r24, r0
    114c:	47 9f       	mul	r20, r23
    114e:	90 0d       	add	r25, r0
    1150:	11 24       	eor	r1, r1
    1152:	b9 01       	movw	r22, r18
    1154:	0e 94 3c 22 	call	0x4478	; 0x4478 <__divmodhi4>
    1158:	62 83       	std	Z+2, r22	; 0x02
    115a:	60 91 e1 03 	lds	r22, 0x03E1	; 0x8003e1 <velocity_motor+0x6>
    115e:	70 91 e2 03 	lds	r23, 0x03E2	; 0x8003e2 <velocity_motor+0x7>
    1162:	46 9f       	mul	r20, r22
    1164:	c0 01       	movw	r24, r0
    1166:	47 9f       	mul	r20, r23
    1168:	90 0d       	add	r25, r0
    116a:	11 24       	eor	r1, r1
    116c:	b9 01       	movw	r22, r18
    116e:	0e 94 3c 22 	call	0x4478	; 0x4478 <__divmodhi4>
    1172:	63 83       	std	Z+3, r22	; 0x03
    1174:	2c dd       	rcall	.-1448   	; 0xbce <_Z15sendDataToSlavev>
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	1f 91       	pop	r17
    1184:	0f 91       	pop	r16
    1186:	ff 90       	pop	r15
    1188:	ef 90       	pop	r14
    118a:	df 90       	pop	r13
    118c:	cf 90       	pop	r12
    118e:	bf 90       	pop	r11
    1190:	af 90       	pop	r10
    1192:	9f 90       	pop	r9
    1194:	8f 90       	pop	r8
    1196:	7f 90       	pop	r7
    1198:	6f 90       	pop	r6
    119a:	5f 90       	pop	r5
    119c:	4f 90       	pop	r4
    119e:	3f 90       	pop	r3
    11a0:	2f 90       	pop	r2
    11a2:	08 95       	ret

000011a4 <_Z4movxiij>:
    11a4:	2f 92       	push	r2
    11a6:	3f 92       	push	r3
    11a8:	4f 92       	push	r4
    11aa:	5f 92       	push	r5
    11ac:	6f 92       	push	r6
    11ae:	7f 92       	push	r7
    11b0:	8f 92       	push	r8
    11b2:	9f 92       	push	r9
    11b4:	af 92       	push	r10
    11b6:	bf 92       	push	r11
    11b8:	cf 92       	push	r12
    11ba:	df 92       	push	r13
    11bc:	ef 92       	push	r14
    11be:	ff 92       	push	r15
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	1c 01       	movw	r2, r24
    11ca:	8b 01       	movw	r16, r22
    11cc:	7a 01       	movw	r14, r20
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <inverseKinematicsTrue>
    11d4:	86 ea       	ldi	r24, 0xA6	; 166
    11d6:	92 e0       	ldi	r25, 0x02	; 2
    11d8:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    11dc:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
    11e0:	ab 01       	movw	r20, r22
    11e2:	77 23       	and	r23, r23
    11e4:	24 f4       	brge	.+8      	; 0x11ee <_Z4movxiij+0x4a>
    11e6:	44 27       	eor	r20, r20
    11e8:	55 27       	eor	r21, r21
    11ea:	46 1b       	sub	r20, r22
    11ec:	57 0b       	sbc	r21, r23
    11ee:	ea 01       	movw	r28, r20
    11f0:	50 93 d4 03 	sts	0x03D4, r21	; 0x8003d4 <distanceX+0x1>
    11f4:	40 93 d3 03 	sts	0x03D3, r20	; 0x8003d3 <distanceX>
    11f8:	30 92 3b 03 	sts	0x033B, r3	; 0x80033b <driveX+0xf>
    11fc:	20 92 3a 03 	sts	0x033A, r2	; 0x80033a <driveX+0xe>
    1200:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <PidUpdateFlagDriveX>
    1204:	22 23       	and	r18, r18
    1206:	09 f4       	brne	.+2      	; 0x120a <_Z4movxiij+0x66>
    1208:	55 c1       	rjmp	.+682    	; 0x14b4 <_Z4movxiij+0x310>
    120a:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <movingyfront>
    120e:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <movingyback>
    1212:	50 93 2d 03 	sts	0x032D, r21	; 0x80032d <driveX+0x1>
    1216:	40 93 2c 03 	sts	0x032C, r20	; 0x80032c <driveX>
    121a:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <PidUpdateFlagDriveX>
    121e:	48 3e       	cpi	r20, 0xE8	; 232
    1220:	83 e0       	ldi	r24, 0x03	; 3
    1222:	58 07       	cpc	r21, r24
    1224:	0c f4       	brge	.+2      	; 0x1228 <_Z4movxiij+0x84>
    1226:	ea c0       	rjmp	.+468    	; 0x13fc <_Z4movxiij+0x258>
    1228:	24 1a       	sub	r2, r20
    122a:	35 0a       	sbc	r3, r21
    122c:	0f 2e       	mov	r0, r31
    122e:	fc e2       	ldi	r31, 0x2C	; 44
    1230:	cf 2e       	mov	r12, r31
    1232:	f3 e0       	ldi	r31, 0x03	; 3
    1234:	df 2e       	mov	r13, r31
    1236:	f0 2d       	mov	r31, r0
    1238:	f6 01       	movw	r30, r12
    123a:	33 82       	std	Z+3, r3	; 0x03
    123c:	22 82       	std	Z+2, r2	; 0x02
    123e:	b1 01       	movw	r22, r2
    1240:	03 2c       	mov	r0, r3
    1242:	00 0c       	add	r0, r0
    1244:	88 0b       	sbc	r24, r24
    1246:	99 0b       	sbc	r25, r25
    1248:	0e 94 4f 20 	call	0x409e	; 0x409e <__floatsisf>
    124c:	2b 01       	movw	r4, r22
    124e:	3c 01       	movw	r6, r24
    1250:	f6 01       	movw	r30, r12
    1252:	21 8d       	ldd	r18, Z+25	; 0x19
    1254:	32 8d       	ldd	r19, Z+26	; 0x1a
    1256:	43 8d       	ldd	r20, Z+27	; 0x1b
    1258:	54 8d       	ldd	r21, Z+28	; 0x1c
    125a:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
    125e:	f6 01       	movw	r30, r12
    1260:	22 85       	ldd	r18, Z+10	; 0x0a
    1262:	33 85       	ldd	r19, Z+11	; 0x0b
    1264:	44 85       	ldd	r20, Z+12	; 0x0c
    1266:	55 85       	ldd	r21, Z+13	; 0x0d
    1268:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
    126c:	4b 01       	movw	r8, r22
    126e:	5c 01       	movw	r10, r24
    1270:	f6 01       	movw	r30, r12
    1272:	62 87       	std	Z+10, r22	; 0x0a
    1274:	73 87       	std	Z+11, r23	; 0x0b
    1276:	84 87       	std	Z+12, r24	; 0x0c
    1278:	95 87       	std	Z+13, r25	; 0x0d
    127a:	80 89       	ldd	r24, Z+16	; 0x10
    127c:	88 23       	and	r24, r24
    127e:	19 f0       	breq	.+6      	; 0x1286 <_Z4movxiij+0xe2>
    1280:	d5 83       	std	Z+5, r29	; 0x05
    1282:	c4 83       	std	Z+4, r28	; 0x04
    1284:	10 8a       	std	Z+16, r1	; 0x10
    1286:	c5 01       	movw	r24, r10
    1288:	b4 01       	movw	r22, r8
    128a:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
    128e:	9b 01       	movw	r18, r22
    1290:	77 23       	and	r23, r23
    1292:	24 f4       	brge	.+8      	; 0x129c <_Z4movxiij+0xf8>
    1294:	22 27       	eor	r18, r18
    1296:	33 27       	eor	r19, r19
    1298:	26 1b       	sub	r18, r22
    129a:	37 0b       	sbc	r19, r23
    129c:	2b 30       	cpi	r18, 0x0B	; 11
    129e:	31 05       	cpc	r19, r1
    12a0:	5c f1       	brlt	.+86     	; 0x12f8 <_Z4movxiij+0x154>
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	a9 01       	movw	r20, r18
    12a8:	c5 01       	movw	r24, r10
    12aa:	b4 01       	movw	r22, r8
    12ac:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__gesf2>
    12b0:	18 16       	cp	r1, r24
    12b2:	6c f4       	brge	.+26     	; 0x12ce <_Z4movxiij+0x12a>
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	a0 e2       	ldi	r26, 0x20	; 32
    12ba:	b1 e4       	ldi	r27, 0x41	; 65
    12bc:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <driveX+0xa>
    12c0:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <driveX+0xb>
    12c4:	a0 93 38 03 	sts	0x0338, r26	; 0x800338 <driveX+0xc>
    12c8:	b0 93 39 03 	sts	0x0339, r27	; 0x800339 <driveX+0xd>
    12cc:	15 c0       	rjmp	.+42     	; 0x12f8 <_Z4movxiij+0x154>
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	a9 01       	movw	r20, r18
    12d4:	c5 01       	movw	r24, r10
    12d6:	b4 01       	movw	r22, r8
    12d8:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__cmpsf2>
    12dc:	88 23       	and	r24, r24
    12de:	64 f4       	brge	.+24     	; 0x12f8 <_Z4movxiij+0x154>
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	a0 e2       	ldi	r26, 0x20	; 32
    12e6:	b1 ec       	ldi	r27, 0xC1	; 193
    12e8:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <driveX+0xa>
    12ec:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <driveX+0xb>
    12f0:	a0 93 38 03 	sts	0x0338, r26	; 0x800338 <driveX+0xc>
    12f4:	b0 93 39 03 	sts	0x0339, r27	; 0x800339 <driveX+0xd>
    12f8:	12 14       	cp	r1, r2
    12fa:	13 04       	cpc	r1, r3
    12fc:	bc f5       	brge	.+110    	; 0x136c <_Z4movxiij+0x1c8>
    12fe:	0f 2e       	mov	r0, r31
    1300:	fc e2       	ldi	r31, 0x2C	; 44
    1302:	cf 2e       	mov	r12, r31
    1304:	f3 e0       	ldi	r31, 0x03	; 3
    1306:	df 2e       	mov	r13, r31
    1308:	f0 2d       	mov	r31, r0
    130a:	f6 01       	movw	r30, r12
    130c:	25 89       	ldd	r18, Z+21	; 0x15
    130e:	36 89       	ldd	r19, Z+22	; 0x16
    1310:	47 89       	ldd	r20, Z+23	; 0x17
    1312:	50 8d       	ldd	r21, Z+24	; 0x18
    1314:	c3 01       	movw	r24, r6
    1316:	b2 01       	movw	r22, r4
    1318:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
    131c:	f6 01       	movw	r30, r12
    131e:	22 85       	ldd	r18, Z+10	; 0x0a
    1320:	33 85       	ldd	r19, Z+11	; 0x0b
    1322:	44 85       	ldd	r20, Z+12	; 0x0c
    1324:	55 85       	ldd	r21, Z+13	; 0x0d
    1326:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
    132a:	4b 01       	movw	r8, r22
    132c:	5c 01       	movw	r10, r24
    132e:	f6 01       	movw	r30, r12
    1330:	84 81       	ldd	r24, Z+4	; 0x04
    1332:	95 81       	ldd	r25, Z+5	; 0x05
    1334:	be 01       	movw	r22, r28
    1336:	68 1b       	sub	r22, r24
    1338:	79 0b       	sbc	r23, r25
    133a:	07 2e       	mov	r0, r23
    133c:	00 0c       	add	r0, r0
    133e:	88 0b       	sbc	r24, r24
    1340:	99 0b       	sbc	r25, r25
    1342:	0e 94 4f 20 	call	0x409e	; 0x409e <__floatsisf>
    1346:	f6 01       	movw	r30, r12
    1348:	25 8d       	ldd	r18, Z+29	; 0x1d
    134a:	36 8d       	ldd	r19, Z+30	; 0x1e
    134c:	47 8d       	ldd	r20, Z+31	; 0x1f
    134e:	50 a1       	ldd	r21, Z+32	; 0x20
    1350:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
    1354:	9b 01       	movw	r18, r22
    1356:	ac 01       	movw	r20, r24
    1358:	c5 01       	movw	r24, r10
    135a:	b4 01       	movw	r22, r8
    135c:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <__subsf3>
    1360:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
    1364:	f6 01       	movw	r30, r12
    1366:	77 83       	std	Z+7, r23	; 0x07
    1368:	66 83       	std	Z+6, r22	; 0x06
    136a:	04 c0       	rjmp	.+8      	; 0x1374 <_Z4movxiij+0x1d0>
    136c:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <driveX+0x7>
    1370:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <driveX+0x6>
    1374:	ec e2       	ldi	r30, 0x2C	; 44
    1376:	f3 e0       	ldi	r31, 0x03	; 3
    1378:	d5 83       	std	Z+5, r29	; 0x05
    137a:	c4 83       	std	Z+4, r28	; 0x04
    137c:	86 81       	ldd	r24, Z+6	; 0x06
    137e:	97 81       	ldd	r25, Z+7	; 0x07
    1380:	9c 01       	movw	r18, r24
    1382:	99 23       	and	r25, r25
    1384:	24 f4       	brge	.+8      	; 0x138e <_Z4movxiij+0x1ea>
    1386:	22 27       	eor	r18, r18
    1388:	33 27       	eor	r19, r19
    138a:	28 1b       	sub	r18, r24
    138c:	39 0b       	sbc	r19, r25
    138e:	e2 16       	cp	r14, r18
    1390:	f3 06       	cpc	r15, r19
    1392:	78 f4       	brcc	.+30     	; 0x13b2 <_Z4movxiij+0x20e>
    1394:	18 16       	cp	r1, r24
    1396:	19 06       	cpc	r1, r25
    1398:	2c f4       	brge	.+10     	; 0x13a4 <_Z4movxiij+0x200>
    139a:	f0 92 33 03 	sts	0x0333, r15	; 0x800333 <driveX+0x7>
    139e:	e0 92 32 03 	sts	0x0332, r14	; 0x800332 <driveX+0x6>
    13a2:	07 c0       	rjmp	.+14     	; 0x13b2 <_Z4movxiij+0x20e>
    13a4:	f1 94       	neg	r15
    13a6:	e1 94       	neg	r14
    13a8:	f1 08       	sbc	r15, r1
    13aa:	f0 92 33 03 	sts	0x0333, r15	; 0x800333 <driveX+0x7>
    13ae:	e0 92 32 03 	sts	0x0332, r14	; 0x800332 <driveX+0x6>
    13b2:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <driveX+0x6>
    13b6:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <driveX+0x7>
    13ba:	43 96       	adiw	r24, 0x13	; 19
    13bc:	87 97       	sbiw	r24, 0x27	; 39
    13be:	a8 f4       	brcc	.+42     	; 0x13ea <_Z4movxiij+0x246>
    13c0:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <movingxfront>
    13c4:	88 23       	and	r24, r24
    13c6:	39 f0       	breq	.+14     	; 0x13d6 <_Z4movxiij+0x232>
    13c8:	84 e1       	ldi	r24, 0x14	; 20
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <driveX+0x7>
    13d0:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <driveX+0x6>
    13d4:	0a c0       	rjmp	.+20     	; 0x13ea <_Z4movxiij+0x246>
    13d6:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <movingxback>
    13da:	88 23       	and	r24, r24
    13dc:	31 f0       	breq	.+12     	; 0x13ea <_Z4movxiij+0x246>
    13de:	8c ee       	ldi	r24, 0xEC	; 236
    13e0:	9f ef       	ldi	r25, 0xFF	; 255
    13e2:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <driveX+0x7>
    13e6:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <driveX+0x6>
    13ea:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <driveX+0x6>
    13ee:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <driveX+0x7>
    13f2:	90 93 d6 03 	sts	0x03D6, r25	; 0x8003d6 <velocity_robot+0x1>
    13f6:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <velocity_robot>
    13fa:	35 c0       	rjmp	.+106    	; 0x1466 <_Z4movxiij+0x2c2>
    13fc:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <startingAtFront>
    1400:	88 23       	and	r24, r24
    1402:	c9 f0       	breq	.+50     	; 0x1436 <_Z4movxiij+0x292>
    1404:	ba 01       	movw	r22, r20
    1406:	55 0f       	add	r21, r21
    1408:	88 0b       	sbc	r24, r24
    140a:	99 0b       	sbc	r25, r25
    140c:	0e 94 4f 20 	call	0x409e	; 0x409e <__floatsisf>
    1410:	2d ec       	ldi	r18, 0xCD	; 205
    1412:	3c ec       	ldi	r19, 0xCC	; 204
    1414:	4c ec       	ldi	r20, 0xCC	; 204
    1416:	5d e3       	ldi	r21, 0x3D	; 61
    1418:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e7       	ldi	r20, 0x70	; 112
    1422:	52 e4       	ldi	r21, 0x42	; 66
    1424:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
    1428:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
    142c:	70 93 d6 03 	sts	0x03D6, r23	; 0x8003d6 <velocity_robot+0x1>
    1430:	60 93 d5 03 	sts	0x03D5, r22	; 0x8003d5 <velocity_robot>
    1434:	18 c0       	rjmp	.+48     	; 0x1466 <_Z4movxiij+0x2c2>
    1436:	ba 01       	movw	r22, r20
    1438:	55 0f       	add	r21, r21
    143a:	88 0b       	sbc	r24, r24
    143c:	99 0b       	sbc	r25, r25
    143e:	0e 94 4f 20 	call	0x409e	; 0x409e <__floatsisf>
    1442:	2a e0       	ldi	r18, 0x0A	; 10
    1444:	37 ed       	ldi	r19, 0xD7	; 215
    1446:	43 e2       	ldi	r20, 0x23	; 35
    1448:	5d e3       	ldi	r21, 0x3D	; 61
    144a:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e7       	ldi	r20, 0x70	; 112
    1454:	52 e4       	ldi	r21, 0x42	; 66
    1456:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
    145a:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
    145e:	70 93 d6 03 	sts	0x03D6, r23	; 0x8003d6 <velocity_robot+0x1>
    1462:	60 93 d5 03 	sts	0x03D5, r22	; 0x8003d5 <velocity_robot>
    1466:	02 30       	cpi	r16, 0x02	; 2
    1468:	11 05       	cpc	r17, r1
    146a:	51 f4       	brne	.+20     	; 0x1480 <_Z4movxiij+0x2dc>
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <movingxfront>
    1472:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <movingxback>
    1476:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <movingyback>
    147a:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <movingyfront>
    147e:	1a c0       	rjmp	.+52     	; 0x14b4 <_Z4movxiij+0x310>
    1480:	03 30       	cpi	r16, 0x03	; 3
    1482:	11 05       	cpc	r17, r1
    1484:	b9 f4       	brne	.+46     	; 0x14b4 <_Z4movxiij+0x310>
    1486:	e5 ed       	ldi	r30, 0xD5	; 213
    1488:	f3 e0       	ldi	r31, 0x03	; 3
    148a:	80 81       	ld	r24, Z
    148c:	91 81       	ldd	r25, Z+1	; 0x01
    148e:	99 23       	and	r25, r25
    1490:	1c f4       	brge	.+6      	; 0x1498 <_Z4movxiij+0x2f4>
    1492:	91 95       	neg	r25
    1494:	81 95       	neg	r24
    1496:	91 09       	sbc	r25, r1
    1498:	91 95       	neg	r25
    149a:	81 95       	neg	r24
    149c:	91 09       	sbc	r25, r1
    149e:	91 83       	std	Z+1, r25	; 0x01
    14a0:	80 83       	st	Z, r24
    14a2:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <movingxfront>
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <movingxback>
    14ac:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <movingyfront>
    14b0:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <movingyback>
    14b4:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <startingAtFront>
    14b8:	88 23       	and	r24, r24
    14ba:	49 f0       	breq	.+18     	; 0x14ce <_Z4movxiij+0x32a>
    14bc:	e5 ed       	ldi	r30, 0xD5	; 213
    14be:	f3 e0       	ldi	r31, 0x03	; 3
    14c0:	8c ee       	ldi	r24, 0xEC	; 236
    14c2:	9f ef       	ldi	r25, 0xFF	; 255
    14c4:	93 83       	std	Z+3, r25	; 0x03
    14c6:	82 83       	std	Z+2, r24	; 0x02
    14c8:	15 82       	std	Z+5, r1	; 0x05
    14ca:	14 82       	std	Z+4, r1	; 0x04
    14cc:	05 c0       	rjmp	.+10     	; 0x14d8 <_Z4movxiij+0x334>
    14ce:	10 92 d8 03 	sts	0x03D8, r1	; 0x8003d8 <velocity_robot+0x3>
    14d2:	10 92 d7 03 	sts	0x03D7, r1	; 0x8003d7 <velocity_robot+0x2>
    14d6:	50 dc       	rcall	.-1888   	; 0xd78 <_Z19calculateCompassPIDv>
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	1f 91       	pop	r17
    14de:	0f 91       	pop	r16
    14e0:	ff 90       	pop	r15
    14e2:	ef 90       	pop	r14
    14e4:	df 90       	pop	r13
    14e6:	cf 90       	pop	r12
    14e8:	bf 90       	pop	r11
    14ea:	af 90       	pop	r10
    14ec:	9f 90       	pop	r9
    14ee:	8f 90       	pop	r8
    14f0:	7f 90       	pop	r7
    14f2:	6f 90       	pop	r6
    14f4:	5f 90       	pop	r5
    14f6:	4f 90       	pop	r4
    14f8:	3f 90       	pop	r3
    14fa:	2f 90       	pop	r2
    14fc:	08 95       	ret

000014fe <_Z27Get_Front_LinetrackerY_Datav>:
    14fe:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <_Z10uart2_getcv>
    1502:	85 36       	cpi	r24, 0x65	; 101
    1504:	38 f0       	brcs	.+14     	; 0x1514 <_Z27Get_Front_LinetrackerY_Datav+0x16>
    1506:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <_previous_data_of_front_linetracker>
    150a:	90 35       	cpi	r25, 0x50	; 80
    150c:	61 f0       	breq	.+24     	; 0x1526 <_Z27Get_Front_LinetrackerY_Datav+0x28>
    150e:	9a 30       	cpi	r25, 0x0A	; 10
    1510:	d9 f5       	brne	.+118    	; 0x1588 <_Z27Get_Front_LinetrackerY_Datav+0x8a>
    1512:	04 c0       	rjmp	.+8      	; 0x151c <_Z27Get_Front_LinetrackerY_Datav+0x1e>
    1514:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <_previous_data_of_front_linetracker>
    1518:	9a 30       	cpi	r25, 0x0A	; 10
    151a:	81 f5       	brne	.+96     	; 0x157c <_Z27Get_Front_LinetrackerY_Datav+0x7e>
    151c:	81 11       	cpse	r24, r1
    151e:	31 c0       	rjmp	.+98     	; 0x1582 <_Z27Get_Front_LinetrackerY_Datav+0x84>
    1520:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <_front_linetracker_left_edge_left>
    1524:	2e c0       	rjmp	.+92     	; 0x1582 <_Z27Get_Front_LinetrackerY_Datav+0x84>
    1526:	86 34       	cpi	r24, 0x46	; 70
    1528:	79 f4       	brne	.+30     	; 0x1548 <_Z27Get_Front_LinetrackerY_Datav+0x4a>
    152a:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <_front_linetracker_right_edge_left>
    152e:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <_front_linetracker_left_edge_left>
    1532:	91 11       	cpse	r25, r1
    1534:	20 c0       	rjmp	.+64     	; 0x1576 <_Z27Get_Front_LinetrackerY_Datav+0x78>
    1536:	1a c0       	rjmp	.+52     	; 0x156c <_Z27Get_Front_LinetrackerY_Datav+0x6e>
    1538:	8a e0       	ldi	r24, 0x0A	; 10
    153a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_previous_data_of_front_linetracker>
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <_front_linetracker_left_edge_left>
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	20 c0       	rjmp	.+64     	; 0x1588 <_Z27Get_Front_LinetrackerY_Datav+0x8a>
    1548:	85 36       	cpi	r24, 0x65	; 101
    154a:	40 f0       	brcs	.+16     	; 0x155c <_Z27Get_Front_LinetrackerY_Datav+0x5e>
    154c:	80 e5       	ldi	r24, 0x50	; 80
    154e:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_previous_data_of_front_linetracker>
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <_front_linetracker_right_edge_left>
    1558:	9a e5       	ldi	r25, 0x5A	; 90
    155a:	16 c0       	rjmp	.+44     	; 0x1588 <_Z27Get_Front_LinetrackerY_Datav+0x8a>
    155c:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <_front_linetracker_left_edge_left>
    1560:	91 11       	cpse	r25, r1
    1562:	09 c0       	rjmp	.+18     	; 0x1576 <_Z27Get_Front_LinetrackerY_Datav+0x78>
    1564:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <_front_linetracker_right_edge_left>
    1568:	91 11       	cpse	r25, r1
    156a:	05 c0       	rjmp	.+10     	; 0x1576 <_Z27Get_Front_LinetrackerY_Datav+0x78>
    156c:	9a e0       	ldi	r25, 0x0A	; 10
    156e:	98 0f       	add	r25, r24
    1570:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_previous_data_of_front_linetracker>
    1574:	09 c0       	rjmp	.+18     	; 0x1588 <_Z27Get_Front_LinetrackerY_Datav+0x8a>
    1576:	9a e0       	ldi	r25, 0x0A	; 10
    1578:	98 0f       	add	r25, r24
    157a:	06 c0       	rjmp	.+12     	; 0x1588 <_Z27Get_Front_LinetrackerY_Datav+0x8a>
    157c:	90 35       	cpi	r25, 0x50	; 80
    157e:	71 f7       	brne	.-36     	; 0x155c <_Z27Get_Front_LinetrackerY_Datav+0x5e>
    1580:	d2 cf       	rjmp	.-92     	; 0x1526 <_Z27Get_Front_LinetrackerY_Datav+0x28>
    1582:	85 36       	cpi	r24, 0x65	; 101
    1584:	58 f3       	brcs	.-42     	; 0x155c <_Z27Get_Front_LinetrackerY_Datav+0x5e>
    1586:	d8 cf       	rjmp	.-80     	; 0x1538 <_Z27Get_Front_LinetrackerY_Datav+0x3a>
    1588:	89 2f       	mov	r24, r25
    158a:	08 95       	ret

0000158c <_Z26Get_Back_LinetrackerY_Datav>:
    158c:	4f 92       	push	r4
    158e:	5f 92       	push	r5
    1590:	6f 92       	push	r6
    1592:	7f 92       	push	r7
    1594:	af 92       	push	r10
    1596:	bf 92       	push	r11
    1598:	cf 92       	push	r12
    159a:	df 92       	push	r13
    159c:	ef 92       	push	r14
    159e:	ff 92       	push	r15
    15a0:	0f 93       	push	r16
    15a2:	1f 93       	push	r17
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	0f 2e       	mov	r0, r31
    15aa:	fe e8       	ldi	r31, 0x8E	; 142
    15ac:	ef 2e       	mov	r14, r31
    15ae:	f2 e0       	ldi	r31, 0x02	; 2
    15b0:	ff 2e       	mov	r15, r31
    15b2:	f0 2d       	mov	r31, r0
    15b4:	00 eb       	ldi	r16, 0xB0	; 176
    15b6:	13 e0       	ldi	r17, 0x03	; 3
    15b8:	c0 e0       	ldi	r28, 0x00	; 0
    15ba:	d0 e0       	ldi	r29, 0x00	; 0
    15bc:	cc 24       	eor	r12, r12
    15be:	c3 94       	inc	r12
    15c0:	d1 2c       	mov	r13, r1
    15c2:	86 b1       	in	r24, 0x06	; 6
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	0c 2e       	mov	r0, r28
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <_Z26Get_Back_LinetrackerY_Datav+0x42>
    15ca:	95 95       	asr	r25
    15cc:	87 95       	ror	r24
    15ce:	0a 94       	dec	r0
    15d0:	e2 f7       	brpl	.-8      	; 0x15ca <_Z26Get_Back_LinetrackerY_Datav+0x3e>
    15d2:	80 ff       	sbrs	r24, 0
    15d4:	10 c0       	rjmp	.+32     	; 0x15f6 <_Z26Get_Back_LinetrackerY_Datav+0x6a>
    15d6:	f8 01       	movw	r30, r16
    15d8:	d1 82       	std	Z+1, r13	; 0x01
    15da:	c0 82       	st	Z, r12
    15dc:	20 91 c9 03 	lds	r18, 0x03C9	; 0x8003c9 <_ZL9linestate>
    15e0:	c6 01       	movw	r24, r12
    15e2:	0c 2e       	mov	r0, r28
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <_Z26Get_Back_LinetrackerY_Datav+0x5e>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	0a 94       	dec	r0
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <_Z26Get_Back_LinetrackerY_Datav+0x5a>
    15ee:	82 2b       	or	r24, r18
    15f0:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <_ZL9linestate>
    15f4:	03 c0       	rjmp	.+6      	; 0x15fc <_Z26Get_Back_LinetrackerY_Datav+0x70>
    15f6:	f8 01       	movw	r30, r16
    15f8:	11 82       	std	Z+1, r1	; 0x01
    15fa:	10 82       	st	Z, r1
    15fc:	f7 01       	movw	r30, r14
    15fe:	81 91       	ld	r24, Z+
    1600:	91 91       	ld	r25, Z+
    1602:	7f 01       	movw	r14, r30
    1604:	f8 01       	movw	r30, r16
    1606:	a1 90       	ld	r10, Z+
    1608:	b1 90       	ld	r11, Z+
    160a:	8f 01       	movw	r16, r30
    160c:	8a 9d       	mul	r24, r10
    160e:	b0 01       	movw	r22, r0
    1610:	8b 9d       	mul	r24, r11
    1612:	70 0d       	add	r23, r0
    1614:	9a 9d       	mul	r25, r10
    1616:	70 0d       	add	r23, r0
    1618:	11 24       	eor	r1, r1
    161a:	07 2e       	mov	r0, r23
    161c:	00 0c       	add	r0, r0
    161e:	88 0b       	sbc	r24, r24
    1620:	99 0b       	sbc	r25, r25
    1622:	0e 94 4f 20 	call	0x409e	; 0x409e <__floatsisf>
    1626:	20 91 c4 03 	lds	r18, 0x03C4	; 0x8003c4 <_ZL8totalSum>
    162a:	30 91 c5 03 	lds	r19, 0x03C5	; 0x8003c5 <_ZL8totalSum+0x1>
    162e:	40 91 c6 03 	lds	r20, 0x03C6	; 0x8003c6 <_ZL8totalSum+0x2>
    1632:	50 91 c7 03 	lds	r21, 0x03C7	; 0x8003c7 <_ZL8totalSum+0x3>
    1636:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
    163a:	2b 01       	movw	r4, r22
    163c:	3c 01       	movw	r6, r24
    163e:	60 93 c4 03 	sts	0x03C4, r22	; 0x8003c4 <_ZL8totalSum>
    1642:	70 93 c5 03 	sts	0x03C5, r23	; 0x8003c5 <_ZL8totalSum+0x1>
    1646:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <_ZL8totalSum+0x2>
    164a:	90 93 c7 03 	sts	0x03C7, r25	; 0x8003c7 <_ZL8totalSum+0x3>
    164e:	b5 01       	movw	r22, r10
    1650:	bb 0c       	add	r11, r11
    1652:	88 0b       	sbc	r24, r24
    1654:	99 0b       	sbc	r25, r25
    1656:	0e 94 4f 20 	call	0x409e	; 0x409e <__floatsisf>
    165a:	20 91 c0 03 	lds	r18, 0x03C0	; 0x8003c0 <_ZL9totalLine>
    165e:	30 91 c1 03 	lds	r19, 0x03C1	; 0x8003c1 <_ZL9totalLine+0x1>
    1662:	40 91 c2 03 	lds	r20, 0x03C2	; 0x8003c2 <_ZL9totalLine+0x2>
    1666:	50 91 c3 03 	lds	r21, 0x03C3	; 0x8003c3 <_ZL9totalLine+0x3>
    166a:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
    166e:	60 93 c0 03 	sts	0x03C0, r22	; 0x8003c0 <_ZL9totalLine>
    1672:	70 93 c1 03 	sts	0x03C1, r23	; 0x8003c1 <_ZL9totalLine+0x1>
    1676:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <_ZL9totalLine+0x2>
    167a:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <_ZL9totalLine+0x3>
    167e:	21 96       	adiw	r28, 0x01	; 1
    1680:	c8 30       	cpi	r28, 0x08	; 8
    1682:	d1 05       	cpc	r29, r1
    1684:	09 f0       	breq	.+2      	; 0x1688 <_Z26Get_Back_LinetrackerY_Datav+0xfc>
    1686:	9d cf       	rjmp	.-198    	; 0x15c2 <_Z26Get_Back_LinetrackerY_Datav+0x36>
    1688:	9b 01       	movw	r18, r22
    168a:	ac 01       	movw	r20, r24
    168c:	c3 01       	movw	r24, r6
    168e:	b2 01       	movw	r22, r4
    1690:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__divsf3>
    1694:	0e 94 21 20 	call	0x4042	; 0x4042 <__fixunssfsi>
    1698:	60 93 c8 03 	sts	0x03C8, r22	; 0x8003c8 <_ZL16linetracker_data>
    169c:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <_ZL8totalSum>
    16a0:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <_ZL8totalSum+0x1>
    16a4:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <_ZL8totalSum+0x2>
    16a8:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <_ZL8totalSum+0x3>
    16ac:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <_ZL9totalLine>
    16b0:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <_ZL9totalLine+0x1>
    16b4:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <_ZL9totalLine+0x2>
    16b8:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <_ZL9totalLine+0x3>
    16bc:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <_previous_data_of_back_linetracker>
    16c0:	8a 30       	cpi	r24, 0x0A	; 10
    16c2:	29 f4       	brne	.+10     	; 0x16ce <_Z26Get_Back_LinetrackerY_Datav+0x142>
    16c4:	6a 30       	cpi	r22, 0x0A	; 10
    16c6:	81 f5       	brne	.+96     	; 0x1728 <_Z26Get_Back_LinetrackerY_Datav+0x19c>
    16c8:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <_back_linetracker_left_edge_left>
    16cc:	2d c0       	rjmp	.+90     	; 0x1728 <_Z26Get_Back_LinetrackerY_Datav+0x19c>
    16ce:	80 35       	cpi	r24, 0x50	; 80
    16d0:	f1 f4       	brne	.+60     	; 0x170e <_Z26Get_Back_LinetrackerY_Datav+0x182>
    16d2:	60 35       	cpi	r22, 0x50	; 80
    16d4:	81 f4       	brne	.+32     	; 0x16f6 <_Z26Get_Back_LinetrackerY_Datav+0x16a>
    16d6:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <_back_linetracker_right_edge_left>
    16da:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <_back_linetracker_left_edge_left>
    16de:	88 23       	and	r24, r24
    16e0:	f1 f0       	breq	.+60     	; 0x171e <_Z26Get_Back_LinetrackerY_Datav+0x192>
    16e2:	1f c0       	rjmp	.+62     	; 0x1722 <_Z26Get_Back_LinetrackerY_Datav+0x196>
    16e4:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <_ZL16linetracker_data>
    16e8:	8a e0       	ldi	r24, 0x0A	; 10
    16ea:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_previous_data_of_back_linetracker>
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <_back_linetracker_left_edge_left>
    16f4:	16 c0       	rjmp	.+44     	; 0x1722 <_Z26Get_Back_LinetrackerY_Datav+0x196>
    16f6:	61 11       	cpse	r22, r1
    16f8:	0a c0       	rjmp	.+20     	; 0x170e <_Z26Get_Back_LinetrackerY_Datav+0x182>
    16fa:	8a e5       	ldi	r24, 0x5A	; 90
    16fc:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <_ZL16linetracker_data>
    1700:	80 e5       	ldi	r24, 0x50	; 80
    1702:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_previous_data_of_back_linetracker>
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <_back_linetracker_right_edge_left>
    170c:	0a c0       	rjmp	.+20     	; 0x1722 <_Z26Get_Back_LinetrackerY_Datav+0x196>
    170e:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <_back_linetracker_left_edge_left>
    1712:	81 11       	cpse	r24, r1
    1714:	06 c0       	rjmp	.+12     	; 0x1722 <_Z26Get_Back_LinetrackerY_Datav+0x196>
    1716:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <_back_linetracker_right_edge_left>
    171a:	81 11       	cpse	r24, r1
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <_Z26Get_Back_LinetrackerY_Datav+0x196>
    171e:	60 93 09 02 	sts	0x0209, r22	; 0x800209 <_previous_data_of_back_linetracker>
    1722:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <_ZL16linetracker_data>
    1726:	03 c0       	rjmp	.+6      	; 0x172e <_Z26Get_Back_LinetrackerY_Datav+0x1a2>
    1728:	61 11       	cpse	r22, r1
    172a:	f1 cf       	rjmp	.-30     	; 0x170e <_Z26Get_Back_LinetrackerY_Datav+0x182>
    172c:	db cf       	rjmp	.-74     	; 0x16e4 <_Z26Get_Back_LinetrackerY_Datav+0x158>
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	1f 91       	pop	r17
    1734:	0f 91       	pop	r16
    1736:	ff 90       	pop	r15
    1738:	ef 90       	pop	r14
    173a:	df 90       	pop	r13
    173c:	cf 90       	pop	r12
    173e:	bf 90       	pop	r11
    1740:	af 90       	pop	r10
    1742:	7f 90       	pop	r7
    1744:	6f 90       	pop	r6
    1746:	5f 90       	pop	r5
    1748:	4f 90       	pop	r4
    174a:	08 95       	ret

0000174c <_Z32Calculate_Front_LinetrackerY_Pidv>:
    174c:	4f 92       	push	r4
    174e:	5f 92       	push	r5
    1750:	6f 92       	push	r6
    1752:	7f 92       	push	r7
    1754:	8f 92       	push	r8
    1756:	9f 92       	push	r9
    1758:	af 92       	push	r10
    175a:	bf 92       	push	r11
    175c:	ef 92       	push	r14
    175e:	ff 92       	push	r15
    1760:	0f 93       	push	r16
    1762:	1f 93       	push	r17
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <FrontLinetrackerY_+0x10>
    176c:	88 23       	and	r24, r24
    176e:	59 f0       	breq	.+22     	; 0x1786 <_Z32Calculate_Front_LinetrackerY_Pidv+0x3a>
    1770:	c6 de       	rcall	.-628    	; 0x14fe <_Z27Get_Front_LinetrackerY_Datav>
    1772:	88 23       	and	r24, r24
    1774:	41 f0       	breq	.+16     	; 0x1786 <_Z32Calculate_Front_LinetrackerY_Pidv+0x3a>
    1776:	c3 de       	rcall	.-634    	; 0x14fe <_Z27Get_Front_LinetrackerY_Datav>
    1778:	e6 ee       	ldi	r30, 0xE6	; 230
    177a:	f2 e0       	ldi	r31, 0x02	; 2
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	95 83       	std	Z+5, r25	; 0x05
    1780:	84 83       	std	Z+4, r24	; 0x04
    1782:	10 8a       	std	Z+16, r1	; 0x10
    1784:	c5 c0       	rjmp	.+394    	; 0x1910 <_Z32Calculate_Front_LinetrackerY_Pidv+0x1c4>
    1786:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <PidUpdateFlagLinetrackerBack>
    178a:	88 23       	and	r24, r24
    178c:	09 f4       	brne	.+2      	; 0x1790 <_Z32Calculate_Front_LinetrackerY_Pidv+0x44>
    178e:	c0 c0       	rjmp	.+384    	; 0x1910 <_Z32Calculate_Front_LinetrackerY_Pidv+0x1c4>
    1790:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <linetrackerPID>
    1794:	88 23       	and	r24, r24
    1796:	09 f4       	brne	.+2      	; 0x179a <_Z32Calculate_Front_LinetrackerY_Pidv+0x4e>
    1798:	bf c0       	rjmp	.+382    	; 0x1918 <_Z32Calculate_Front_LinetrackerY_Pidv+0x1cc>
    179a:	b1 de       	rcall	.-670    	; 0x14fe <_Z27Get_Front_LinetrackerY_Datav>
    179c:	e8 2e       	mov	r14, r24
    179e:	f1 2c       	mov	r15, r1
    17a0:	c6 ee       	ldi	r28, 0xE6	; 230
    17a2:	d2 e0       	ldi	r29, 0x02	; 2
    17a4:	f9 82       	std	Y+1, r15	; 0x01
    17a6:	e8 82       	st	Y, r14
    17a8:	0e 85       	ldd	r16, Y+14	; 0x0e
    17aa:	1f 85       	ldd	r17, Y+15	; 0x0f
    17ac:	0e 19       	sub	r16, r14
    17ae:	1f 09       	sbc	r17, r15
    17b0:	1b 83       	std	Y+3, r17	; 0x03
    17b2:	0a 83       	std	Y+2, r16	; 0x02
    17b4:	b8 01       	movw	r22, r16
    17b6:	01 2e       	mov	r0, r17
    17b8:	00 0c       	add	r0, r0
    17ba:	88 0b       	sbc	r24, r24
    17bc:	99 0b       	sbc	r25, r25
    17be:	0e 94 4f 20 	call	0x409e	; 0x409e <__floatsisf>
    17c2:	4b 01       	movw	r8, r22
    17c4:	5c 01       	movw	r10, r24
    17c6:	29 8d       	ldd	r18, Y+25	; 0x19
    17c8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    17ca:	4b 8d       	ldd	r20, Y+27	; 0x1b
    17cc:	5c 8d       	ldd	r21, Y+28	; 0x1c
    17ce:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
    17d2:	2a 85       	ldd	r18, Y+10	; 0x0a
    17d4:	3b 85       	ldd	r19, Y+11	; 0x0b
    17d6:	4c 85       	ldd	r20, Y+12	; 0x0c
    17d8:	5d 85       	ldd	r21, Y+13	; 0x0d
    17da:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
    17de:	2b 01       	movw	r4, r22
    17e0:	3c 01       	movw	r6, r24
    17e2:	6a 87       	std	Y+10, r22	; 0x0a
    17e4:	7b 87       	std	Y+11, r23	; 0x0b
    17e6:	8c 87       	std	Y+12, r24	; 0x0c
    17e8:	9d 87       	std	Y+13, r25	; 0x0d
    17ea:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
    17ee:	9b 01       	movw	r18, r22
    17f0:	77 23       	and	r23, r23
    17f2:	24 f4       	brge	.+8      	; 0x17fc <_Z32Calculate_Front_LinetrackerY_Pidv+0xb0>
    17f4:	22 27       	eor	r18, r18
    17f6:	33 27       	eor	r19, r19
    17f8:	26 1b       	sub	r18, r22
    17fa:	37 0b       	sbc	r19, r23
    17fc:	26 30       	cpi	r18, 0x06	; 6
    17fe:	31 05       	cpc	r19, r1
    1800:	5c f1       	brlt	.+86     	; 0x1858 <_Z32Calculate_Front_LinetrackerY_Pidv+0x10c>
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	a9 01       	movw	r20, r18
    1808:	c3 01       	movw	r24, r6
    180a:	b2 01       	movw	r22, r4
    180c:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__gesf2>
    1810:	18 16       	cp	r1, r24
    1812:	6c f4       	brge	.+26     	; 0x182e <_Z32Calculate_Front_LinetrackerY_Pidv+0xe2>
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	a0 ea       	ldi	r26, 0xA0	; 160
    181a:	b0 e4       	ldi	r27, 0x40	; 64
    181c:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <FrontLinetrackerY_+0xa>
    1820:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <FrontLinetrackerY_+0xb>
    1824:	a0 93 f2 02 	sts	0x02F2, r26	; 0x8002f2 <FrontLinetrackerY_+0xc>
    1828:	b0 93 f3 02 	sts	0x02F3, r27	; 0x8002f3 <FrontLinetrackerY_+0xd>
    182c:	15 c0       	rjmp	.+42     	; 0x1858 <_Z32Calculate_Front_LinetrackerY_Pidv+0x10c>
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	a9 01       	movw	r20, r18
    1834:	c3 01       	movw	r24, r6
    1836:	b2 01       	movw	r22, r4
    1838:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__cmpsf2>
    183c:	88 23       	and	r24, r24
    183e:	64 f4       	brge	.+24     	; 0x1858 <_Z32Calculate_Front_LinetrackerY_Pidv+0x10c>
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	a0 ea       	ldi	r26, 0xA0	; 160
    1846:	b0 ec       	ldi	r27, 0xC0	; 192
    1848:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <FrontLinetrackerY_+0xa>
    184c:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <FrontLinetrackerY_+0xb>
    1850:	a0 93 f2 02 	sts	0x02F2, r26	; 0x8002f2 <FrontLinetrackerY_+0xc>
    1854:	b0 93 f3 02 	sts	0x02F3, r27	; 0x8002f3 <FrontLinetrackerY_+0xd>
    1858:	01 2b       	or	r16, r17
    185a:	49 f4       	brne	.+18     	; 0x186e <_Z32Calculate_Front_LinetrackerY_Pidv+0x122>
    185c:	e6 ee       	ldi	r30, 0xE6	; 230
    185e:	f2 e0       	ldi	r31, 0x02	; 2
    1860:	12 86       	std	Z+10, r1	; 0x0a
    1862:	13 86       	std	Z+11, r1	; 0x0b
    1864:	14 86       	std	Z+12, r1	; 0x0c
    1866:	15 86       	std	Z+13, r1	; 0x0d
    1868:	17 82       	std	Z+7, r1	; 0x07
    186a:	16 82       	std	Z+6, r1	; 0x06
    186c:	2d c0       	rjmp	.+90     	; 0x18c8 <_Z32Calculate_Front_LinetrackerY_Pidv+0x17c>
    186e:	c6 ee       	ldi	r28, 0xE6	; 230
    1870:	d2 e0       	ldi	r29, 0x02	; 2
    1872:	2d 89       	ldd	r18, Y+21	; 0x15
    1874:	3e 89       	ldd	r19, Y+22	; 0x16
    1876:	4f 89       	ldd	r20, Y+23	; 0x17
    1878:	58 8d       	ldd	r21, Y+24	; 0x18
    187a:	c5 01       	movw	r24, r10
    187c:	b4 01       	movw	r22, r8
    187e:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
    1882:	2a 85       	ldd	r18, Y+10	; 0x0a
    1884:	3b 85       	ldd	r19, Y+11	; 0x0b
    1886:	4c 85       	ldd	r20, Y+12	; 0x0c
    1888:	5d 85       	ldd	r21, Y+13	; 0x0d
    188a:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
    188e:	4b 01       	movw	r8, r22
    1890:	5c 01       	movw	r10, r24
    1892:	8c 81       	ldd	r24, Y+4	; 0x04
    1894:	9d 81       	ldd	r25, Y+5	; 0x05
    1896:	b7 01       	movw	r22, r14
    1898:	68 1b       	sub	r22, r24
    189a:	79 0b       	sbc	r23, r25
    189c:	07 2e       	mov	r0, r23
    189e:	00 0c       	add	r0, r0
    18a0:	88 0b       	sbc	r24, r24
    18a2:	99 0b       	sbc	r25, r25
    18a4:	0e 94 4f 20 	call	0x409e	; 0x409e <__floatsisf>
    18a8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    18aa:	3e 8d       	ldd	r19, Y+30	; 0x1e
    18ac:	4f 8d       	ldd	r20, Y+31	; 0x1f
    18ae:	58 a1       	ldd	r21, Y+32	; 0x20
    18b0:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
    18b4:	9b 01       	movw	r18, r22
    18b6:	ac 01       	movw	r20, r24
    18b8:	c5 01       	movw	r24, r10
    18ba:	b4 01       	movw	r22, r8
    18bc:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <__subsf3>
    18c0:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
    18c4:	7f 83       	std	Y+7, r23	; 0x07
    18c6:	6e 83       	std	Y+6, r22	; 0x06
    18c8:	e6 ee       	ldi	r30, 0xE6	; 230
    18ca:	f2 e0       	ldi	r31, 0x02	; 2
    18cc:	80 81       	ld	r24, Z
    18ce:	91 81       	ldd	r25, Z+1	; 0x01
    18d0:	95 83       	std	Z+5, r25	; 0x05
    18d2:	84 83       	std	Z+4, r24	; 0x04
    18d4:	86 81       	ldd	r24, Z+6	; 0x06
    18d6:	97 81       	ldd	r25, Z+7	; 0x07
    18d8:	9c 01       	movw	r18, r24
    18da:	99 23       	and	r25, r25
    18dc:	24 f4       	brge	.+8      	; 0x18e6 <_Z32Calculate_Front_LinetrackerY_Pidv+0x19a>
    18de:	22 27       	eor	r18, r18
    18e0:	33 27       	eor	r19, r19
    18e2:	28 1b       	sub	r18, r24
    18e4:	39 0b       	sbc	r19, r25
    18e6:	21 35       	cpi	r18, 0x51	; 81
    18e8:	31 05       	cpc	r19, r1
    18ea:	84 f0       	brlt	.+32     	; 0x190c <_Z32Calculate_Front_LinetrackerY_Pidv+0x1c0>
    18ec:	18 16       	cp	r1, r24
    18ee:	19 06       	cpc	r1, r25
    18f0:	3c f4       	brge	.+14     	; 0x1900 <_Z32Calculate_Front_LinetrackerY_Pidv+0x1b4>
    18f2:	80 e5       	ldi	r24, 0x50	; 80
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <FrontLinetrackerY_+0x7>
    18fa:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <FrontLinetrackerY_+0x6>
    18fe:	06 c0       	rjmp	.+12     	; 0x190c <_Z32Calculate_Front_LinetrackerY_Pidv+0x1c0>
    1900:	80 eb       	ldi	r24, 0xB0	; 176
    1902:	9f ef       	ldi	r25, 0xFF	; 255
    1904:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <FrontLinetrackerY_+0x7>
    1908:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <FrontLinetrackerY_+0x6>
    190c:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <PidUpdateFlagLinetrackerFront>
    1910:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <linetrackerPID>
    1914:	81 11       	cpse	r24, r1
    1916:	04 c0       	rjmp	.+8      	; 0x1920 <_Z32Calculate_Front_LinetrackerY_Pidv+0x1d4>
    1918:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <FrontLinetrackerY_+0x7>
    191c:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <FrontLinetrackerY_+0x6>
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	1f 91       	pop	r17
    1926:	0f 91       	pop	r16
    1928:	ff 90       	pop	r15
    192a:	ef 90       	pop	r14
    192c:	bf 90       	pop	r11
    192e:	af 90       	pop	r10
    1930:	9f 90       	pop	r9
    1932:	8f 90       	pop	r8
    1934:	7f 90       	pop	r7
    1936:	6f 90       	pop	r6
    1938:	5f 90       	pop	r5
    193a:	4f 90       	pop	r4
    193c:	08 95       	ret

0000193e <_Z31Calculate_Back_LinetrackerY_Pidv>:
    193e:	4f 92       	push	r4
    1940:	5f 92       	push	r5
    1942:	6f 92       	push	r6
    1944:	7f 92       	push	r7
    1946:	8f 92       	push	r8
    1948:	9f 92       	push	r9
    194a:	af 92       	push	r10
    194c:	bf 92       	push	r11
    194e:	ef 92       	push	r14
    1950:	ff 92       	push	r15
    1952:	0f 93       	push	r16
    1954:	1f 93       	push	r17
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
    195a:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <BackLinetrackerY_+0x10>
    195e:	88 23       	and	r24, r24
    1960:	51 f0       	breq	.+20     	; 0x1976 <_Z31Calculate_Back_LinetrackerY_Pidv+0x38>
    1962:	14 de       	rcall	.-984    	; 0x158c <_Z26Get_Back_LinetrackerY_Datav>
    1964:	88 23       	and	r24, r24
    1966:	39 f0       	breq	.+14     	; 0x1976 <_Z31Calculate_Back_LinetrackerY_Pidv+0x38>
    1968:	11 de       	rcall	.-990    	; 0x158c <_Z26Get_Back_LinetrackerY_Datav>
    196a:	e5 ec       	ldi	r30, 0xC5	; 197
    196c:	f2 e0       	ldi	r31, 0x02	; 2
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	95 83       	std	Z+5, r25	; 0x05
    1972:	84 83       	std	Z+4, r24	; 0x04
    1974:	10 8a       	std	Z+16, r1	; 0x10
    1976:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <PidUpdateFlagLinetrackerBack>
    197a:	88 23       	and	r24, r24
    197c:	09 f4       	brne	.+2      	; 0x1980 <_Z31Calculate_Back_LinetrackerY_Pidv+0x42>
    197e:	c0 c0       	rjmp	.+384    	; 0x1b00 <_Z31Calculate_Back_LinetrackerY_Pidv+0x1c2>
    1980:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <linetrackerPID>
    1984:	88 23       	and	r24, r24
    1986:	09 f4       	brne	.+2      	; 0x198a <_Z31Calculate_Back_LinetrackerY_Pidv+0x4c>
    1988:	bf c0       	rjmp	.+382    	; 0x1b08 <_Z31Calculate_Back_LinetrackerY_Pidv+0x1ca>
    198a:	00 de       	rcall	.-1024   	; 0x158c <_Z26Get_Back_LinetrackerY_Datav>
    198c:	e8 2e       	mov	r14, r24
    198e:	f1 2c       	mov	r15, r1
    1990:	c5 ec       	ldi	r28, 0xC5	; 197
    1992:	d2 e0       	ldi	r29, 0x02	; 2
    1994:	f9 82       	std	Y+1, r15	; 0x01
    1996:	e8 82       	st	Y, r14
    1998:	0e 85       	ldd	r16, Y+14	; 0x0e
    199a:	1f 85       	ldd	r17, Y+15	; 0x0f
    199c:	0e 19       	sub	r16, r14
    199e:	1f 09       	sbc	r17, r15
    19a0:	1b 83       	std	Y+3, r17	; 0x03
    19a2:	0a 83       	std	Y+2, r16	; 0x02
    19a4:	b8 01       	movw	r22, r16
    19a6:	01 2e       	mov	r0, r17
    19a8:	00 0c       	add	r0, r0
    19aa:	88 0b       	sbc	r24, r24
    19ac:	99 0b       	sbc	r25, r25
    19ae:	0e 94 4f 20 	call	0x409e	; 0x409e <__floatsisf>
    19b2:	4b 01       	movw	r8, r22
    19b4:	5c 01       	movw	r10, r24
    19b6:	29 8d       	ldd	r18, Y+25	; 0x19
    19b8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    19ba:	4b 8d       	ldd	r20, Y+27	; 0x1b
    19bc:	5c 8d       	ldd	r21, Y+28	; 0x1c
    19be:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
    19c2:	2a 85       	ldd	r18, Y+10	; 0x0a
    19c4:	3b 85       	ldd	r19, Y+11	; 0x0b
    19c6:	4c 85       	ldd	r20, Y+12	; 0x0c
    19c8:	5d 85       	ldd	r21, Y+13	; 0x0d
    19ca:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
    19ce:	2b 01       	movw	r4, r22
    19d0:	3c 01       	movw	r6, r24
    19d2:	6a 87       	std	Y+10, r22	; 0x0a
    19d4:	7b 87       	std	Y+11, r23	; 0x0b
    19d6:	8c 87       	std	Y+12, r24	; 0x0c
    19d8:	9d 87       	std	Y+13, r25	; 0x0d
    19da:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
    19de:	9b 01       	movw	r18, r22
    19e0:	77 23       	and	r23, r23
    19e2:	24 f4       	brge	.+8      	; 0x19ec <_Z31Calculate_Back_LinetrackerY_Pidv+0xae>
    19e4:	22 27       	eor	r18, r18
    19e6:	33 27       	eor	r19, r19
    19e8:	26 1b       	sub	r18, r22
    19ea:	37 0b       	sbc	r19, r23
    19ec:	26 30       	cpi	r18, 0x06	; 6
    19ee:	31 05       	cpc	r19, r1
    19f0:	5c f1       	brlt	.+86     	; 0x1a48 <_Z31Calculate_Back_LinetrackerY_Pidv+0x10a>
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	a9 01       	movw	r20, r18
    19f8:	c3 01       	movw	r24, r6
    19fa:	b2 01       	movw	r22, r4
    19fc:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__gesf2>
    1a00:	18 16       	cp	r1, r24
    1a02:	6c f4       	brge	.+26     	; 0x1a1e <_Z31Calculate_Back_LinetrackerY_Pidv+0xe0>
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	a0 ea       	ldi	r26, 0xA0	; 160
    1a0a:	b0 e4       	ldi	r27, 0x40	; 64
    1a0c:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <BackLinetrackerY_+0xa>
    1a10:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <BackLinetrackerY_+0xb>
    1a14:	a0 93 d1 02 	sts	0x02D1, r26	; 0x8002d1 <BackLinetrackerY_+0xc>
    1a18:	b0 93 d2 02 	sts	0x02D2, r27	; 0x8002d2 <BackLinetrackerY_+0xd>
    1a1c:	15 c0       	rjmp	.+42     	; 0x1a48 <_Z31Calculate_Back_LinetrackerY_Pidv+0x10a>
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	a9 01       	movw	r20, r18
    1a24:	c3 01       	movw	r24, r6
    1a26:	b2 01       	movw	r22, r4
    1a28:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__cmpsf2>
    1a2c:	88 23       	and	r24, r24
    1a2e:	64 f4       	brge	.+24     	; 0x1a48 <_Z31Calculate_Back_LinetrackerY_Pidv+0x10a>
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	a0 ea       	ldi	r26, 0xA0	; 160
    1a36:	b0 ec       	ldi	r27, 0xC0	; 192
    1a38:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <BackLinetrackerY_+0xa>
    1a3c:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <BackLinetrackerY_+0xb>
    1a40:	a0 93 d1 02 	sts	0x02D1, r26	; 0x8002d1 <BackLinetrackerY_+0xc>
    1a44:	b0 93 d2 02 	sts	0x02D2, r27	; 0x8002d2 <BackLinetrackerY_+0xd>
    1a48:	01 2b       	or	r16, r17
    1a4a:	49 f4       	brne	.+18     	; 0x1a5e <_Z31Calculate_Back_LinetrackerY_Pidv+0x120>
    1a4c:	e5 ec       	ldi	r30, 0xC5	; 197
    1a4e:	f2 e0       	ldi	r31, 0x02	; 2
    1a50:	12 86       	std	Z+10, r1	; 0x0a
    1a52:	13 86       	std	Z+11, r1	; 0x0b
    1a54:	14 86       	std	Z+12, r1	; 0x0c
    1a56:	15 86       	std	Z+13, r1	; 0x0d
    1a58:	17 82       	std	Z+7, r1	; 0x07
    1a5a:	16 82       	std	Z+6, r1	; 0x06
    1a5c:	2d c0       	rjmp	.+90     	; 0x1ab8 <_Z31Calculate_Back_LinetrackerY_Pidv+0x17a>
    1a5e:	c5 ec       	ldi	r28, 0xC5	; 197
    1a60:	d2 e0       	ldi	r29, 0x02	; 2
    1a62:	2d 89       	ldd	r18, Y+21	; 0x15
    1a64:	3e 89       	ldd	r19, Y+22	; 0x16
    1a66:	4f 89       	ldd	r20, Y+23	; 0x17
    1a68:	58 8d       	ldd	r21, Y+24	; 0x18
    1a6a:	c5 01       	movw	r24, r10
    1a6c:	b4 01       	movw	r22, r8
    1a6e:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
    1a72:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a74:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a76:	4c 85       	ldd	r20, Y+12	; 0x0c
    1a78:	5d 85       	ldd	r21, Y+13	; 0x0d
    1a7a:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
    1a7e:	4b 01       	movw	r8, r22
    1a80:	5c 01       	movw	r10, r24
    1a82:	8c 81       	ldd	r24, Y+4	; 0x04
    1a84:	9d 81       	ldd	r25, Y+5	; 0x05
    1a86:	b7 01       	movw	r22, r14
    1a88:	68 1b       	sub	r22, r24
    1a8a:	79 0b       	sbc	r23, r25
    1a8c:	07 2e       	mov	r0, r23
    1a8e:	00 0c       	add	r0, r0
    1a90:	88 0b       	sbc	r24, r24
    1a92:	99 0b       	sbc	r25, r25
    1a94:	0e 94 4f 20 	call	0x409e	; 0x409e <__floatsisf>
    1a98:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1a9a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1a9c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1a9e:	58 a1       	ldd	r21, Y+32	; 0x20
    1aa0:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
    1aa4:	9b 01       	movw	r18, r22
    1aa6:	ac 01       	movw	r20, r24
    1aa8:	c5 01       	movw	r24, r10
    1aaa:	b4 01       	movw	r22, r8
    1aac:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <__subsf3>
    1ab0:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
    1ab4:	7f 83       	std	Y+7, r23	; 0x07
    1ab6:	6e 83       	std	Y+6, r22	; 0x06
    1ab8:	e5 ec       	ldi	r30, 0xC5	; 197
    1aba:	f2 e0       	ldi	r31, 0x02	; 2
    1abc:	80 81       	ld	r24, Z
    1abe:	91 81       	ldd	r25, Z+1	; 0x01
    1ac0:	95 83       	std	Z+5, r25	; 0x05
    1ac2:	84 83       	std	Z+4, r24	; 0x04
    1ac4:	86 81       	ldd	r24, Z+6	; 0x06
    1ac6:	97 81       	ldd	r25, Z+7	; 0x07
    1ac8:	9c 01       	movw	r18, r24
    1aca:	99 23       	and	r25, r25
    1acc:	24 f4       	brge	.+8      	; 0x1ad6 <_Z31Calculate_Back_LinetrackerY_Pidv+0x198>
    1ace:	22 27       	eor	r18, r18
    1ad0:	33 27       	eor	r19, r19
    1ad2:	28 1b       	sub	r18, r24
    1ad4:	39 0b       	sbc	r19, r25
    1ad6:	21 35       	cpi	r18, 0x51	; 81
    1ad8:	31 05       	cpc	r19, r1
    1ada:	84 f0       	brlt	.+32     	; 0x1afc <_Z31Calculate_Back_LinetrackerY_Pidv+0x1be>
    1adc:	18 16       	cp	r1, r24
    1ade:	19 06       	cpc	r1, r25
    1ae0:	3c f4       	brge	.+14     	; 0x1af0 <_Z31Calculate_Back_LinetrackerY_Pidv+0x1b2>
    1ae2:	80 e5       	ldi	r24, 0x50	; 80
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <BackLinetrackerY_+0x7>
    1aea:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <BackLinetrackerY_+0x6>
    1aee:	06 c0       	rjmp	.+12     	; 0x1afc <_Z31Calculate_Back_LinetrackerY_Pidv+0x1be>
    1af0:	80 eb       	ldi	r24, 0xB0	; 176
    1af2:	9f ef       	ldi	r25, 0xFF	; 255
    1af4:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <BackLinetrackerY_+0x7>
    1af8:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <BackLinetrackerY_+0x6>
    1afc:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <PidUpdateFlagLinetrackerBack>
    1b00:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <linetrackerPID>
    1b04:	81 11       	cpse	r24, r1
    1b06:	04 c0       	rjmp	.+8      	; 0x1b10 <_Z31Calculate_Back_LinetrackerY_Pidv+0x1d2>
    1b08:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <BackLinetrackerY_+0x7>
    1b0c:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <BackLinetrackerY_+0x6>
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	1f 91       	pop	r17
    1b16:	0f 91       	pop	r16
    1b18:	ff 90       	pop	r15
    1b1a:	ef 90       	pop	r14
    1b1c:	bf 90       	pop	r11
    1b1e:	af 90       	pop	r10
    1b20:	9f 90       	pop	r9
    1b22:	8f 90       	pop	r8
    1b24:	7f 90       	pop	r7
    1b26:	6f 90       	pop	r6
    1b28:	5f 90       	pop	r5
    1b2a:	4f 90       	pop	r4
    1b2c:	08 95       	ret

00001b2e <_Z18Calculate_Velocityv>:
    1b2e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <_axis>
    1b32:	81 11       	cpse	r24, r1
    1b34:	08 c0       	rjmp	.+16     	; 0x1b46 <_Z18Calculate_Velocityv+0x18>
    1b36:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_direction>
    1b3a:	82 30       	cpi	r24, 0x02	; 2
    1b3c:	71 f0       	breq	.+28     	; 0x1b5a <_Z18Calculate_Velocityv+0x2c>
    1b3e:	83 30       	cpi	r24, 0x03	; 3
    1b40:	71 f4       	brne	.+28     	; 0x1b5e <_Z18Calculate_Velocityv+0x30>
    1b42:	a1 e0       	ldi	r26, 0x01	; 1
    1b44:	13 c0       	rjmp	.+38     	; 0x1b6c <_Z18Calculate_Velocityv+0x3e>
    1b46:	81 30       	cpi	r24, 0x01	; 1
    1b48:	61 f4       	brne	.+24     	; 0x1b62 <_Z18Calculate_Velocityv+0x34>
    1b4a:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_direction>
    1b4e:	82 30       	cpi	r24, 0x02	; 2
    1b50:	51 f0       	breq	.+20     	; 0x1b66 <_Z18Calculate_Velocityv+0x38>
    1b52:	83 30       	cpi	r24, 0x03	; 3
    1b54:	51 f4       	brne	.+20     	; 0x1b6a <_Z18Calculate_Velocityv+0x3c>
    1b56:	a3 e0       	ldi	r26, 0x03	; 3
    1b58:	09 c0       	rjmp	.+18     	; 0x1b6c <_Z18Calculate_Velocityv+0x3e>
    1b5a:	a0 e0       	ldi	r26, 0x00	; 0
    1b5c:	07 c0       	rjmp	.+14     	; 0x1b6c <_Z18Calculate_Velocityv+0x3e>
    1b5e:	a4 e0       	ldi	r26, 0x04	; 4
    1b60:	05 c0       	rjmp	.+10     	; 0x1b6c <_Z18Calculate_Velocityv+0x3e>
    1b62:	a4 e0       	ldi	r26, 0x04	; 4
    1b64:	03 c0       	rjmp	.+6      	; 0x1b6c <_Z18Calculate_Velocityv+0x3e>
    1b66:	a2 e0       	ldi	r26, 0x02	; 2
    1b68:	01 c0       	rjmp	.+2      	; 0x1b6c <_Z18Calculate_Velocityv+0x3e>
    1b6a:	a4 e0       	ldi	r26, 0x04	; 4
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	aa 0f       	add	r26, r26
    1b70:	bb 1f       	adc	r27, r27
    1b72:	aa 0f       	add	r26, r26
    1b74:	bb 1f       	adc	r27, r27
    1b76:	a3 5f       	subi	r26, 0xF3	; 243
    1b78:	bd 4f       	sbci	r27, 0xFD	; 253
    1b7a:	eb ed       	ldi	r30, 0xDB	; 219
    1b7c:	f3 e0       	ldi	r31, 0x03	; 3
    1b7e:	63 ee       	ldi	r22, 0xE3	; 227
    1b80:	73 e0       	ldi	r23, 0x03	; 3
    1b82:	4d 91       	ld	r20, X+
    1b84:	20 81       	ld	r18, Z
    1b86:	31 81       	ldd	r19, Z+1	; 0x01
    1b88:	42 03       	mulsu	r20, r18
    1b8a:	c0 01       	movw	r24, r0
    1b8c:	43 9f       	mul	r20, r19
    1b8e:	90 0d       	add	r25, r0
    1b90:	11 24       	eor	r1, r1
    1b92:	81 93       	st	Z+, r24
    1b94:	91 93       	st	Z+, r25
    1b96:	e6 17       	cp	r30, r22
    1b98:	f7 07       	cpc	r31, r23
    1b9a:	99 f7       	brne	.-26     	; 0x1b82 <_Z18Calculate_Velocityv+0x54>
    1b9c:	08 95       	ret

00001b9e <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>:
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	ec 01       	movw	r28, r24
    1ba4:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <inverseKinematicsTrue>
    1ba8:	d1 dd       	rcall	.-1118   	; 0x174c <_Z32Calculate_Front_LinetrackerY_Pidv>
    1baa:	c9 de       	rcall	.-622    	; 0x193e <_Z31Calculate_Back_LinetrackerY_Pidv>
    1bac:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_direction>
    1bb0:	82 30       	cpi	r24, 0x02	; 2
    1bb2:	f1 f4       	brne	.+60     	; 0x1bf0 <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti+0x52>
    1bb4:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <FrontLinetrackerY_+0x6>
    1bb8:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <FrontLinetrackerY_+0x7>
    1bbc:	eb ed       	ldi	r30, 0xDB	; 219
    1bbe:	f3 e0       	ldi	r31, 0x03	; 3
    1bc0:	9c 01       	movw	r18, r24
    1bc2:	2c 0f       	add	r18, r28
    1bc4:	3d 1f       	adc	r19, r29
    1bc6:	31 83       	std	Z+1, r19	; 0x01
    1bc8:	20 83       	st	Z, r18
    1bca:	9e 01       	movw	r18, r28
    1bcc:	28 1b       	sub	r18, r24
    1bce:	39 0b       	sbc	r19, r25
    1bd0:	33 83       	std	Z+3, r19	; 0x03
    1bd2:	22 83       	std	Z+2, r18	; 0x02
    1bd4:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <BackLinetrackerY_+0x6>
    1bd8:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <BackLinetrackerY_+0x7>
    1bdc:	9e 01       	movw	r18, r28
    1bde:	28 0f       	add	r18, r24
    1be0:	39 1f       	adc	r19, r25
    1be2:	35 83       	std	Z+5, r19	; 0x05
    1be4:	24 83       	std	Z+4, r18	; 0x04
    1be6:	c8 1b       	sub	r28, r24
    1be8:	d9 0b       	sbc	r29, r25
    1bea:	d7 83       	std	Z+7, r29	; 0x07
    1bec:	c6 83       	std	Z+6, r28	; 0x06
    1bee:	1c c0       	rjmp	.+56     	; 0x1c28 <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti+0x8a>
    1bf0:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <FrontLinetrackerY_+0x6>
    1bf4:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <FrontLinetrackerY_+0x7>
    1bf8:	eb ed       	ldi	r30, 0xDB	; 219
    1bfa:	f3 e0       	ldi	r31, 0x03	; 3
    1bfc:	9e 01       	movw	r18, r28
    1bfe:	28 1b       	sub	r18, r24
    1c00:	39 0b       	sbc	r19, r25
    1c02:	31 83       	std	Z+1, r19	; 0x01
    1c04:	20 83       	st	Z, r18
    1c06:	8c 0f       	add	r24, r28
    1c08:	9d 1f       	adc	r25, r29
    1c0a:	93 83       	std	Z+3, r25	; 0x03
    1c0c:	82 83       	std	Z+2, r24	; 0x02
    1c0e:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <BackLinetrackerY_+0x6>
    1c12:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <BackLinetrackerY_+0x7>
    1c16:	9e 01       	movw	r18, r28
    1c18:	28 1b       	sub	r18, r24
    1c1a:	39 0b       	sbc	r19, r25
    1c1c:	35 83       	std	Z+5, r19	; 0x05
    1c1e:	24 83       	std	Z+4, r18	; 0x04
    1c20:	c8 0f       	add	r28, r24
    1c22:	d9 1f       	adc	r29, r25
    1c24:	d7 83       	std	Z+7, r29	; 0x07
    1c26:	c6 83       	std	Z+6, r28	; 0x06
    1c28:	82 df       	rcall	.-252    	; 0x1b2e <_Z18Calculate_Velocityv>
    1c2a:	df 91       	pop	r29
    1c2c:	cf 91       	pop	r28
    1c2e:	08 95       	ret

00001c30 <_Z15movYForwardSlowj>:
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	e6 ee       	ldi	r30, 0xE6	; 230
    1c36:	f2 e0       	ldi	r31, 0x02	; 2
    1c38:	0a e9       	ldi	r16, 0x9A	; 154
    1c3a:	19 e9       	ldi	r17, 0x99	; 153
    1c3c:	29 e1       	ldi	r18, 0x19	; 25
    1c3e:	3f e3       	ldi	r19, 0x3F	; 63
    1c40:	05 8b       	std	Z+21, r16	; 0x15
    1c42:	16 8b       	std	Z+22, r17	; 0x16
    1c44:	27 8b       	std	Z+23, r18	; 0x17
    1c46:	30 8f       	std	Z+24, r19	; 0x18
    1c48:	11 8e       	std	Z+25, r1	; 0x19
    1c4a:	12 8e       	std	Z+26, r1	; 0x1a
    1c4c:	13 8e       	std	Z+27, r1	; 0x1b
    1c4e:	14 8e       	std	Z+28, r1	; 0x1c
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	50 e0       	ldi	r21, 0x00	; 0
    1c54:	60 e8       	ldi	r22, 0x80	; 128
    1c56:	71 e4       	ldi	r23, 0x41	; 65
    1c58:	45 8f       	std	Z+29, r20	; 0x1d
    1c5a:	56 8f       	std	Z+30, r21	; 0x1e
    1c5c:	67 8f       	std	Z+31, r22	; 0x1f
    1c5e:	70 a3       	std	Z+32, r23	; 0x20
    1c60:	e5 ec       	ldi	r30, 0xC5	; 197
    1c62:	f2 e0       	ldi	r31, 0x02	; 2
    1c64:	05 8b       	std	Z+21, r16	; 0x15
    1c66:	16 8b       	std	Z+22, r17	; 0x16
    1c68:	27 8b       	std	Z+23, r18	; 0x17
    1c6a:	30 8f       	std	Z+24, r19	; 0x18
    1c6c:	11 8e       	std	Z+25, r1	; 0x19
    1c6e:	12 8e       	std	Z+26, r1	; 0x1a
    1c70:	13 8e       	std	Z+27, r1	; 0x1b
    1c72:	14 8e       	std	Z+28, r1	; 0x1c
    1c74:	45 8f       	std	Z+29, r20	; 0x1d
    1c76:	56 8f       	std	Z+30, r21	; 0x1e
    1c78:	67 8f       	std	Z+31, r22	; 0x1f
    1c7a:	70 a3       	std	Z+32, r23	; 0x20
    1c7c:	21 e0       	ldi	r18, 0x01	; 1
    1c7e:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <_axis>
    1c82:	22 e0       	ldi	r18, 0x02	; 2
    1c84:	20 93 0b 02 	sts	0x020B, r18	; 0x80020b <_direction>
    1c88:	8a df       	rcall	.-236    	; 0x1b9e <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>
    1c8a:	1f 91       	pop	r17
    1c8c:	0f 91       	pop	r16
    1c8e:	08 95       	ret

00001c90 <_Z10Move_Yaxisiij>:
    1c90:	2f 92       	push	r2
    1c92:	3f 92       	push	r3
    1c94:	4f 92       	push	r4
    1c96:	5f 92       	push	r5
    1c98:	6f 92       	push	r6
    1c9a:	7f 92       	push	r7
    1c9c:	8f 92       	push	r8
    1c9e:	9f 92       	push	r9
    1ca0:	af 92       	push	r10
    1ca2:	bf 92       	push	r11
    1ca4:	cf 92       	push	r12
    1ca6:	df 92       	push	r13
    1ca8:	ef 92       	push	r14
    1caa:	ff 92       	push	r15
    1cac:	0f 93       	push	r16
    1cae:	1f 93       	push	r17
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	1c 01       	movw	r2, r24
    1cb6:	8b 01       	movw	r16, r22
    1cb8:	7a 01       	movw	r14, r20
    1cba:	e6 ee       	ldi	r30, 0xE6	; 230
    1cbc:	f2 e0       	ldi	r31, 0x02	; 2
    1cbe:	8a e9       	ldi	r24, 0x9A	; 154
    1cc0:	99 e9       	ldi	r25, 0x99	; 153
    1cc2:	a9 e9       	ldi	r26, 0x99	; 153
    1cc4:	bf e3       	ldi	r27, 0x3F	; 63
    1cc6:	85 8b       	std	Z+21, r24	; 0x15
    1cc8:	96 8b       	std	Z+22, r25	; 0x16
    1cca:	a7 8b       	std	Z+23, r26	; 0x17
    1ccc:	b0 8f       	std	Z+24, r27	; 0x18
    1cce:	11 8e       	std	Z+25, r1	; 0x19
    1cd0:	12 8e       	std	Z+26, r1	; 0x1a
    1cd2:	13 8e       	std	Z+27, r1	; 0x1b
    1cd4:	14 8e       	std	Z+28, r1	; 0x1c
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	a0 e8       	ldi	r26, 0x80	; 128
    1cdc:	b1 e4       	ldi	r27, 0x41	; 65
    1cde:	85 8f       	std	Z+29, r24	; 0x1d
    1ce0:	96 8f       	std	Z+30, r25	; 0x1e
    1ce2:	a7 8f       	std	Z+31, r26	; 0x1f
    1ce4:	b0 a3       	std	Z+32, r27	; 0x20
    1ce6:	8e e9       	ldi	r24, 0x9E	; 158
    1ce8:	92 e0       	ldi	r25, 0x02	; 2
    1cea:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    1cee:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
    1cf2:	9b 01       	movw	r18, r22
    1cf4:	77 23       	and	r23, r23
    1cf6:	24 f4       	brge	.+8      	; 0x1d00 <_Z10Move_Yaxisiij+0x70>
    1cf8:	22 27       	eor	r18, r18
    1cfa:	33 27       	eor	r19, r19
    1cfc:	26 1b       	sub	r18, r22
    1cfe:	37 0b       	sbc	r19, r23
    1d00:	e9 01       	movw	r28, r18
    1d02:	30 93 d2 03 	sts	0x03D2, r19	; 0x8003d2 <distanceY+0x1>
    1d06:	20 93 d1 03 	sts	0x03D1, r18	; 0x8003d1 <distanceY>
    1d0a:	30 92 1a 03 	sts	0x031A, r3	; 0x80031a <driveY+0xf>
    1d0e:	20 92 19 03 	sts	0x0319, r2	; 0x800319 <driveY+0xe>
    1d12:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <PidUpdateFlagDriveY>
    1d16:	88 23       	and	r24, r24
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <_Z10Move_Yaxisiij+0x8c>
    1d1a:	0a c1       	rjmp	.+532    	; 0x1f30 <_Z10Move_Yaxisiij+0x2a0>
    1d1c:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <PidUpdateFlagDriveY>
    1d20:	28 35       	cpi	r18, 0x58	; 88
    1d22:	82 e0       	ldi	r24, 0x02	; 2
    1d24:	38 07       	cpc	r19, r24
    1d26:	0c f4       	brge	.+2      	; 0x1d2a <_Z10Move_Yaxisiij+0x9a>
    1d28:	ad c0       	rjmp	.+346    	; 0x1e84 <_Z10Move_Yaxisiij+0x1f4>
    1d2a:	0f 2e       	mov	r0, r31
    1d2c:	fb e0       	ldi	r31, 0x0B	; 11
    1d2e:	cf 2e       	mov	r12, r31
    1d30:	f3 e0       	ldi	r31, 0x03	; 3
    1d32:	df 2e       	mov	r13, r31
    1d34:	f0 2d       	mov	r31, r0
    1d36:	f6 01       	movw	r30, r12
    1d38:	31 83       	std	Z+1, r19	; 0x01
    1d3a:	20 83       	st	Z, r18
    1d3c:	22 1a       	sub	r2, r18
    1d3e:	33 0a       	sbc	r3, r19
    1d40:	33 82       	std	Z+3, r3	; 0x03
    1d42:	22 82       	std	Z+2, r2	; 0x02
    1d44:	b1 01       	movw	r22, r2
    1d46:	03 2c       	mov	r0, r3
    1d48:	00 0c       	add	r0, r0
    1d4a:	88 0b       	sbc	r24, r24
    1d4c:	99 0b       	sbc	r25, r25
    1d4e:	0e 94 4f 20 	call	0x409e	; 0x409e <__floatsisf>
    1d52:	2b 01       	movw	r4, r22
    1d54:	3c 01       	movw	r6, r24
    1d56:	f6 01       	movw	r30, r12
    1d58:	21 8d       	ldd	r18, Z+25	; 0x19
    1d5a:	32 8d       	ldd	r19, Z+26	; 0x1a
    1d5c:	43 8d       	ldd	r20, Z+27	; 0x1b
    1d5e:	54 8d       	ldd	r21, Z+28	; 0x1c
    1d60:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
    1d64:	f6 01       	movw	r30, r12
    1d66:	22 85       	ldd	r18, Z+10	; 0x0a
    1d68:	33 85       	ldd	r19, Z+11	; 0x0b
    1d6a:	44 85       	ldd	r20, Z+12	; 0x0c
    1d6c:	55 85       	ldd	r21, Z+13	; 0x0d
    1d6e:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
    1d72:	4b 01       	movw	r8, r22
    1d74:	5c 01       	movw	r10, r24
    1d76:	f6 01       	movw	r30, r12
    1d78:	62 87       	std	Z+10, r22	; 0x0a
    1d7a:	73 87       	std	Z+11, r23	; 0x0b
    1d7c:	84 87       	std	Z+12, r24	; 0x0c
    1d7e:	95 87       	std	Z+13, r25	; 0x0d
    1d80:	80 89       	ldd	r24, Z+16	; 0x10
    1d82:	88 23       	and	r24, r24
    1d84:	19 f0       	breq	.+6      	; 0x1d8c <_Z10Move_Yaxisiij+0xfc>
    1d86:	d5 83       	std	Z+5, r29	; 0x05
    1d88:	c4 83       	std	Z+4, r28	; 0x04
    1d8a:	10 8a       	std	Z+16, r1	; 0x10
    1d8c:	c5 01       	movw	r24, r10
    1d8e:	b4 01       	movw	r22, r8
    1d90:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
    1d94:	9b 01       	movw	r18, r22
    1d96:	77 23       	and	r23, r23
    1d98:	24 f4       	brge	.+8      	; 0x1da2 <_Z10Move_Yaxisiij+0x112>
    1d9a:	22 27       	eor	r18, r18
    1d9c:	33 27       	eor	r19, r19
    1d9e:	26 1b       	sub	r18, r22
    1da0:	37 0b       	sbc	r19, r23
    1da2:	2b 30       	cpi	r18, 0x0B	; 11
    1da4:	31 05       	cpc	r19, r1
    1da6:	5c f1       	brlt	.+86     	; 0x1dfe <_Z10Move_Yaxisiij+0x16e>
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	a9 01       	movw	r20, r18
    1dae:	c5 01       	movw	r24, r10
    1db0:	b4 01       	movw	r22, r8
    1db2:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__gesf2>
    1db6:	18 16       	cp	r1, r24
    1db8:	6c f4       	brge	.+26     	; 0x1dd4 <_Z10Move_Yaxisiij+0x144>
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	a0 e2       	ldi	r26, 0x20	; 32
    1dc0:	b1 e4       	ldi	r27, 0x41	; 65
    1dc2:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <driveY+0xa>
    1dc6:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <driveY+0xb>
    1dca:	a0 93 17 03 	sts	0x0317, r26	; 0x800317 <driveY+0xc>
    1dce:	b0 93 18 03 	sts	0x0318, r27	; 0x800318 <driveY+0xd>
    1dd2:	15 c0       	rjmp	.+42     	; 0x1dfe <_Z10Move_Yaxisiij+0x16e>
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	a9 01       	movw	r20, r18
    1dda:	c5 01       	movw	r24, r10
    1ddc:	b4 01       	movw	r22, r8
    1dde:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__cmpsf2>
    1de2:	88 23       	and	r24, r24
    1de4:	64 f4       	brge	.+24     	; 0x1dfe <_Z10Move_Yaxisiij+0x16e>
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	a0 e2       	ldi	r26, 0x20	; 32
    1dec:	b1 ec       	ldi	r27, 0xC1	; 193
    1dee:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <driveY+0xa>
    1df2:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <driveY+0xb>
    1df6:	a0 93 17 03 	sts	0x0317, r26	; 0x800317 <driveY+0xc>
    1dfa:	b0 93 18 03 	sts	0x0318, r27	; 0x800318 <driveY+0xd>
    1dfe:	12 14       	cp	r1, r2
    1e00:	13 04       	cpc	r1, r3
    1e02:	bc f5       	brge	.+110    	; 0x1e72 <_Z10Move_Yaxisiij+0x1e2>
    1e04:	0f 2e       	mov	r0, r31
    1e06:	fb e0       	ldi	r31, 0x0B	; 11
    1e08:	cf 2e       	mov	r12, r31
    1e0a:	f3 e0       	ldi	r31, 0x03	; 3
    1e0c:	df 2e       	mov	r13, r31
    1e0e:	f0 2d       	mov	r31, r0
    1e10:	f6 01       	movw	r30, r12
    1e12:	25 89       	ldd	r18, Z+21	; 0x15
    1e14:	36 89       	ldd	r19, Z+22	; 0x16
    1e16:	47 89       	ldd	r20, Z+23	; 0x17
    1e18:	50 8d       	ldd	r21, Z+24	; 0x18
    1e1a:	c3 01       	movw	r24, r6
    1e1c:	b2 01       	movw	r22, r4
    1e1e:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
    1e22:	f6 01       	movw	r30, r12
    1e24:	22 85       	ldd	r18, Z+10	; 0x0a
    1e26:	33 85       	ldd	r19, Z+11	; 0x0b
    1e28:	44 85       	ldd	r20, Z+12	; 0x0c
    1e2a:	55 85       	ldd	r21, Z+13	; 0x0d
    1e2c:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
    1e30:	4b 01       	movw	r8, r22
    1e32:	5c 01       	movw	r10, r24
    1e34:	f6 01       	movw	r30, r12
    1e36:	84 81       	ldd	r24, Z+4	; 0x04
    1e38:	95 81       	ldd	r25, Z+5	; 0x05
    1e3a:	be 01       	movw	r22, r28
    1e3c:	68 1b       	sub	r22, r24
    1e3e:	79 0b       	sbc	r23, r25
    1e40:	07 2e       	mov	r0, r23
    1e42:	00 0c       	add	r0, r0
    1e44:	88 0b       	sbc	r24, r24
    1e46:	99 0b       	sbc	r25, r25
    1e48:	0e 94 4f 20 	call	0x409e	; 0x409e <__floatsisf>
    1e4c:	f6 01       	movw	r30, r12
    1e4e:	25 8d       	ldd	r18, Z+29	; 0x1d
    1e50:	36 8d       	ldd	r19, Z+30	; 0x1e
    1e52:	47 8d       	ldd	r20, Z+31	; 0x1f
    1e54:	50 a1       	ldd	r21, Z+32	; 0x20
    1e56:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
    1e5a:	9b 01       	movw	r18, r22
    1e5c:	ac 01       	movw	r20, r24
    1e5e:	c5 01       	movw	r24, r10
    1e60:	b4 01       	movw	r22, r8
    1e62:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <__subsf3>
    1e66:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
    1e6a:	f6 01       	movw	r30, r12
    1e6c:	77 83       	std	Z+7, r23	; 0x07
    1e6e:	66 83       	std	Z+6, r22	; 0x06
    1e70:	04 c0       	rjmp	.+8      	; 0x1e7a <_Z10Move_Yaxisiij+0x1ea>
    1e72:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <driveY+0x7>
    1e76:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <driveY+0x6>
    1e7a:	d0 93 10 03 	sts	0x0310, r29	; 0x800310 <driveY+0x5>
    1e7e:	c0 93 0f 03 	sts	0x030F, r28	; 0x80030f <driveY+0x4>
    1e82:	18 c0       	rjmp	.+48     	; 0x1eb4 <_Z10Move_Yaxisiij+0x224>
    1e84:	b9 01       	movw	r22, r18
    1e86:	33 0f       	add	r19, r19
    1e88:	88 0b       	sbc	r24, r24
    1e8a:	99 0b       	sbc	r25, r25
    1e8c:	0e 94 4f 20 	call	0x409e	; 0x409e <__floatsisf>
    1e90:	2a e9       	ldi	r18, 0x9A	; 154
    1e92:	39 e9       	ldi	r19, 0x99	; 153
    1e94:	49 e1       	ldi	r20, 0x19	; 25
    1e96:	5e e3       	ldi	r21, 0x3E	; 62
    1e98:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e7       	ldi	r20, 0x70	; 112
    1ea2:	52 e4       	ldi	r21, 0x42	; 66
    1ea4:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__addsf3>
    1ea8:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
    1eac:	70 93 12 03 	sts	0x0312, r23	; 0x800312 <driveY+0x7>
    1eb0:	60 93 11 03 	sts	0x0311, r22	; 0x800311 <driveY+0x6>
    1eb4:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <driveY+0x6>
    1eb8:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <driveY+0x7>
    1ebc:	99 23       	and	r25, r25
    1ebe:	1c f4       	brge	.+6      	; 0x1ec6 <_Z10Move_Yaxisiij+0x236>
    1ec0:	91 95       	neg	r25
    1ec2:	81 95       	neg	r24
    1ec4:	91 09       	sbc	r25, r1
    1ec6:	8e 15       	cp	r24, r14
    1ec8:	9f 05       	cpc	r25, r15
    1eca:	20 f0       	brcs	.+8      	; 0x1ed4 <_Z10Move_Yaxisiij+0x244>
    1ecc:	f0 92 12 03 	sts	0x0312, r15	; 0x800312 <driveY+0x7>
    1ed0:	e0 92 11 03 	sts	0x0311, r14	; 0x800311 <driveY+0x6>
    1ed4:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <driveY+0x6>
    1ed8:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <driveY+0x7>
    1edc:	43 96       	adiw	r24, 0x13	; 19
    1ede:	87 97       	sbiw	r24, 0x27	; 39
    1ee0:	30 f4       	brcc	.+12     	; 0x1eee <_Z10Move_Yaxisiij+0x25e>
    1ee2:	84 e1       	ldi	r24, 0x14	; 20
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <driveY+0x7>
    1eea:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <driveY+0x6>
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_axis>
    1ef4:	02 30       	cpi	r16, 0x02	; 2
    1ef6:	11 05       	cpc	r17, r1
    1ef8:	61 f4       	brne	.+24     	; 0x1f12 <_Z10Move_Yaxisiij+0x282>
    1efa:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <movingyfront>
    1efe:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <movingyback>
    1f02:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <movingxfront>
    1f06:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <movingxback>
    1f0a:	82 e0       	ldi	r24, 0x02	; 2
    1f0c:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_direction>
    1f10:	0f c0       	rjmp	.+30     	; 0x1f30 <_Z10Move_Yaxisiij+0x2a0>
    1f12:	03 30       	cpi	r16, 0x03	; 3
    1f14:	11 05       	cpc	r17, r1
    1f16:	61 f4       	brne	.+24     	; 0x1f30 <_Z10Move_Yaxisiij+0x2a0>
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <movingyback>
    1f1e:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <movingyfront>
    1f22:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <movingxfront>
    1f26:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <movingxback>
    1f2a:	83 e0       	ldi	r24, 0x03	; 3
    1f2c:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_direction>
    1f30:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <driveY+0x6>
    1f34:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <driveY+0x7>
    1f38:	32 de       	rcall	.-924    	; 0x1b9e <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>
    1f3a:	df 91       	pop	r29
    1f3c:	cf 91       	pop	r28
    1f3e:	1f 91       	pop	r17
    1f40:	0f 91       	pop	r16
    1f42:	ff 90       	pop	r15
    1f44:	ef 90       	pop	r14
    1f46:	df 90       	pop	r13
    1f48:	cf 90       	pop	r12
    1f4a:	bf 90       	pop	r11
    1f4c:	af 90       	pop	r10
    1f4e:	9f 90       	pop	r9
    1f50:	8f 90       	pop	r8
    1f52:	7f 90       	pop	r7
    1f54:	6f 90       	pop	r6
    1f56:	5f 90       	pop	r5
    1f58:	4f 90       	pop	r4
    1f5a:	3f 90       	pop	r3
    1f5c:	2f 90       	pop	r2
    1f5e:	08 95       	ret

00001f60 <_Z13Hold_Positionv>:


void Hold_Position(void)
{
	_axis = Y_Axis;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_axis>
	_direction = Back;
    1f66:	83 e0       	ldi	r24, 0x03	; 3
    1f68:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_direction>
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    1f6c:	e6 ee       	ldi	r30, 0xE6	; 230
    1f6e:	f2 e0       	ldi	r31, 0x02	; 2
    1f70:	46 e6       	ldi	r20, 0x66	; 102
    1f72:	56 e6       	ldi	r21, 0x66	; 102
    1f74:	66 ee       	ldi	r22, 0xE6	; 230
    1f76:	7f e3       	ldi	r23, 0x3F	; 63
    1f78:	45 8b       	std	Z+21, r20	; 0x15
    1f7a:	56 8b       	std	Z+22, r21	; 0x16
    1f7c:	67 8b       	std	Z+23, r22	; 0x17
    1f7e:	70 8f       	std	Z+24, r23	; 0x18
		ki = i;
    1f80:	11 8e       	std	Z+25, r1	; 0x19
    1f82:	12 8e       	std	Z+26, r1	; 0x1a
    1f84:	13 8e       	std	Z+27, r1	; 0x1b
    1f86:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	a0 e2       	ldi	r26, 0x20	; 32
    1f8e:	b1 e4       	ldi	r27, 0x41	; 65
    1f90:	85 8f       	std	Z+29, r24	; 0x1d
    1f92:	96 8f       	std	Z+30, r25	; 0x1e
    1f94:	a7 8f       	std	Z+31, r26	; 0x1f
    1f96:	b0 a3       	std	Z+32, r27	; 0x20
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    1f98:	e5 ec       	ldi	r30, 0xC5	; 197
    1f9a:	f2 e0       	ldi	r31, 0x02	; 2
    1f9c:	45 8b       	std	Z+21, r20	; 0x15
    1f9e:	56 8b       	std	Z+22, r21	; 0x16
    1fa0:	67 8b       	std	Z+23, r22	; 0x17
    1fa2:	70 8f       	std	Z+24, r23	; 0x18
		ki = i;
    1fa4:	11 8e       	std	Z+25, r1	; 0x19
    1fa6:	12 8e       	std	Z+26, r1	; 0x1a
    1fa8:	13 8e       	std	Z+27, r1	; 0x1b
    1faa:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    1fac:	85 8f       	std	Z+29, r24	; 0x1d
    1fae:	96 8f       	std	Z+30, r25	; 0x1e
    1fb0:	a7 8f       	std	Z+31, r26	; 0x1f
    1fb2:	b0 a3       	std	Z+32, r27	; 0x20
	
	
 	FrontLinetrackerY_.setPid(1.8,0,10);
 	BackLinetrackerY_.setPid(1.8,0,10);
	
	Calculate_Motor_Differential_Velocity_With_Center_Pivot(0);
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	f2 cd       	rjmp	.-1052   	; 0x1b9e <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>
    1fba:	08 95       	ret

00001fbc <_Z14updateZoneflagv>:
//  		else        uart0_puts("0 \n");


}

void updateZoneflag(void){
    1fbc:	cf 93       	push	r28
	//uart0_puts("update \r\n");
	/*if low on shuttlecock pin then shuttlecock received
	i.e if manual robot arm is extended to give shuttlecock*/
	if(!ShuttleCockGiven){
    1fbe:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <ShuttleCockGiven>
    1fc2:	81 11       	cpse	r24, r1
    1fc4:	ab c0       	rjmp	.+342    	; 0x211c <_Z14updateZoneflagv+0x160>
		//uart0_puts("entered above \r\n");
		if(!(PINL & (1<<PL6)) &&  where == inLZ1 ){
    1fc6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    1fca:	86 fd       	sbrc	r24, 6
    1fcc:	69 c0       	rjmp	.+210    	; 0x20a0 <_Z14updateZoneflagv+0xe4>
    1fce:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <where>
    1fd2:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <where+0x1>
    1fd6:	05 97       	sbiw	r24, 0x05	; 5
    1fd8:	09 f0       	breq	.+2      	; 0x1fdc <_Z14updateZoneflagv+0x20>
    1fda:	62 c0       	rjmp	.+196    	; 0x20a0 <_Z14updateZoneflagv+0xe4>
    1fdc:	54 c0       	rjmp	.+168    	; 0x2086 <_Z14updateZoneflagv+0xca>
			GoThrowingZone1 = true;
			task3 = task4 = false;
		}
		/*if low on shuttlecock pin then shuttlecock received
		i.e if manual robot arm is extended to give shuttlecock*/
		else if(!(SHUTTLECOCK_STATUSPORT & (1<<SHUTTLECOCK_STATUSPIN)) &&  where == inLZ2 && ManualInFrontOfLZ2){
    1fde:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <where>
    1fe2:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <where+0x1>
    1fe6:	06 97       	sbiw	r24, 0x06	; 6
    1fe8:	f9 f4       	brne	.+62     	; 0x2028 <_Z14updateZoneflagv+0x6c>
    1fea:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ManualInFrontOfLZ2>
    1fee:	81 11       	cpse	r24, r1
    1ff0:	5c c0       	rjmp	.+184    	; 0x20aa <_Z14updateZoneflagv+0xee>
    1ff2:	1a c0       	rjmp	.+52     	; 0x2028 <_Z14updateZoneflagv+0x6c>
			ShuttleCockGiven = false;
		}
	}
	//if shuttlecock given and arm is gone send 'w' to throwing mechanism to give to gripper
	//and move robot
	if(ShuttleCockGiven && (PINL & (1<<PL6)) &&  (where == inLZ1 || where == inLZ2) ){
    1ff4:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <where>
    1ff8:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <where+0x1>
    1ffc:	05 97       	sbiw	r24, 0x05	; 5
    1ffe:	31 f0       	breq	.+12     	; 0x200c <_Z14updateZoneflagv+0x50>
    2000:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <where>
    2004:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <where+0x1>
    2008:	06 97       	sbiw	r24, 0x06	; 6
    200a:	31 f4       	brne	.+12     	; 0x2018 <_Z14updateZoneflagv+0x5c>
		//uart0_puts("Shuttlecock arm gone \r\n");
		ShuttleCockArmGone = true;
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <ShuttleCockArmGone>
		uart3_putc('w');
    2012:	87 e7       	ldi	r24, 0x77	; 119
    2014:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <_Z10uart3_putch>
	}
	
	/*if low on golden rack pin then rack is received
	i.e if rack is received above geneva and robot is in loading zone 2*/
	if(!ShuttleCockGiven || !GoldenRackGiven){
    2018:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <ShuttleCockGiven>
    201c:	88 23       	and	r24, r24
    201e:	21 f0       	breq	.+8      	; 0x2028 <_Z14updateZoneflagv+0x6c>
    2020:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <GoldenRackGiven>
    2024:	81 11       	cpse	r24, r1
    2026:	7f c0       	rjmp	.+254    	; 0x2126 <_Z14updateZoneflagv+0x16a>
		if(sendoncetorotateGeneva && !(PINL & (1<<PL6)) && !((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && !ManualInFrontOfLZ2 && where == inLZ2){
    2028:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <sendoncetorotateGeneva>
    202c:	88 23       	and	r24, r24
    202e:	99 f0       	breq	.+38     	; 0x2056 <_Z14updateZoneflagv+0x9a>
    2030:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    2034:	86 fd       	sbrc	r24, 6
    2036:	0f c0       	rjmp	.+30     	; 0x2056 <_Z14updateZoneflagv+0x9a>
    2038:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    203c:	82 fd       	sbrc	r24, 2
    203e:	0b c0       	rjmp	.+22     	; 0x2056 <_Z14updateZoneflagv+0x9a>
    2040:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ManualInFrontOfLZ2>
    2044:	81 11       	cpse	r24, r1
    2046:	07 c0       	rjmp	.+14     	; 0x2056 <_Z14updateZoneflagv+0x9a>
    2048:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <where>
    204c:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <where+0x1>
    2050:	06 97       	sbiw	r24, 0x06	; 6
    2052:	09 f4       	brne	.+2      	; 0x2056 <_Z14updateZoneflagv+0x9a>
    2054:	3f c0       	rjmp	.+126    	; 0x20d4 <_Z14updateZoneflagv+0x118>
			uart3_putc('k');
			sendoncetorotateGeneva = false;
		}
		//uart0_puts("entered rack wala \r\n");
		if(((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && (where == inLZ2 ) && !ManualInFrontOfLZ2){
    2056:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    205a:	82 ff       	sbrs	r24, 2
    205c:	58 c0       	rjmp	.+176    	; 0x210e <_Z14updateZoneflagv+0x152>
    205e:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <where>
    2062:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <where+0x1>
    2066:	06 97       	sbiw	r24, 0x06	; 6
    2068:	09 f0       	breq	.+2      	; 0x206c <_Z14updateZoneflagv+0xb0>
    206a:	51 c0       	rjmp	.+162    	; 0x210e <_Z14updateZoneflagv+0x152>
    206c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ManualInFrontOfLZ2>
    2070:	81 11       	cpse	r24, r1
    2072:	4d c0       	rjmp	.+154    	; 0x210e <_Z14updateZoneflagv+0x152>
    2074:	35 c0       	rjmp	.+106    	; 0x20e0 <_Z14updateZoneflagv+0x124>
			GoThrowingZone2 = false;
		}
		//if rack is not above geneva but robot is in loading zone 2
		else if(where == inLZ2){
			//uart0_puts("none \r\n");
			GoldenRackGiven = false;
    2076:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <GoldenRackGiven>
			GoThrowingZone2 = true;
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <GoThrowingZone2>
			GoThrowingZone3 = false;
    2080:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <GoThrowingZone3>
			GoldenRackGiven = false;
		}
	}
	
 	
}
    2084:	50 c0       	rjmp	.+160    	; 0x2126 <_Z14updateZoneflagv+0x16a>
	if(!ShuttleCockGiven){
		//uart0_puts("entered above \r\n");
		if(!(PINL & (1<<PL6)) &&  where == inLZ1 ){
			//uart0_puts("Shuttlecock given in LZ1\r\n");
			//'w' is sent to throwing mechanism to grip shuttlecock
			uart3_putc('o');
    2086:	8f e6       	ldi	r24, 0x6F	; 111
    2088:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <_Z10uart3_putch>
			ShuttleCockGiven = true;
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <ShuttleCockGiven>
			//certain delay is needed so that robot first grabs shuttlecock and moves//
			GoThrowingZone1 = true;
    2092:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <GoThrowingZone1>
			task3 = task4 = false;
    2096:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <task4>
    209a:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <task3>
    209e:	3e c0       	rjmp	.+124    	; 0x211c <_Z14updateZoneflagv+0x160>
		}
		/*if low on shuttlecock pin then shuttlecock received
		i.e if manual robot arm is extended to give shuttlecock*/
		else if(!(SHUTTLECOCK_STATUSPORT & (1<<SHUTTLECOCK_STATUSPIN)) &&  where == inLZ2 && ManualInFrontOfLZ2){
    20a0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    20a4:	86 ff       	sbrs	r24, 6
    20a6:	9b cf       	rjmp	.-202    	; 0x1fde <_Z14updateZoneflagv+0x22>
    20a8:	bf cf       	rjmp	.-130    	; 0x2028 <_Z14updateZoneflagv+0x6c>
			//uart0_puts("Shuttlecock given in loading zone 2\r\nManual robot ahead \r\n");
			//'o' is sent to throwing mechanism to grip shuttlecock
			uart3_putc('o');
    20aa:	8f e6       	ldi	r24, 0x6F	; 111
    20ac:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <_Z10uart3_putch>
			ShuttleCockGiven = true;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <ShuttleCockGiven>
			//certain delay is needed so that robot first grabs shuttlecock and moves//
			GoThrowingZone1 = false;
    20b6:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <GoThrowingZone1>
			GoThrowingZone2 = true;
    20ba:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <GoThrowingZone2>
			task3 = task4 = task5 = true;
    20be:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <task5>
    20c2:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <task4>
    20c6:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <task3>
			task6 = task7 = false;
    20ca:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <task7>
    20ce:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <task6>
    20d2:	24 c0       	rjmp	.+72     	; 0x211c <_Z14updateZoneflagv+0x160>
	
	/*if low on golden rack pin then rack is received
	i.e if rack is received above geneva and robot is in loading zone 2*/
	if(!ShuttleCockGiven || !GoldenRackGiven){
		if(sendoncetorotateGeneva && !(PINL & (1<<PL6)) && !((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && !ManualInFrontOfLZ2 && where == inLZ2){
			uart3_putc('k');
    20d4:	8b e6       	ldi	r24, 0x6B	; 107
    20d6:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <_Z10uart3_putch>
			sendoncetorotateGeneva = false;
    20da:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <sendoncetorotateGeneva>
    20de:	bb cf       	rjmp	.-138    	; 0x2056 <_Z14updateZoneflagv+0x9a>
		}
		//uart0_puts("entered rack wala \r\n");
		if(((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && (where == inLZ2 ) && !ManualInFrontOfLZ2){
			//'f' is sent to throwing mechanism to tell to throwing zone 3 from golden rack
			task6 = task7 = true;
    20e0:	c1 e0       	ldi	r28, 0x01	; 1
    20e2:	c0 93 b2 02 	sts	0x02B2, r28	; 0x8002b2 <task7>
    20e6:	c0 93 b3 02 	sts	0x02B3, r28	; 0x8002b3 <task6>
			task8 = task9 = false;
    20ea:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <task9>
    20ee:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <task8>
			//uart0_puts("going throwing zone 3\r\n");
			uart3_putc('j');
    20f2:	8a e6       	ldi	r24, 0x6A	; 106
    20f4:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <_Z10uart3_putch>
			GoldenRackGiven = true;
    20f8:	c0 93 c3 02 	sts	0x02C3, r28	; 0x8002c3 <GoldenRackGiven>
			ShuttleCockArmGone = true;
    20fc:	c0 93 c2 02 	sts	0x02C2, r28	; 0x8002c2 <ShuttleCockArmGone>
			ShuttleCockGiven = true;
    2100:	c0 93 c4 02 	sts	0x02C4, r28	; 0x8002c4 <ShuttleCockGiven>
			GoThrowingZone3 = true;
    2104:	c0 93 be 02 	sts	0x02BE, r28	; 0x8002be <GoThrowingZone3>
			GoThrowingZone2 = false;
    2108:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <GoThrowingZone2>
    210c:	0c c0       	rjmp	.+24     	; 0x2126 <_Z14updateZoneflagv+0x16a>
		}
		//if rack is not above geneva but robot is in loading zone 2
		else if(where == inLZ2){
    210e:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <where>
    2112:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <where+0x1>
    2116:	06 97       	sbiw	r24, 0x06	; 6
    2118:	31 f4       	brne	.+12     	; 0x2126 <_Z14updateZoneflagv+0x16a>
    211a:	ad cf       	rjmp	.-166    	; 0x2076 <_Z14updateZoneflagv+0xba>
			ShuttleCockGiven = false;
		}
	}
	//if shuttlecock given and arm is gone send 'w' to throwing mechanism to give to gripper
	//and move robot
	if(ShuttleCockGiven && (PINL & (1<<PL6)) &&  (where == inLZ1 || where == inLZ2) ){
    211c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    2120:	86 fd       	sbrc	r24, 6
    2122:	68 cf       	rjmp	.-304    	; 0x1ff4 <_Z14updateZoneflagv+0x38>
    2124:	7d cf       	rjmp	.-262    	; 0x2020 <_Z14updateZoneflagv+0x64>
			GoldenRackGiven = false;
		}
	}
	
 	
}
    2126:	cf 91       	pop	r28
    2128:	08 95       	ret

0000212a <_Z18gorockthegamefieldv>:
// 				if(task7){uart0_puts("7");}
// 				if(task8){uart0_puts("8");}
	
	

	if((where == inLZ1 || where == inLZ2) && robotState == notmoving){
    212a:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <where>
    212e:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <where+0x1>
    2132:	05 97       	sbiw	r24, 0x05	; 5
    2134:	31 f0       	breq	.+12     	; 0x2142 <_Z18gorockthegamefieldv+0x18>
    2136:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <where>
    213a:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <where+0x1>
    213e:	06 97       	sbiw	r24, 0x06	; 6
    2140:	89 f5       	brne	.+98     	; 0x21a4 <_Z18gorockthegamefieldv+0x7a>
    2142:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2146:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    214a:	08 97       	sbiw	r24, 0x08	; 8
    214c:	59 f5       	brne	.+86     	; 0x21a4 <_Z18gorockthegamefieldv+0x7a>
    214e:	57 c4       	rjmp	.+2222   	; 0x29fe <__stack+0x7ff>
		
		/*if the robot is in loading zone 1 after completing task3 and task4 
		but yet to complete task5*/ 
		if(task4 && !task5){
    2150:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <task5>
    2154:	81 11       	cpse	r24, r1
    2156:	09 c0       	rjmp	.+18     	; 0x216a <_Z18gorockthegamefieldv+0x40>
			/*if there is no manual robot infront of automatic robot*/
			if((ZONE_STATUSPORT & (1<<ZONE_STATUSPIN)) && !alwaysTZ1){
    2158:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    215c:	84 ff       	sbrs	r24, 4
    215e:	54 c4       	rjmp	.+2216   	; 0x2a08 <__stack+0x809>
    2160:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <alwaysTZ1>
    2164:	81 11       	cpse	r24, r1
    2166:	50 c4       	rjmp	.+2208   	; 0x2a08 <__stack+0x809>
    2168:	58 c4       	rjmp	.+2224   	; 0x2a1a <__stack+0x81b>
				task3 = task4 = false;
				updateZoneflag();
				//holdposition();
			}	
		}
		else if(task6 && task7 ){
    216a:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <task6>
    216e:	88 23       	and	r24, r24
    2170:	b9 f0       	breq	.+46     	; 0x21a0 <_Z18gorockthegamefieldv+0x76>
    2172:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <task7>
    2176:	88 23       	and	r24, r24
    2178:	99 f0       	breq	.+38     	; 0x21a0 <_Z18gorockthegamefieldv+0x76>
			if((ZONE_STATUSPORT & (1<< ZONE_STATUSPIN)) && !alwaysTZ2){
    217a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    217e:	84 ff       	sbrs	r24, 4
    2180:	65 c4       	rjmp	.+2250   	; 0x2a4c <__stack+0x84d>
    2182:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <alwaysTZ2>
    2186:	81 11       	cpse	r24, r1
    2188:	61 c4       	rjmp	.+2242   	; 0x2a4c <__stack+0x84d>
    218a:	55 c4       	rjmp	.+2218   	; 0x2a36 <__stack+0x837>
				ManualInFrontOfLZ2 = false;
				updateZoneflag();
				Hold_Position();
			}
			else if (ManualInFrontOfLZ2){
				task6 = task7 = false;
    218c:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <task7>
    2190:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <task6>
				xJunctionMeetFromTZ2 = false;
    2194:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <xJunctionMeetFromTZ2>
    2198:	05 c0       	rjmp	.+10     	; 0x21a4 <_Z18gorockthegamefieldv+0x7a>
			}
			else{
				updateZoneflag();
    219a:	10 df       	rcall	.-480    	; 0x1fbc <_Z14updateZoneflagv>
				Hold_Position();
    219c:	e1 de       	rcall	.-574    	; 0x1f60 <_Z13Hold_Positionv>
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <_Z18gorockthegamefieldv+0x7a>
			}
		}
		
		/*if the robot is in loading zone 1 or loading zone 2  otherwise */
		else{
			updateZoneflag();
    21a0:	0d df       	rcall	.-486    	; 0x1fbc <_Z14updateZoneflagv>
    21a2:	de de       	rcall	.-580    	; 0x1f60 <_Z13Hold_Positionv>
			Hold_Position();
    21a4:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <task1>
		}
	}
	
	
	////move from start zone to corner of loading zone
	if(!task1 && where == inStart_point && (normalGame||alwaysTZ1)){	
    21a8:	81 11       	cpse	r24, r1
    21aa:	fb c5       	rjmp	.+3062   	; 0x2da2 <__stack+0xba3>
    21ac:	20 91 b9 02 	lds	r18, 0x02B9	; 0x8002b9 <where>
    21b0:	30 91 ba 02 	lds	r19, 0x02BA	; 0x8002ba <where+0x1>
    21b4:	23 2b       	or	r18, r19
    21b6:	09 f0       	breq	.+2      	; 0x21ba <_Z18gorockthegamefieldv+0x90>
    21b8:	ee c5       	rjmp	.+3036   	; 0x2d96 <__stack+0xb97>
    21ba:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <normalGame>
    21be:	91 11       	cpse	r25, r1
    21c0:	4a c4       	rjmp	.+2196   	; 0x2a56 <__stack+0x857>
    21c2:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <alwaysTZ1>
    21c6:	91 11       	cpse	r25, r1
    21c8:	46 c4       	rjmp	.+2188   	; 0x2a56 <__stack+0x857>
    21ca:	e5 c5       	rjmp	.+3018   	; 0x2d96 <__stack+0xb97>
    21cc:	78 94       	sei
    21ce:	e8 e6       	ldi	r30, 0x68	; 104
	checkRobotMotion();
	
}

inline void linetrackerXjunctionWatch(void){
	sei();
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
	PCICR |= (1<<PCIE0);
    21d2:	80 81       	ld	r24, Z
    21d4:	81 60       	ori	r24, 0x01	; 1
    21d6:	80 83       	st	Z, r24
    21d8:	eb e6       	ldi	r30, 0x6B	; 107
    21da:	f0 e0       	ldi	r31, 0x00	; 0
	PCMSK0 |= (1<<PCINT4);
    21dc:	80 81       	ld	r24, Z
    21de:	80 61       	ori	r24, 0x10	; 16
    21e0:	80 83       	st	Z, r24
    21e2:	2e c1       	rjmp	.+604    	; 0x2440 <__stack+0x241>
    21e4:	20 91 a3 04 	lds	r18, 0x04A3	; 0x8004a3 <directlyTZ3>
			linetrackerXjunctionWatch();
			//uart0_puts("int on");
		}

	}
	else if((directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && !task1){
    21e8:	21 11       	cpse	r18, r1
    21ea:	08 c0       	rjmp	.+16     	; 0x21fc <_Z18gorockthegamefieldv+0xd2>
    21ec:	20 91 a2 04 	lds	r18, 0x04A2	; 0x8004a2 <LZ2ForTZ3>
    21f0:	21 11       	cpse	r18, r1
    21f2:	04 c0       	rjmp	.+8      	; 0x21fc <_Z18gorockthegamefieldv+0xd2>
    21f4:	20 91 a1 04 	lds	r18, 0x04A1	; 0x8004a1 <alwaysTZ2>
    21f8:	22 23       	and	r18, r18
    21fa:	89 f1       	breq	.+98     	; 0x225e <__stack+0x5f>
    21fc:	81 11       	cpse	r24, r1
    21fe:	32 c0       	rjmp	.+100    	; 0x2264 <__stack+0x65>
    2200:	48 ec       	ldi	r20, 0xC8	; 200
    2202:	50 e0       	ldi	r21, 0x00	; 0
		movx((Throwingzone2.x),Front,STARTZONEtoCORNER);
    2204:	62 e0       	ldi	r22, 0x02	; 2
    2206:	70 e0       	ldi	r23, 0x00	; 0
    2208:	80 e9       	ldi	r24, 0x90	; 144
    220a:	9a e1       	ldi	r25, 0x1A	; 26
    220c:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <_Z4movxiij>
    2210:	87 e0       	ldi	r24, 0x07	; 7
    2212:	90 e0       	ldi	r25, 0x00	; 0
		robotState = moving;
    2214:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2218:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    221c:	86 ea       	ldi	r24, 0xA6	; 166
    221e:	92 e0       	ldi	r25, 0x02	; 2
		if(abs(encoderX.getdistance()) >= 6600){
    2220:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    2224:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
    2228:	9b 01       	movw	r18, r22
    222a:	77 23       	and	r23, r23
    222c:	24 f4       	brge	.+8      	; 0x2236 <__stack+0x37>
    222e:	22 27       	eor	r18, r18
    2230:	33 27       	eor	r19, r19
    2232:	26 1b       	sub	r18, r22
    2234:	37 0b       	sbc	r19, r23
    2236:	28 3c       	cpi	r18, 0xC8	; 200
    2238:	39 41       	sbci	r19, 0x19	; 25
    223a:	0c f4       	brge	.+2      	; 0x223e <__stack+0x3f>
    223c:	01 c1       	rjmp	.+514    	; 0x2440 <__stack+0x241>
    223e:	87 e5       	ldi	r24, 0x57	; 87
    2240:	92 e0       	ldi	r25, 0x02	; 2
			uart0_puts("interrupt on\t");
    2242:	0e 94 65 1d 	call	0x3aca	; 0x3aca <_Z10uart0_putsPKc>
    2246:	78 94       	sei
    2248:	e8 e6       	ldi	r30, 0x68	; 104
	checkRobotMotion();
	
}

inline void linetrackerXjunctionWatch(void){
	sei();
    224a:	f0 e0       	ldi	r31, 0x00	; 0
	PCICR |= (1<<PCIE0);
    224c:	80 81       	ld	r24, Z
    224e:	81 60       	ori	r24, 0x01	; 1
    2250:	80 83       	st	Z, r24
    2252:	eb e6       	ldi	r30, 0x6B	; 107
    2254:	f0 e0       	ldi	r31, 0x00	; 0
	PCMSK0 |= (1<<PCINT4);
    2256:	80 81       	ld	r24, Z
    2258:	80 61       	ori	r24, 0x10	; 16
    225a:	80 83       	st	Z, r24
    225c:	f1 c0       	rjmp	.+482    	; 0x2440 <__stack+0x241>
    225e:	88 23       	and	r24, r24
    2260:	09 f4       	brne	.+2      	; 0x2264 <__stack+0x65>
			linetrackerXjunctionWatch();
		}
	}
	
	///move from corner to loading zone1 if task1 is completed and task2 not completed
	else if(task1 && !task2){	
    2262:	7b c0       	rjmp	.+246    	; 0x235a <__stack+0x15b>
    2264:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <task2>
    2268:	81 11       	cpse	r24, r1
    226a:	38 c0       	rjmp	.+112    	; 0x22dc <__stack+0xdd>
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	90 e0       	ldi	r25, 0x00	; 0
		where = inFirstloadingCorner;
    2270:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <where+0x1>
    2274:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <where>
    2278:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <startingAtFront>
		startingAtFront = false;
    227c:	ed e4       	ldi	r30, 0x4D	; 77
    227e:	f3 e0       	ldi	r31, 0x03	; 3
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	a0 e0       	ldi	r26, 0x00	; 0
    2286:	b0 e4       	ldi	r27, 0x40	; 64
    2288:	85 8b       	std	Z+21, r24	; 0x15
    228a:	96 8b       	std	Z+22, r25	; 0x16
    228c:	a7 8b       	std	Z+23, r26	; 0x17
    228e:	b0 8f       	std	Z+24, r27	; 0x18
    2290:	11 8e       	std	Z+25, r1	; 0x19
    2292:	12 8e       	std	Z+26, r1	; 0x1a
		ki = i;
    2294:	13 8e       	std	Z+27, r1	; 0x1b
    2296:	14 8e       	std	Z+28, r1	; 0x1c
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	90 e0       	ldi	r25, 0x00	; 0
		kd = d;
    229c:	a0 ef       	ldi	r26, 0xF0	; 240
    229e:	b1 e4       	ldi	r27, 0x41	; 65
    22a0:	85 8f       	std	Z+29, r24	; 0x1d
    22a2:	96 8f       	std	Z+30, r25	; 0x1e
    22a4:	a7 8f       	std	Z+31, r26	; 0x1f
    22a6:	b0 a3       	std	Z+32, r27	; 0x20
    22a8:	87 e0       	ldi	r24, 0x07	; 7
    22aa:	90 e0       	ldi	r25, 0x00	; 0
		compass.setPid(2.0,0,30);
		//uart0_puts("moving aheead \r\n");
		robotState = moving;
    22ac:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    22b0:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    22b4:	eb e6       	ldi	r30, 0x6B	; 107
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
	sei();
	PCICR |= (1<<PCIE2);
	PCMSK2 |= (1<<PCINT23);
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
    22b8:	80 81       	ld	r24, Z
    22ba:	8f 7e       	andi	r24, 0xEF	; 239
    22bc:	80 83       	st	Z, r24
    22be:	78 94       	sei
    22c0:	e8 e6       	ldi	r30, 0x68	; 104
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
	PCICR |= (1<<PCIE2);
    22c4:	80 81       	ld	r24, Z
    22c6:	84 60       	ori	r24, 0x04	; 4
    22c8:	80 83       	st	Z, r24
    22ca:	ed e6       	ldi	r30, 0x6D	; 109
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
	PCMSK2 |= (1<<PCINT23);
    22ce:	80 81       	ld	r24, Z
    22d0:	80 68       	ori	r24, 0x80	; 128
    22d2:	80 83       	st	Z, r24
    22d4:	88 e2       	ldi	r24, 0x28	; 40
		linetrackerXjunctionWatchOff();
		linetrackerYjunctionWatch();
		movYForwardSlow(CORNERtoLZ1);
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	ab dc       	rcall	.-1706   	; 0x1c30 <_Z15movYForwardSlowj>
    22da:	b2 c0       	rjmp	.+356    	; 0x2440 <__stack+0x241>
    22dc:	20 91 b9 02 	lds	r18, 0x02B9	; 0x8002b9 <where>
		//MovY_Slow(1000, Front, CORNERtoLZ1);
		//movYForwardSlow(CORNERtoLZ1);
	}
	/*if task2 is completed and robot just reached loading zone 1*/
	else if(task1 && task2 && where == inFirstloadingCorner && (robotState == moving) && (normalGame||alwaysTZ1)){
    22e0:	30 91 ba 02 	lds	r19, 0x02BA	; 0x8002ba <where+0x1>
    22e4:	21 30       	cpi	r18, 0x01	; 1
    22e6:	31 05       	cpc	r19, r1
    22e8:	09 f0       	breq	.+2      	; 0x22ec <__stack+0xed>
    22ea:	4c c5       	rjmp	.+2712   	; 0x2d84 <__stack+0xb85>
    22ec:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <robotState>
    22f0:	30 91 06 02 	lds	r19, 0x0206	; 0x800206 <robotState+0x1>
    22f4:	27 30       	cpi	r18, 0x07	; 7
    22f6:	31 05       	cpc	r19, r1
    22f8:	09 f0       	breq	.+2      	; 0x22fc <__stack+0xfd>
    22fa:	44 c5       	rjmp	.+2696   	; 0x2d84 <__stack+0xb85>
    22fc:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <normalGame>
    2300:	81 11       	cpse	r24, r1
    2302:	05 c0       	rjmp	.+10     	; 0x230e <__stack+0x10f>
    2304:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <alwaysTZ1>
    2308:	88 23       	and	r24, r24
    230a:	09 f4       	brne	.+2      	; 0x230e <__stack+0x10f>
    230c:	3b c5       	rjmp	.+2678   	; 0x2d84 <__stack+0xb85>
    230e:	85 e0       	ldi	r24, 0x05	; 5
    2310:	90 e0       	ldi	r25, 0x00	; 0
		where = inLZ1;
    2312:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <where+0x1>
    2316:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <where>
    231a:	88 e6       	ldi	r24, 0x68	; 104
    231c:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <_Z10uart3_putch>
		uart3_putc('h');
    2320:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z10getYawGY88v>
		//uart0_puts("in loading zone 1\r\n");
		compass.SETPOINT = getYawGY88();
    2324:	90 93 5c 03 	sts	0x035C, r25	; 0x80035c <compass+0xf>
    2328:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <compass+0xe>
    232c:	88 e0       	ldi	r24, 0x08	; 8
    232e:	90 e0       	ldi	r25, 0x00	; 0
		robotState = notmoving;
    2330:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2334:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2338:	ed e6       	ldi	r30, 0x6D	; 109
    233a:	f0 e0       	ldi	r31, 0x00	; 0
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT23);
    233c:	80 81       	ld	r24, Z
    233e:	8f 77       	andi	r24, 0x7F	; 127
    2340:	80 83       	st	Z, r24
    2342:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
		linetrackerYjunctionWatchOff();
		BrakeMotor();
    2346:	0c de       	rcall	.-1000   	; 0x1f60 <_Z13Hold_Positionv>
		Hold_Position();
    2348:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <encoderX+0x1>
		inline void resetCount(){count_encoder = 0;};
    234c:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <encoderX>
    2350:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <__data_end+0x1>
    2354:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <__data_end>
    2358:	73 c0       	rjmp	.+230    	; 0x2440 <__stack+0x241>
    235a:	20 91 b9 02 	lds	r18, 0x02B9	; 0x8002b9 <where>
		encoderX.resetCount();
		encoderY.resetCount();
	}
	else if(where == inFirstloadingCorner && task2 && (directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && robotState == moving){
    235e:	30 91 ba 02 	lds	r19, 0x02BA	; 0x8002ba <where+0x1>
    2362:	21 30       	cpi	r18, 0x01	; 1
    2364:	31 05       	cpc	r19, r1
    2366:	09 f0       	breq	.+2      	; 0x236a <__stack+0x16b>
    2368:	6b c0       	rjmp	.+214    	; 0x2440 <__stack+0x241>
    236a:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <task2>
    236e:	88 23       	and	r24, r24
    2370:	09 f4       	brne	.+2      	; 0x2374 <__stack+0x175>
    2372:	66 c0       	rjmp	.+204    	; 0x2440 <__stack+0x241>
    2374:	91 11       	cpse	r25, r1
    2376:	0d c0       	rjmp	.+26     	; 0x2392 <__stack+0x193>
    2378:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <directlyTZ3>
    237c:	81 11       	cpse	r24, r1
    237e:	09 c0       	rjmp	.+18     	; 0x2392 <__stack+0x193>
    2380:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <LZ2ForTZ3>
    2384:	81 11       	cpse	r24, r1
    2386:	05 c0       	rjmp	.+10     	; 0x2392 <__stack+0x193>
    2388:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <alwaysTZ2>
    238c:	88 23       	and	r24, r24
    238e:	09 f4       	brne	.+2      	; 0x2392 <__stack+0x193>
    2390:	57 c0       	rjmp	.+174    	; 0x2440 <__stack+0x241>
    2392:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2396:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    239a:	07 97       	sbiw	r24, 0x07	; 7
    239c:	09 f0       	breq	.+2      	; 0x23a0 <__stack+0x1a1>
    239e:	50 c0       	rjmp	.+160    	; 0x2440 <__stack+0x241>
    23a0:	90 c3       	rjmp	.+1824   	; 0x2ac2 <__stack+0x8c3>
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <task5>
		robotState = notmoving;
		BrakeMotor();
		encoderX.resetCount();
		encoderY.resetCount();
		if(directlyLZ2){
			task1 = task2 = task3 = task4 = task5 = true;
    23a8:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <task4>
    23ac:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <task3>
    23b0:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <task2>
    23b4:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <task1>
    23b8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <ManualInFrontOfLZ2>
			ManualInFrontOfLZ2 = true;
    23bc:	41 c0       	rjmp	.+130    	; 0x2440 <__stack+0x241>
    23be:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <directlyTZ3>
		}
		else if(directlyTZ3){
    23c2:	88 23       	and	r24, r24
    23c4:	b1 f0       	breq	.+44     	; 0x23f2 <__stack+0x1f3>
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <task7>
			task1 = task2 = task3 = task4 = task5 = task6 = task7 = true;
    23cc:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <task6>
    23d0:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <task5>
    23d4:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <task4>
    23d8:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <task3>
    23dc:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <task2>
    23e0:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <task1>
    23e4:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <ShuttleCockArmGone>
			ShuttleCockArmGone = true;
    23e8:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <ShuttleCockGiven>
			ShuttleCockGiven = true;
    23ec:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <GoThrowingZone3>
			GoThrowingZone3 = true;
    23f0:	31 c0       	rjmp	.+98     	; 0x2454 <__stack+0x255>
    23f2:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <LZ2ForTZ3>
		}
		else if(LZ2ForTZ3){
    23f6:	88 23       	and	r24, r24
    23f8:	91 f0       	breq	.+36     	; 0x241e <__stack+0x21f>
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <task7>
			task1 = task2 = task3 = task4 = task5 = task6 = task7 = true;
    2400:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <task6>
    2404:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <task5>
    2408:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <task4>
    240c:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <task3>
    2410:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <task2>
    2414:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <task1>
    2418:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <ManualInFrontOfLZ2>
			ManualInFrontOfLZ2 = false;
    241c:	11 c0       	rjmp	.+34     	; 0x2440 <__stack+0x241>
    241e:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <alwaysTZ2>
		}
		else if(alwaysTZ2){
    2422:	88 23       	and	r24, r24
    2424:	69 f0       	breq	.+26     	; 0x2440 <__stack+0x241>
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <task5>
			task1 = task2 = task3 = task4 = task5 = true;
    242c:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <task4>
    2430:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <task3>
    2434:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <task2>
    2438:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <task1>
    243c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <ManualInFrontOfLZ2>
			ManualInFrontOfLZ2 = true;
    2440:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <ShuttleCockGiven>
		}
	}
	/*if Shuttlecock is given*/
	if(ShuttleCockGiven && ShuttleCockArmGone)
    2444:	88 23       	and	r24, r24
    2446:	09 f4       	brne	.+2      	; 0x244a <__stack+0x24b>
    2448:	b9 c4       	rjmp	.+2418   	; 0x2dbc <__stack+0xbbd>
    244a:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <ShuttleCockArmGone>
    244e:	88 23       	and	r24, r24
    2450:	09 f4       	brne	.+2      	; 0x2454 <__stack+0x255>
    2452:	b4 c4       	rjmp	.+2408   	; 0x2dbc <__stack+0xbbd>
    2454:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <GoThrowingZone1>
	{
		/*if manual robot is ahead of automatic robot and automatic robot
		has not completed task3*/
			if(GoThrowingZone1 && !task3 && where == inLZ1){
    2458:	88 23       	and	r24, r24
    245a:	09 f4       	brne	.+2      	; 0x245e <__stack+0x25f>
    245c:	89 c3       	rjmp	.+1810   	; 0x2b70 <__stack+0x971>
    245e:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <task3>
    2462:	81 11       	cpse	r24, r1
    2464:	13 c0       	rjmp	.+38     	; 0x248c <__stack+0x28d>
    2466:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <where>
    246a:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <where+0x1>
    246e:	05 97       	sbiw	r24, 0x05	; 5
    2470:	f1 f4       	brne	.+60     	; 0x24ae <__stack+0x2af>
    2472:	49 c3       	rjmp	.+1682   	; 0x2b06 <__stack+0x907>
    2474:	78 94       	sei
    2476:	e8 e6       	ldi	r30, 0x68	; 104
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    2478:	f0 e0       	ldi	r31, 0x00	; 0
	PCICR |= (1<<PCIE2);
    247a:	80 81       	ld	r24, Z
    247c:	84 60       	ori	r24, 0x04	; 4
    247e:	80 83       	st	Z, r24
    2480:	ed e6       	ldi	r30, 0x6D	; 109
    2482:	f0 e0       	ldi	r31, 0x00	; 0
	PCMSK2 |= (1<<PCINT23);
    2484:	80 81       	ld	r24, Z
    2486:	80 68       	ori	r24, 0x80	; 128
    2488:	80 83       	st	Z, r24
    248a:	11 c0       	rjmp	.+34     	; 0x24ae <__stack+0x2af>
    248c:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <task4>
					//uart0_puts("INT ON");
				}
				//uart0_puts("\r\n");
			}
			/* if task3 is completed and robot just reached throwingzone 1 then*/
			else if(task3 && !task4 && where == inLZ1 && robotState == moving){
    2490:	81 11       	cpse	r24, r1
    2492:	0d c0       	rjmp	.+26     	; 0x24ae <__stack+0x2af>
    2494:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <where>
    2498:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <where+0x1>
    249c:	05 97       	sbiw	r24, 0x05	; 5
    249e:	39 f4       	brne	.+14     	; 0x24ae <__stack+0x2af>
    24a0:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    24a4:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    24a8:	07 97       	sbiw	r24, 0x07	; 7
    24aa:	09 f4       	brne	.+2      	; 0x24ae <__stack+0x2af>
    24ac:	67 c3       	rjmp	.+1742   	; 0x2b7c <__stack+0x97d>
    24ae:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <where>
				robotState = notmoving;
				
			}
			/* if in throwing zone 1 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ1 && robotState == notmoving){
    24b2:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <where+0x1>
    24b6:	02 97       	sbiw	r24, 0x02	; 2
    24b8:	d9 f4       	brne	.+54     	; 0x24f0 <__stack+0x2f1>
    24ba:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    24be:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    24c2:	08 97       	sbiw	r24, 0x08	; 8
    24c4:	a9 f4       	brne	.+42     	; 0x24f0 <__stack+0x2f1>
    24c6:	76 c3       	rjmp	.+1772   	; 0x2bb4 <__stack+0x9b5>
    24c8:	81 e3       	ldi	r24, 0x31	; 49
    24ca:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <_Z10uart3_putch>
				//uart3_puts("Throwing \r\n");
				Hold_Position();

				if(_b_Transmit_once)	//Stable_Robot() && 
				{	
					uart3_putc('1');
    24ce:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <_b_Transmit_once>
					//uart3_puts("Job Done\r\n\n");
					_b_Transmit_once = false;
    24d2:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <_Z10uart3_getcv>
				}
				
				receiveAck = uart3_getc();
    24d6:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <receiveAck>
    24da:	87 36       	cpi	r24, 0x67	; 103
    24dc:	49 f4       	brne	.+18     	; 0x24f0 <__stack+0x2f1>
				if(receiveAck == 'g'){
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <backtoLZ1>
					backtoLZ1 = true;
    24e4:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <GoThrowingZone1>
					GoThrowingZone1 = false;
    24e8:	80 e2       	ldi	r24, 0x20	; 32
    24ea:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <receiveAck>
					receiveAck = ' ';
    24ee:	05 c0       	rjmp	.+10     	; 0x24fa <__stack+0x2fb>
    24f0:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <backtoLZ1>
				}
			}
			/*if acknowledge received from throwing mechanism after throwing then back to loading zone 2*/
			if(backtoLZ1 && task3 && !task4){
    24f4:	88 23       	and	r24, r24
    24f6:	09 f4       	brne	.+2      	; 0x24fa <__stack+0x2fb>
    24f8:	49 c0       	rjmp	.+146    	; 0x258c <__stack+0x38d>
    24fa:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <task3>
    24fe:	88 23       	and	r24, r24
    2500:	09 f4       	brne	.+2      	; 0x2504 <__stack+0x305>
    2502:	44 c0       	rjmp	.+136    	; 0x258c <__stack+0x38d>
    2504:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <task4>
    2508:	81 11       	cpse	r24, r1
    250a:	45 c0       	rjmp	.+138    	; 0x2596 <__stack+0x397>
    250c:	ed e4       	ldi	r30, 0x4D	; 77
    250e:	f3 e0       	ldi	r31, 0x03	; 3
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	a0 e0       	ldi	r26, 0x00	; 0
    2516:	b0 e4       	ldi	r27, 0x40	; 64
    2518:	85 8b       	std	Z+21, r24	; 0x15
    251a:	96 8b       	std	Z+22, r25	; 0x16
    251c:	a7 8b       	std	Z+23, r26	; 0x17
    251e:	b0 8f       	std	Z+24, r27	; 0x18
    2520:	11 8e       	std	Z+25, r1	; 0x19
    2522:	12 8e       	std	Z+26, r1	; 0x1a
		ki = i;
    2524:	13 8e       	std	Z+27, r1	; 0x1b
    2526:	14 8e       	std	Z+28, r1	; 0x1c
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
		kd = d;
    252c:	a0 ef       	ldi	r26, 0xF0	; 240
    252e:	b1 e4       	ldi	r27, 0x41	; 65
    2530:	85 8f       	std	Z+29, r24	; 0x1d
    2532:	96 8f       	std	Z+30, r25	; 0x1e
    2534:	a7 8f       	std	Z+31, r26	; 0x1f
    2536:	b0 a3       	std	Z+32, r27	; 0x20
    2538:	44 e6       	ldi	r20, 0x64	; 100
    253a:	50 e0       	ldi	r21, 0x00	; 0
				compass.setPid(2.0,0,30);
				//uart0_puts("Returning from tz1 \t");
				Move_Yaxis(Throwingzone1.y+25, Back, LZ1toTZ1);
    253c:	63 e0       	ldi	r22, 0x03	; 3
    253e:	70 e0       	ldi	r23, 0x00	; 0
    2540:	85 e8       	ldi	r24, 0x85	; 133
    2542:	97 e0       	ldi	r25, 0x07	; 7
    2544:	a5 db       	rcall	.-2230   	; 0x1c90 <_Z10Move_Yaxisiij>
    2546:	87 e0       	ldi	r24, 0x07	; 7
    2548:	90 e0       	ldi	r25, 0x00	; 0
				//movy(Throwingzone1.y, Back,TZ1toLZ1);
				robotState = moving;
    254a:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    254e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2552:	8e e9       	ldi	r24, 0x9E	; 158
    2554:	92 e0       	ldi	r25, 0x02	; 2
				if(abs(encoderY.getdistance()) >= 1200){
    2556:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    255a:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
    255e:	9b 01       	movw	r18, r22
    2560:	77 23       	and	r23, r23
    2562:	24 f4       	brge	.+8      	; 0x256c <__stack+0x36d>
    2564:	22 27       	eor	r18, r18
    2566:	33 27       	eor	r19, r19
    2568:	26 1b       	sub	r18, r22
    256a:	37 0b       	sbc	r19, r23
    256c:	20 3b       	cpi	r18, 0xB0	; 176
    256e:	34 40       	sbci	r19, 0x04	; 4
    2570:	0c f4       	brge	.+2      	; 0x2574 <__stack+0x375>
    2572:	75 c0       	rjmp	.+234    	; 0x265e <__stack+0x45f>
    2574:	78 94       	sei
    2576:	e8 e6       	ldi	r30, 0x68	; 104
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    2578:	f0 e0       	ldi	r31, 0x00	; 0
	PCICR |= (1<<PCIE2);
    257a:	80 81       	ld	r24, Z
    257c:	84 60       	ori	r24, 0x04	; 4
    257e:	80 83       	st	Z, r24
    2580:	ed e6       	ldi	r30, 0x6D	; 109
    2582:	f0 e0       	ldi	r31, 0x00	; 0
	PCMSK2 |= (1<<PCINT23);
    2584:	80 81       	ld	r24, Z
    2586:	80 68       	ori	r24, 0x80	; 128
    2588:	80 83       	st	Z, r24
    258a:	69 c0       	rjmp	.+210    	; 0x265e <__stack+0x45f>
    258c:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <task4>
				//uart0_puts("\r\n");
			
			}
			/*if after returning from throwing zone1, junction on line is detected i.e loading zone1 
			then stop and wait for communication*/
			else if(task4 && robotState == moving && where == inTZ1){
    2590:	88 23       	and	r24, r24
    2592:	09 f4       	brne	.+2      	; 0x2596 <__stack+0x397>
    2594:	16 c3       	rjmp	.+1580   	; 0x2bc2 <__stack+0x9c3>
    2596:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    259a:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    259e:	07 97       	sbiw	r24, 0x07	; 7
    25a0:	09 f0       	breq	.+2      	; 0x25a4 <__stack+0x3a5>
    25a2:	0f c3       	rjmp	.+1566   	; 0x2bc2 <__stack+0x9c3>
    25a4:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <where>
    25a8:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <where+0x1>
    25ac:	02 97       	sbiw	r24, 0x02	; 2
    25ae:	09 f0       	breq	.+2      	; 0x25b2 <__stack+0x3b3>
    25b0:	08 c3       	rjmp	.+1552   	; 0x2bc2 <__stack+0x9c3>
    25b2:	0c c3       	rjmp	.+1560   	; 0x2bcc <__stack+0x9cd>
    25b4:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <task5>
				ShuttleCockGiven = false;
				ShuttleCockArmGone = false;
				backtoLZ1 = false;
			}
			/*if there is no manual robot ahead of automatic robot go to loading zone 2*/
			else if(gotoLZ2 && !task5){
    25b8:	81 11       	cpse	r24, r1
    25ba:	44 c0       	rjmp	.+136    	; 0x2644 <__stack+0x445>
    25bc:	ed e4       	ldi	r30, 0x4D	; 77
    25be:	f3 e0       	ldi	r31, 0x03	; 3
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	a0 e0       	ldi	r26, 0x00	; 0
    25c6:	b0 e4       	ldi	r27, 0x40	; 64
    25c8:	85 8b       	std	Z+21, r24	; 0x15
    25ca:	96 8b       	std	Z+22, r25	; 0x16
    25cc:	a7 8b       	std	Z+23, r26	; 0x17
    25ce:	b0 8f       	std	Z+24, r27	; 0x18
    25d0:	11 8e       	std	Z+25, r1	; 0x19
    25d2:	12 8e       	std	Z+26, r1	; 0x1a
		ki = i;
    25d4:	13 8e       	std	Z+27, r1	; 0x1b
    25d6:	14 8e       	std	Z+28, r1	; 0x1c
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	90 e0       	ldi	r25, 0x00	; 0
		kd = d;
    25dc:	a0 ef       	ldi	r26, 0xF0	; 240
    25de:	b1 e4       	ldi	r27, 0x41	; 65
    25e0:	85 8f       	std	Z+29, r24	; 0x1d
    25e2:	96 8f       	std	Z+30, r25	; 0x1e
    25e4:	a7 8f       	std	Z+31, r26	; 0x1f
    25e6:	b0 a3       	std	Z+32, r27	; 0x20
    25e8:	44 e6       	ldi	r20, 0x64	; 100
    25ea:	50 e0       	ldi	r21, 0x00	; 0
				//uart0_puts("heading loading zone 2\t");
				compass.setPid(2.0,0,30);
				movx(2100,Front,LZ1toLZ2);
    25ec:	62 e0       	ldi	r22, 0x02	; 2
    25ee:	70 e0       	ldi	r23, 0x00	; 0
    25f0:	84 e3       	ldi	r24, 0x34	; 52
    25f2:	98 e0       	ldi	r25, 0x08	; 8
    25f4:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <_Z4movxiij>
    25f8:	87 e0       	ldi	r24, 0x07	; 7
    25fa:	90 e0       	ldi	r25, 0x00	; 0
				robotState = moving;
    25fc:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2600:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2604:	86 ea       	ldi	r24, 0xA6	; 166
    2606:	92 e0       	ldi	r25, 0x02	; 2
				if(abs(encoderX.getdistance()) >= 1900){
    2608:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    260c:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
    2610:	9b 01       	movw	r18, r22
    2612:	77 23       	and	r23, r23
    2614:	24 f4       	brge	.+8      	; 0x261e <__stack+0x41f>
    2616:	22 27       	eor	r18, r18
    2618:	33 27       	eor	r19, r19
    261a:	26 1b       	sub	r18, r22
    261c:	37 0b       	sbc	r19, r23
    261e:	2c 36       	cpi	r18, 0x6C	; 108
    2620:	37 40       	sbci	r19, 0x07	; 7
    2622:	ec f0       	brlt	.+58     	; 0x265e <__stack+0x45f>
    2624:	78 94       	sei
    2626:	e8 e6       	ldi	r30, 0x68	; 104
	checkRobotMotion();
	
}

inline void linetrackerXjunctionWatch(void){
	sei();
    2628:	f0 e0       	ldi	r31, 0x00	; 0
	PCICR |= (1<<PCIE0);
    262a:	80 81       	ld	r24, Z
    262c:	81 60       	ori	r24, 0x01	; 1
    262e:	80 83       	st	Z, r24
    2630:	eb e6       	ldi	r30, 0x6B	; 107
    2632:	f0 e0       	ldi	r31, 0x00	; 0
	PCMSK0 |= (1<<PCINT4);
    2634:	80 81       	ld	r24, Z
    2636:	80 61       	ori	r24, 0x10	; 16
    2638:	80 83       	st	Z, r24
    263a:	11 c0       	rjmp	.+34     	; 0x265e <__stack+0x45f>
    263c:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <task5>
				}
				//uart0_puts("\r\n");
			
			}
			/*if X junction near loading zone 2 is detected and robot was previously on loading zone 1*/
			else if(task5 && robotState == moving && where == inLZ1){
    2640:	88 23       	and	r24, r24
    2642:	69 f0       	breq	.+26     	; 0x265e <__stack+0x45f>
    2644:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2648:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    264c:	07 97       	sbiw	r24, 0x07	; 7
    264e:	39 f4       	brne	.+14     	; 0x265e <__stack+0x45f>
    2650:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <where>
    2654:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <where+0x1>
    2658:	05 97       	sbiw	r24, 0x05	; 5
    265a:	09 f4       	brne	.+2      	; 0x265e <__stack+0x45f>
    265c:	d9 c2       	rjmp	.+1458   	; 0x2c10 <__stack+0xa11>
    265e:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <GoThrowingZone2>
			}
			
			
			/*if there is manual robot ahead of automatic robot && golden rack is not given and shuttlecock
			is given*/
			if(GoThrowingZone2 && !task6 ){
    2662:	88 23       	and	r24, r24
    2664:	09 f4       	brne	.+2      	; 0x2668 <__stack+0x469>
    2666:	43 c0       	rjmp	.+134    	; 0x26ee <__stack+0x4ef>
    2668:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <task6>
    266c:	81 11       	cpse	r24, r1
    266e:	43 c0       	rjmp	.+134    	; 0x26f6 <__stack+0x4f7>
    2670:	ed e4       	ldi	r30, 0x4D	; 77
    2672:	f3 e0       	ldi	r31, 0x03	; 3
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	a0 e0       	ldi	r26, 0x00	; 0
    267a:	b0 e4       	ldi	r27, 0x40	; 64
    267c:	85 8b       	std	Z+21, r24	; 0x15
    267e:	96 8b       	std	Z+22, r25	; 0x16
    2680:	a7 8b       	std	Z+23, r26	; 0x17
    2682:	b0 8f       	std	Z+24, r27	; 0x18
    2684:	11 8e       	std	Z+25, r1	; 0x19
    2686:	12 8e       	std	Z+26, r1	; 0x1a
		ki = i;
    2688:	13 8e       	std	Z+27, r1	; 0x1b
    268a:	14 8e       	std	Z+28, r1	; 0x1c
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	90 e0       	ldi	r25, 0x00	; 0
		kd = d;
    2690:	a0 ef       	ldi	r26, 0xF0	; 240
    2692:	b1 e4       	ldi	r27, 0x41	; 65
    2694:	85 8f       	std	Z+29, r24	; 0x1d
    2696:	96 8f       	std	Z+30, r25	; 0x1e
    2698:	a7 8f       	std	Z+31, r26	; 0x1f
    269a:	b0 a3       	std	Z+32, r27	; 0x20
    269c:	87 e0       	ldi	r24, 0x07	; 7
    269e:	90 e0       	ldi	r25, 0x00	; 0
				//uart0_puts("going tz2 \t");
				compass.setPid(2.0,0,30);
				robotState = moving;
    26a0:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    26a4:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    26a8:	44 e6       	ldi	r20, 0x64	; 100
				Move_Yaxis(Throwingzone2.y+150, Front, LZ2toTZ2);
    26aa:	50 e0       	ldi	r21, 0x00	; 0
    26ac:	62 e0       	ldi	r22, 0x02	; 2
    26ae:	70 e0       	ldi	r23, 0x00	; 0
    26b0:	82 e0       	ldi	r24, 0x02	; 2
    26b2:	98 e0       	ldi	r25, 0x08	; 8
    26b4:	ed da       	rcall	.-2598   	; 0x1c90 <_Z10Move_Yaxisiij>
    26b6:	8e e9       	ldi	r24, 0x9E	; 158
    26b8:	92 e0       	ldi	r25, 0x02	; 2
				//movy(Throwingzone2.y, Front,LZ2toTZ2);
			
				if(abs(encoderY.getdistance()) >=1200){
    26ba:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    26be:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
    26c2:	9b 01       	movw	r18, r22
    26c4:	77 23       	and	r23, r23
    26c6:	24 f4       	brge	.+8      	; 0x26d0 <__stack+0x4d1>
    26c8:	22 27       	eor	r18, r18
    26ca:	33 27       	eor	r19, r19
    26cc:	26 1b       	sub	r18, r22
    26ce:	37 0b       	sbc	r19, r23
    26d0:	20 3b       	cpi	r18, 0xB0	; 176
    26d2:	34 40       	sbci	r19, 0x04	; 4
    26d4:	0c f1       	brlt	.+66     	; 0x2718 <__stack+0x519>
    26d6:	78 94       	sei
    26d8:	e8 e6       	ldi	r30, 0x68	; 104
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    26da:	f0 e0       	ldi	r31, 0x00	; 0
	PCICR |= (1<<PCIE2);
    26dc:	80 81       	ld	r24, Z
    26de:	84 60       	ori	r24, 0x04	; 4
    26e0:	80 83       	st	Z, r24
    26e2:	ed e6       	ldi	r30, 0x6D	; 109
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
	PCMSK2 |= (1<<PCINT23);
    26e6:	80 81       	ld	r24, Z
    26e8:	80 68       	ori	r24, 0x80	; 128
    26ea:	80 83       	st	Z, r24
    26ec:	15 c0       	rjmp	.+42     	; 0x2718 <__stack+0x519>
    26ee:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <task6>
				}
				//uart0_puts("\r\n");

			}
			/*if robot just reached throwingzone 2 */
			else if(task6 && !task7 && where == inLZ2 && robotState == moving){
    26f2:	88 23       	and	r24, r24
    26f4:	89 f0       	breq	.+34     	; 0x2718 <__stack+0x519>
    26f6:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <task7>
    26fa:	81 11       	cpse	r24, r1
    26fc:	0d c0       	rjmp	.+26     	; 0x2718 <__stack+0x519>
    26fe:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <where>
    2702:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <where+0x1>
    2706:	06 97       	sbiw	r24, 0x06	; 6
    2708:	39 f4       	brne	.+14     	; 0x2718 <__stack+0x519>
    270a:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    270e:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    2712:	07 97       	sbiw	r24, 0x07	; 7
    2714:	09 f4       	brne	.+2      	; 0x2718 <__stack+0x519>
    2716:	9e c2       	rjmp	.+1340   	; 0x2c54 <__stack+0xa55>
    2718:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <where>
				//uart3_putc('2');
				
			}
			/* if in throwing zone 2 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ2 && robotState == notmoving){
    271c:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <where+0x1>
    2720:	03 97       	sbiw	r24, 0x03	; 3
    2722:	19 f5       	brne	.+70     	; 0x276a <__stack+0x56b>
    2724:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2728:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    272c:	08 97       	sbiw	r24, 0x08	; 8
    272e:	e9 f4       	brne	.+58     	; 0x276a <__stack+0x56b>
    2730:	ad c2       	rjmp	.+1370   	; 0x2c8c <__stack+0xa8d>
    2732:	82 e3       	ldi	r24, 0x32	; 50
    2734:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <_Z10uart3_putch>
				velocity_robot[0] =0;
				velocity_robot[1]=0;
				Hold_Position();
				if(/*check_stable_robot &&Goto_Fence_And_Detect() &&*/ _b_Transmit_once)	//Stable_Robot() &&
				{
					uart3_putc('2');
    2738:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <encoderX+0x1>
    273c:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <encoderX>
    2740:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <__data_end+0x1>
    2744:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <__data_end>
    2748:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <_b_Transmit_once>
					encoderX.resetCount();
					encoderY.resetCount();
					_b_Transmit_once = false;
    274c:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <_Z10uart3_getcv>
				}
				
				receiveAck = uart3_getc();
    2750:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <receiveAck>
    2754:	87 36       	cpi	r24, 0x67	; 103
    2756:	49 f4       	brne	.+18     	; 0x276a <__stack+0x56b>
				if(receiveAck == 'g'){
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <backtoLZ2>
					backtoLZ2 = true;
    275e:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <GoThrowingZone3>
					GoThrowingZone3 = false;
    2762:	80 e2       	ldi	r24, 0x20	; 32
    2764:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <receiveAck>
					receiveAck = ' ';
    2768:	05 c0       	rjmp	.+10     	; 0x2774 <__stack+0x575>
    276a:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <backtoLZ2>
				}
			}
			///if acknowledge received from throwing mechanism after throwing then back to loading zone 2
			if(backtoLZ2 && task6 && !task7){
    276e:	88 23       	and	r24, r24
    2770:	09 f4       	brne	.+2      	; 0x2774 <__stack+0x575>
    2772:	48 c0       	rjmp	.+144    	; 0x2804 <__stack+0x605>
    2774:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <task6>
    2778:	88 23       	and	r24, r24
    277a:	09 f4       	brne	.+2      	; 0x277e <__stack+0x57f>
    277c:	43 c0       	rjmp	.+134    	; 0x2804 <__stack+0x605>
    277e:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <task7>
    2782:	81 11       	cpse	r24, r1
    2784:	43 c0       	rjmp	.+134    	; 0x280c <__stack+0x60d>
    2786:	ed e4       	ldi	r30, 0x4D	; 77
    2788:	f3 e0       	ldi	r31, 0x03	; 3
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	a0 e0       	ldi	r26, 0x00	; 0
    2790:	b0 e4       	ldi	r27, 0x40	; 64
    2792:	85 8b       	std	Z+21, r24	; 0x15
    2794:	96 8b       	std	Z+22, r25	; 0x16
    2796:	a7 8b       	std	Z+23, r26	; 0x17
    2798:	b0 8f       	std	Z+24, r27	; 0x18
    279a:	11 8e       	std	Z+25, r1	; 0x19
    279c:	12 8e       	std	Z+26, r1	; 0x1a
		ki = i;
    279e:	13 8e       	std	Z+27, r1	; 0x1b
    27a0:	14 8e       	std	Z+28, r1	; 0x1c
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	90 e0       	ldi	r25, 0x00	; 0
		kd = d;
    27a6:	a0 ef       	ldi	r26, 0xF0	; 240
    27a8:	b1 e4       	ldi	r27, 0x41	; 65
    27aa:	85 8f       	std	Z+29, r24	; 0x1d
    27ac:	96 8f       	std	Z+30, r25	; 0x1e
    27ae:	a7 8f       	std	Z+31, r26	; 0x1f
    27b0:	b0 a3       	std	Z+32, r27	; 0x20
    27b2:	44 e6       	ldi	r20, 0x64	; 100
					//if(abs(encoderX.getdistance()) >= 400){
						//linetrackerXjunctionWatch();
					//}
				//}
				//else{
					Move_Yaxis(Throwingzone2.y+50, Back, LZ2toTZ2);
    27b4:	50 e0       	ldi	r21, 0x00	; 0
    27b6:	63 e0       	ldi	r22, 0x03	; 3
    27b8:	70 e0       	ldi	r23, 0x00	; 0
    27ba:	8e e9       	ldi	r24, 0x9E	; 158
    27bc:	97 e0       	ldi	r25, 0x07	; 7
    27be:	68 da       	rcall	.-2864   	; 0x1c90 <_Z10Move_Yaxisiij>
    27c0:	87 e0       	ldi	r24, 0x07	; 7
    27c2:	90 e0       	ldi	r25, 0x00	; 0
					//movy(Throwingzone2.y,Back,TZ2toLZ2);
					robotState = moving;
    27c4:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    27c8:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    27cc:	8e e9       	ldi	r24, 0x9E	; 158
    27ce:	92 e0       	ldi	r25, 0x02	; 2
			
					if(abs(encoderY.getdistance()) >= 1200){
    27d0:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    27d4:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
    27d8:	9b 01       	movw	r18, r22
    27da:	77 23       	and	r23, r23
    27dc:	24 f4       	brge	.+8      	; 0x27e6 <__stack+0x5e7>
    27de:	22 27       	eor	r18, r18
    27e0:	33 27       	eor	r19, r19
    27e2:	26 1b       	sub	r18, r22
    27e4:	37 0b       	sbc	r19, r23
    27e6:	20 3b       	cpi	r18, 0xB0	; 176
    27e8:	34 40       	sbci	r19, 0x04	; 4
    27ea:	ec f0       	brlt	.+58     	; 0x2826 <__stack+0x627>
    27ec:	78 94       	sei
    27ee:	e8 e6       	ldi	r30, 0x68	; 104
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
	PCICR |= (1<<PCIE2);
    27f2:	80 81       	ld	r24, Z
    27f4:	84 60       	ori	r24, 0x04	; 4
    27f6:	80 83       	st	Z, r24
    27f8:	ed e6       	ldi	r30, 0x6D	; 109
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
	PCMSK2 |= (1<<PCINT23);
    27fc:	80 81       	ld	r24, Z
    27fe:	80 68       	ori	r24, 0x80	; 128
    2800:	80 83       	st	Z, r24
    2802:	11 c0       	rjmp	.+34     	; 0x2826 <__stack+0x627>
    2804:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <task7>
				//uart0_puts("\r\n");
				
			}
			/*if after returning from throwing zone2 junction on line is detected then stop and wait for
			communication*/
			else if(task7 && robotState == moving && where == inTZ2 ){
    2808:	88 23       	and	r24, r24
    280a:	69 f0       	breq	.+26     	; 0x2826 <__stack+0x627>
    280c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2810:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    2814:	07 97       	sbiw	r24, 0x07	; 7
    2816:	39 f4       	brne	.+14     	; 0x2826 <__stack+0x627>
    2818:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <where>
    281c:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <where+0x1>
    2820:	03 97       	sbiw	r24, 0x03	; 3
    2822:	09 f4       	brne	.+2      	; 0x2826 <__stack+0x627>
    2824:	40 c2       	rjmp	.+1152   	; 0x2ca6 <__stack+0xaa7>
    2826:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <GoThrowingZone3>
				ShuttleCockArmGone = false;
				backtoLZ2 = false;
			}
			
			/*if golden rack is given to automatic robot and says goto throwingzone 1*/
			if(GoThrowingZone3 && !task8){
    282a:	88 23       	and	r24, r24
    282c:	09 f4       	brne	.+2      	; 0x2830 <__stack+0x631>
    282e:	48 c0       	rjmp	.+144    	; 0x28c0 <__stack+0x6c1>
    2830:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <task8>
    2834:	81 11       	cpse	r24, r1
    2836:	49 c0       	rjmp	.+146    	; 0x28ca <__stack+0x6cb>
    2838:	ed e4       	ldi	r30, 0x4D	; 77
    283a:	f3 e0       	ldi	r31, 0x03	; 3
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	a0 e0       	ldi	r26, 0x00	; 0
    2842:	b0 e4       	ldi	r27, 0x40	; 64
    2844:	85 8b       	std	Z+21, r24	; 0x15
    2846:	96 8b       	std	Z+22, r25	; 0x16
    2848:	a7 8b       	std	Z+23, r26	; 0x17
    284a:	b0 8f       	std	Z+24, r27	; 0x18
    284c:	11 8e       	std	Z+25, r1	; 0x19
    284e:	12 8e       	std	Z+26, r1	; 0x1a
		ki = i;
    2850:	13 8e       	std	Z+27, r1	; 0x1b
    2852:	14 8e       	std	Z+28, r1	; 0x1c
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	90 e0       	ldi	r25, 0x00	; 0
		kd = d;
    2858:	a0 ef       	ldi	r26, 0xF0	; 240
    285a:	b1 e4       	ldi	r27, 0x41	; 65
    285c:	85 8f       	std	Z+29, r24	; 0x1d
    285e:	96 8f       	std	Z+30, r25	; 0x1e
    2860:	a7 8f       	std	Z+31, r26	; 0x1f
    2862:	b0 a3       	std	Z+32, r27	; 0x20
    2864:	46 e9       	ldi	r20, 0x96	; 150
				compass.setPid(2.0,0,30);//2.0
				//uart0_puts("going tz3 \t");
				/*compass.SETPOINT = 181;*/
				Move_Yaxis(Throwingzone3.y-50, Front, LZ2toTZ3);
    2866:	50 e0       	ldi	r21, 0x00	; 0
    2868:	62 e0       	ldi	r22, 0x02	; 2
    286a:	70 e0       	ldi	r23, 0x00	; 0
    286c:	8e e1       	ldi	r24, 0x1E	; 30
    286e:	94 e1       	ldi	r25, 0x14	; 20
    2870:	0f da       	rcall	.-3042   	; 0x1c90 <_Z10Move_Yaxisiij>
    2872:	87 e0       	ldi	r24, 0x07	; 7
    2874:	90 e0       	ldi	r25, 0x00	; 0
				//movy(5300,Front,LZ2toTZ3);
				robotState = moving;
    2876:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    287a:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    287e:	8e e9       	ldi	r24, 0x9E	; 158
    2880:	92 e0       	ldi	r25, 0x02	; 2
				if(abs(encoderY.getdistance()) >= 4000){
    2882:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    2886:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
    288a:	9b 01       	movw	r18, r22
    288c:	77 23       	and	r23, r23
    288e:	24 f4       	brge	.+8      	; 0x2898 <__stack+0x699>
    2890:	22 27       	eor	r18, r18
    2892:	33 27       	eor	r19, r19
    2894:	26 1b       	sub	r18, r22
    2896:	37 0b       	sbc	r19, r23
    2898:	20 3a       	cpi	r18, 0xA0	; 160
    289a:	3f 40       	sbci	r19, 0x0F	; 15
    289c:	0c f4       	brge	.+2      	; 0x28a0 <__stack+0x6a1>
    289e:	55 c0       	rjmp	.+170    	; 0x294a <__stack+0x74b>
    28a0:	78 94       	sei
    28a2:	e8 e6       	ldi	r30, 0x68	; 104
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
	PCICR |= (1<<PCIE2);
    28a6:	80 81       	ld	r24, Z
    28a8:	84 60       	ori	r24, 0x04	; 4
    28aa:	80 83       	st	Z, r24
    28ac:	ed e6       	ldi	r30, 0x6D	; 109
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
	PCMSK2 |= (1<<PCINT23);
    28b0:	80 81       	ld	r24, Z
    28b2:	80 68       	ori	r24, 0x80	; 128
    28b4:	80 83       	st	Z, r24
    28b6:	85 e6       	ldi	r24, 0x65	; 101
    28b8:	92 e0       	ldi	r25, 0x02	; 2
					linetrackerYjunctionWatch();	
					uart0_puts("interrupt on");
    28ba:	0e 94 65 1d 	call	0x3aca	; 0x3aca <_Z10uart0_putsPKc>
    28be:	45 c0       	rjmp	.+138    	; 0x294a <__stack+0x74b>
    28c0:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <task8>
				}
				//uart0_puts("\r\n");
			}
			/*if throwing zone 3 has just reached */
			else if(task8 && where == inLZ2 && robotState == moving){
    28c4:	88 23       	and	r24, r24
    28c6:	09 f4       	brne	.+2      	; 0x28ca <__stack+0x6cb>
    28c8:	40 c0       	rjmp	.+128    	; 0x294a <__stack+0x74b>
    28ca:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <where>
    28ce:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <where+0x1>
    28d2:	06 97       	sbiw	r24, 0x06	; 6
    28d4:	09 f0       	breq	.+2      	; 0x28d8 <__stack+0x6d9>
    28d6:	6a c2       	rjmp	.+1236   	; 0x2dac <__stack+0xbad>
    28d8:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    28dc:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    28e0:	07 97       	sbiw	r24, 0x07	; 7
    28e2:	09 f0       	breq	.+2      	; 0x28e6 <__stack+0x6e7>
    28e4:	63 c2       	rjmp	.+1222   	; 0x2dac <__stack+0xbad>
    28e6:	02 c2       	rjmp	.+1028   	; 0x2cec <__stack+0xaed>
    28e8:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
				//give command to throwing mechanism to throw.
				//uart3_putc('3');
			}
			/* if in throwing zone 3 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			else if(task8 && where == inTZ3 && robotState == notmoving){
    28ec:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    28f0:	08 97       	sbiw	r24, 0x08	; 8
    28f2:	59 f5       	brne	.+86     	; 0x294a <__stack+0x74b>
    28f4:	19 c2       	rjmp	.+1074   	; 0x2d28 <__stack+0xb29>
    28f6:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <_b_Transmit_once>
// 				if (!check_stable_robot)
// 				{
// 					check_stable_robot = Stable_Robot();
// 				}
				Hold_Position();
				if(Goto_Fence_And_Detect() && _b_Transmit_once )	
    28fa:	81 11       	cpse	r24, r1
    28fc:	1b c2       	rjmp	.+1078   	; 0x2d34 <__stack+0xb35>
    28fe:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <_Z10uart3_getcv>
				{	
					//uart0_puts("below \r\n");
					uart3_putc('3');
					_b_Transmit_once = false;
				}
				receiveAck = uart3_getc();
    2902:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <receiveAck>
    2906:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_Z10uart0_putch>
				uart0_putc(receiveAck);
    290a:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <receiveAck>
				if(receiveAck == 'p'){		//p for press
    290e:	80 37       	cpi	r24, 0x70	; 112
    2910:	41 f4       	brne	.+16     	; 0x2922 <__stack+0x723>
    2912:	82 e7       	ldi	r24, 0x72	; 114
    2914:	92 e0       	ldi	r25, 0x02	; 2
					uart0_puts("press true\r\n");
    2916:	0e 94 65 1d 	call	0x3aca	; 0x3aca <_Z10uart0_putsPKc>
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <pressRobot>
					pressRobot = true;
    2920:	14 c0       	rjmp	.+40     	; 0x294a <__stack+0x74b>
    2922:	84 36       	cpi	r24, 0x64	; 100
    2924:	39 f4       	brne	.+14     	; 0x2934 <__stack+0x735>
				}
				else if(receiveAck == 'd') {	//d for don't press
    2926:	8f e7       	ldi	r24, 0x7F	; 127
    2928:	92 e0       	ldi	r25, 0x02	; 2
					uart0_puts("press false \r\n");
    292a:	0e 94 65 1d 	call	0x3aca	; 0x3aca <_Z10uart0_putsPKc>
    292e:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <pressRobot>
					pressRobot = false;
    2932:	0b c0       	rjmp	.+22     	; 0x294a <__stack+0x74b>
    2934:	87 36       	cpi	r24, 0x67	; 103
    2936:	49 f4       	brne	.+18     	; 0x294a <__stack+0x74b>
				}
				else if(receiveAck == 'g'){
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <backtoLZ2>
					backtoLZ2 = true;
    293e:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <GoThrowingZone3>
					GoThrowingZone3 = false;
    2942:	80 e2       	ldi	r24, 0x20	; 32
    2944:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <receiveAck>
					receiveAck = ' ';
    2948:	05 c0       	rjmp	.+10     	; 0x2954 <__stack+0x755>
    294a:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <backtoLZ2>
				}
			}
			/*if acknowledge received from throwing mechanism after throwing then back to loading zone 2*/
			if(backtoLZ2 && task8 && !task9){
    294e:	88 23       	and	r24, r24
    2950:	09 f4       	brne	.+2      	; 0x2954 <__stack+0x755>
    2952:	41 c0       	rjmp	.+130    	; 0x29d6 <__stack+0x7d7>
    2954:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <task8>
    2958:	88 23       	and	r24, r24
    295a:	e9 f1       	breq	.+122    	; 0x29d6 <__stack+0x7d7>
    295c:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <task9>
    2960:	81 11       	cpse	r24, r1
    2962:	3e c0       	rjmp	.+124    	; 0x29e0 <__stack+0x7e1>
    2964:	ed e4       	ldi	r30, 0x4D	; 77
    2966:	f3 e0       	ldi	r31, 0x03	; 3
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	a0 e0       	ldi	r26, 0x00	; 0
    296e:	b0 e4       	ldi	r27, 0x40	; 64
    2970:	85 8b       	std	Z+21, r24	; 0x15
    2972:	96 8b       	std	Z+22, r25	; 0x16
    2974:	a7 8b       	std	Z+23, r26	; 0x17
    2976:	b0 8f       	std	Z+24, r27	; 0x18
    2978:	11 8e       	std	Z+25, r1	; 0x19
    297a:	12 8e       	std	Z+26, r1	; 0x1a
		ki = i;
    297c:	13 8e       	std	Z+27, r1	; 0x1b
    297e:	14 8e       	std	Z+28, r1	; 0x1c
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	90 e0       	ldi	r25, 0x00	; 0
		kd = d;
    2984:	a0 ef       	ldi	r26, 0xF0	; 240
    2986:	b1 e4       	ldi	r27, 0x41	; 65
    2988:	85 8f       	std	Z+29, r24	; 0x1d
    298a:	96 8f       	std	Z+30, r25	; 0x1e
    298c:	a7 8f       	std	Z+31, r26	; 0x1f
    298e:	b0 a3       	std	Z+32, r27	; 0x20
    2990:	87 e0       	ldi	r24, 0x07	; 7
    2992:	90 e0       	ldi	r25, 0x00	; 0
				////uart0_puts("back to lz2\t");
				compass.setPid(2.0,0,30);//2.0
				
					//movy(5300,Back,LZ2toTZ3);
					robotState = moving;
    2994:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2998:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    299c:	8e e9       	ldi	r24, 0x9E	; 158
    299e:	92 e0       	ldi	r25, 0x02	; 2
					if(abs(encoderY.getdistance()) >= 4000){
    29a0:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    29a4:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
    29a8:	9b 01       	movw	r18, r22
    29aa:	77 23       	and	r23, r23
    29ac:	24 f4       	brge	.+8      	; 0x29b6 <__stack+0x7b7>
    29ae:	22 27       	eor	r18, r18
    29b0:	33 27       	eor	r19, r19
    29b2:	26 1b       	sub	r18, r22
    29b4:	37 0b       	sbc	r19, r23
    29b6:	20 3a       	cpi	r18, 0xA0	; 160
    29b8:	3f 40       	sbci	r19, 0x0F	; 15
    29ba:	0c f4       	brge	.+2      	; 0x29be <__stack+0x7bf>
    29bc:	ff c1       	rjmp	.+1022   	; 0x2dbc <__stack+0xbbd>
    29be:	78 94       	sei
    29c0:	e8 e6       	ldi	r30, 0x68	; 104
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
	PCICR |= (1<<PCIE2);
    29c4:	80 81       	ld	r24, Z
    29c6:	84 60       	ori	r24, 0x04	; 4
    29c8:	80 83       	st	Z, r24
    29ca:	ed e6       	ldi	r30, 0x6D	; 109
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
	PCMSK2 |= (1<<PCINT23);
    29ce:	80 81       	ld	r24, Z
    29d0:	80 68       	ori	r24, 0x80	; 128
    29d2:	80 83       	st	Z, r24
    29d4:	08 95       	ret
    29d6:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <task9>
					}
				////uart0_puts("\r\n");
			}
			/*if after returning from throwing zone3 junction on line is detected then stop and wait for
			communication*/
			else if(task9 && robotState == moving && where == inTZ3 ){
    29da:	88 23       	and	r24, r24
    29dc:	09 f4       	brne	.+2      	; 0x29e0 <__stack+0x7e1>
    29de:	ee c1       	rjmp	.+988    	; 0x2dbc <__stack+0xbbd>
    29e0:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    29e4:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    29e8:	07 97       	sbiw	r24, 0x07	; 7
    29ea:	09 f0       	breq	.+2      	; 0x29ee <__stack+0x7ef>
    29ec:	e7 c1       	rjmp	.+974    	; 0x2dbc <__stack+0xbbd>
    29ee:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <where>
    29f2:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <where+0x1>
    29f6:	04 97       	sbiw	r24, 0x04	; 4
    29f8:	09 f0       	breq	.+2      	; 0x29fc <__stack+0x7fd>
    29fa:	e0 c1       	rjmp	.+960    	; 0x2dbc <__stack+0xbbd>
    29fc:	a1 c1       	rjmp	.+834    	; 0x2d40 <__stack+0xb41>
    29fe:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <task4>

	if((where == inLZ1 || where == inLZ2) && robotState == notmoving){
		
		/*if the robot is in loading zone 1 after completing task3 and task4 
		but yet to complete task5*/ 
		if(task4 && !task5){
    2a02:	81 11       	cpse	r24, r1
    2a04:	a5 cb       	rjmp	.-2230   	; 0x2150 <_Z18gorockthegamefieldv+0x26>
    2a06:	b1 cb       	rjmp	.-2206   	; 0x216a <_Z18gorockthegamefieldv+0x40>
    2a08:	81 e0       	ldi	r24, 0x01	; 1
			
			/*if there is manual robot infront of automatic robot*/
			
			else{
				/*if there is manual robot ahead of automatic robot then goto throwing zone1*/
				GoThrowingZone1 = true;
    2a0a:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <GoThrowingZone1>
    2a0e:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <task4>
				task3 = task4 = false;
    2a12:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <task3>
    2a16:	d2 da       	rcall	.-2652   	; 0x1fbc <_Z14updateZoneflagv>
				updateZoneflag();
    2a18:	c5 cb       	rjmp	.-2166   	; 0x21a4 <_Z18gorockthegamefieldv+0x7a>
    2a1a:	85 e0       	ldi	r24, 0x05	; 5
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
		but yet to complete task5*/ 
		if(task4 && !task5){
			/*if there is no manual robot infront of automatic robot*/
			if((ZONE_STATUSPORT & (1<<ZONE_STATUSPIN)) && !alwaysTZ1){
				/*go directly to loading zone 2 and manual robot is waiting there*/
				where = inLZ1;
    2a1e:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <where+0x1>
    2a22:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <where>
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <gotoLZ2>
				gotoLZ2 = true;
    2a2c:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <ShuttleCockGiven>
				ShuttleCockGiven = true;	
    2a30:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <ShuttleCockArmGone>
				ShuttleCockArmGone = true;
    2a34:	b7 cb       	rjmp	.-2194   	; 0x21a4 <_Z18gorockthegamefieldv+0x7a>
				//holdposition();
			}	
		}
		else if(task6 && task7 ){
			if((ZONE_STATUSPORT & (1<< ZONE_STATUSPIN)) && !alwaysTZ2){
				where = inLZ2;
    2a36:	86 e0       	ldi	r24, 0x06	; 6
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <where+0x1>
    2a3e:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <where>
				ManualInFrontOfLZ2 = false;
    2a42:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <ManualInFrontOfLZ2>
				updateZoneflag();
    2a46:	ba da       	rcall	.-2700   	; 0x1fbc <_Z14updateZoneflagv>
    2a48:	8b da       	rcall	.-2794   	; 0x1f60 <_Z13Hold_Positionv>
				Hold_Position();
    2a4a:	ac cb       	rjmp	.-2216   	; 0x21a4 <_Z18gorockthegamefieldv+0x7a>
    2a4c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ManualInFrontOfLZ2>
			}
			else if (ManualInFrontOfLZ2){
    2a50:	81 11       	cpse	r24, r1
    2a52:	9c cb       	rjmp	.-2248   	; 0x218c <_Z18gorockthegamefieldv+0x62>
    2a54:	a2 cb       	rjmp	.-2236   	; 0x219a <_Z18gorockthegamefieldv+0x70>
    2a56:	ed e4       	ldi	r30, 0x4D	; 77
    2a58:	f3 e0       	ldi	r31, 0x03	; 3
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	a0 e0       	ldi	r26, 0x00	; 0
    2a60:	b0 e4       	ldi	r27, 0x40	; 64
    2a62:	85 8b       	std	Z+21, r24	; 0x15
    2a64:	96 8b       	std	Z+22, r25	; 0x16
    2a66:	a7 8b       	std	Z+23, r26	; 0x17
    2a68:	b0 8f       	std	Z+24, r27	; 0x18
    2a6a:	11 8e       	std	Z+25, r1	; 0x19
    2a6c:	12 8e       	std	Z+26, r1	; 0x1a
		ki = i;
    2a6e:	13 8e       	std	Z+27, r1	; 0x1b
    2a70:	14 8e       	std	Z+28, r1	; 0x1c
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	90 e0       	ldi	r25, 0x00	; 0
		kd = d;
    2a76:	a0 ef       	ldi	r26, 0xF0	; 240
    2a78:	b1 e4       	ldi	r27, 0x41	; 65
    2a7a:	85 8f       	std	Z+29, r24	; 0x1d
    2a7c:	96 8f       	std	Z+30, r25	; 0x1e
    2a7e:	a7 8f       	std	Z+31, r26	; 0x1f
    2a80:	b0 a3       	std	Z+32, r27	; 0x20
    2a82:	48 ec       	ldi	r20, 0xC8	; 200
    2a84:	50 e0       	ldi	r21, 0x00	; 0
	
	////move from start zone to corner of loading zone
	if(!task1 && where == inStart_point && (normalGame||alwaysTZ1)){	
		compass.setPid(2.0,0,30);
		//uart0_puts("hello\r\n");
		movx(Throwingzone1.x,Front,STARTZONEtoCORNER);
    2a86:	62 e0       	ldi	r22, 0x02	; 2
    2a88:	70 e0       	ldi	r23, 0x00	; 0
    2a8a:	88 ef       	ldi	r24, 0xF8	; 248
    2a8c:	91 e1       	ldi	r25, 0x11	; 17
    2a8e:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <_Z4movxiij>
    2a92:	87 e0       	ldi	r24, 0x07	; 7
    2a94:	90 e0       	ldi	r25, 0x00	; 0
		//movDegree(10);
		robotState = moving;
    2a96:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2a9a:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2a9e:	86 ea       	ldi	r24, 0xA6	; 166
    2aa0:	92 e0       	ldi	r25, 0x02	; 2
		//uart0_puts("going ahead \t");
		if(abs(encoderX.getdistance()) >= 4400){
    2aa2:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    2aa6:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
    2aaa:	9b 01       	movw	r18, r22
    2aac:	77 23       	and	r23, r23
    2aae:	24 f4       	brge	.+8      	; 0x2ab8 <__stack+0x8b9>
    2ab0:	22 27       	eor	r18, r18
    2ab2:	33 27       	eor	r19, r19
    2ab4:	26 1b       	sub	r18, r22
    2ab6:	37 0b       	sbc	r19, r23
    2ab8:	20 33       	cpi	r18, 0x30	; 48
    2aba:	31 41       	sbci	r19, 0x11	; 17
    2abc:	0c f0       	brlt	.+2      	; 0x2ac0 <__stack+0x8c1>
    2abe:	86 cb       	rjmp	.-2292   	; 0x21cc <_Z18gorockthegamefieldv+0xa2>
    2ac0:	bf cc       	rjmp	.-1666   	; 0x2440 <__stack+0x241>
    2ac2:	ed e6       	ldi	r30, 0x6D	; 109
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT23);
    2ac6:	80 81       	ld	r24, Z
    2ac8:	8f 77       	andi	r24, 0x7F	; 127
    2aca:	80 83       	st	Z, r24
    2acc:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <startingAtFront>
		encoderX.resetCount();
		encoderY.resetCount();
	}
	else if(where == inFirstloadingCorner && task2 && (directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && robotState == moving){
		linetrackerYjunctionWatchOff();
		startingAtFront = false;
    2ad0:	86 e0       	ldi	r24, 0x06	; 6
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
		where = inLZ2;
    2ad4:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <where+0x1>
    2ad8:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <where>
    2adc:	88 e0       	ldi	r24, 0x08	; 8
    2ade:	90 e0       	ldi	r25, 0x00	; 0
		robotState = notmoving;
    2ae0:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2ae4:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2ae8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
		BrakeMotor();
    2aec:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <encoderX+0x1>
    2af0:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <encoderX>
    2af4:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <__data_end+0x1>
    2af8:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <__data_end>
    2afc:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <directlyLZ2>
		encoderX.resetCount();
		encoderY.resetCount();
		if(directlyLZ2){
    2b00:	81 11       	cpse	r24, r1
    2b02:	4f cc       	rjmp	.-1890   	; 0x23a2 <__stack+0x1a3>
    2b04:	5c cc       	rjmp	.-1864   	; 0x23be <__stack+0x1bf>
    2b06:	87 e0       	ldi	r24, 0x07	; 7
    2b08:	90 e0       	ldi	r25, 0x00	; 0
	if(ShuttleCockGiven && ShuttleCockArmGone)
	{
		/*if manual robot is ahead of automatic robot and automatic robot
		has not completed task3*/
			if(GoThrowingZone1 && !task3 && where == inLZ1){
				robotState = moving;
    2b0a:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2b0e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2b12:	ed e4       	ldi	r30, 0x4D	; 77
    2b14:	f3 e0       	ldi	r31, 0x03	; 3
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2b16:	80 e0       	ldi	r24, 0x00	; 0
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	a0 e0       	ldi	r26, 0x00	; 0
    2b1c:	b0 e4       	ldi	r27, 0x40	; 64
    2b1e:	85 8b       	std	Z+21, r24	; 0x15
    2b20:	96 8b       	std	Z+22, r25	; 0x16
    2b22:	a7 8b       	std	Z+23, r26	; 0x17
    2b24:	b0 8f       	std	Z+24, r27	; 0x18
    2b26:	11 8e       	std	Z+25, r1	; 0x19
    2b28:	12 8e       	std	Z+26, r1	; 0x1a
		ki = i;
    2b2a:	13 8e       	std	Z+27, r1	; 0x1b
    2b2c:	14 8e       	std	Z+28, r1	; 0x1c
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	90 e0       	ldi	r25, 0x00	; 0
		kd = d;
    2b32:	a0 ef       	ldi	r26, 0xF0	; 240
    2b34:	b1 e4       	ldi	r27, 0x41	; 65
    2b36:	85 8f       	std	Z+29, r24	; 0x1d
    2b38:	96 8f       	std	Z+30, r25	; 0x1e
    2b3a:	a7 8f       	std	Z+31, r26	; 0x1f
    2b3c:	b0 a3       	std	Z+32, r27	; 0x20
    2b3e:	44 e6       	ldi	r20, 0x64	; 100
				compass.setPid(2.0,0,30);
				Move_Yaxis(Throwingzone1.y+200,Front,LZ1toTZ1);
    2b40:	50 e0       	ldi	r21, 0x00	; 0
    2b42:	62 e0       	ldi	r22, 0x02	; 2
    2b44:	70 e0       	ldi	r23, 0x00	; 0
    2b46:	84 e3       	ldi	r24, 0x34	; 52
    2b48:	98 e0       	ldi	r25, 0x08	; 8
    2b4a:	a2 d8       	rcall	.-3772   	; 0x1c90 <_Z10Move_Yaxisiij>
    2b4c:	8e e9       	ldi	r24, 0x9E	; 158
    2b4e:	92 e0       	ldi	r25, 0x02	; 2
				//movy(Throwingzone1.y,Front,LZ1toTZ1);
				//uart0_puts("going tz1\t");
				if(abs(encoderY.getdistance()) >= 1600){
    2b50:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    2b54:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fixsfsi>
    2b58:	9b 01       	movw	r18, r22
    2b5a:	77 23       	and	r23, r23
    2b5c:	24 f4       	brge	.+8      	; 0x2b66 <__stack+0x967>
    2b5e:	22 27       	eor	r18, r18
    2b60:	33 27       	eor	r19, r19
    2b62:	26 1b       	sub	r18, r22
    2b64:	37 0b       	sbc	r19, r23
    2b66:	20 34       	cpi	r18, 0x40	; 64
    2b68:	36 40       	sbci	r19, 0x06	; 6
    2b6a:	0c f0       	brlt	.+2      	; 0x2b6e <__stack+0x96f>
    2b6c:	83 cc       	rjmp	.-1786   	; 0x2474 <__stack+0x275>
    2b6e:	9f cc       	rjmp	.-1730   	; 0x24ae <__stack+0x2af>
    2b70:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <task3>
					//uart0_puts("INT ON");
				}
				//uart0_puts("\r\n");
			}
			/* if task3 is completed and robot just reached throwingzone 1 then*/
			else if(task3 && !task4 && where == inLZ1 && robotState == moving){
    2b74:	88 23       	and	r24, r24
    2b76:	09 f4       	brne	.+2      	; 0x2b7a <__stack+0x97b>
    2b78:	9a cc       	rjmp	.-1740   	; 0x24ae <__stack+0x2af>
    2b7a:	88 cc       	rjmp	.-1776   	; 0x248c <__stack+0x28d>
    2b7c:	ed e6       	ldi	r30, 0x6D	; 109
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT23);
    2b80:	80 81       	ld	r24, Z
    2b82:	8f 77       	andi	r24, 0x7F	; 127
    2b84:	80 83       	st	Z, r24
    2b86:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
				linetrackerYjunctionWatchOff();
				//uart0_puts("reached throwing zone 1\r\n");
				BrakeMotor();
    2b8a:	82 e0       	ldi	r24, 0x02	; 2
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
				//uart3_putc('1');
				where = inTZ1;
    2b8e:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <where+0x1>
    2b92:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <where>
    2b96:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <encoderX+0x1>
    2b9a:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <encoderX>
    2b9e:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <__data_end+0x1>
    2ba2:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <__data_end>
    2ba6:	88 e0       	ldi	r24, 0x08	; 8
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2bae:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2bb2:	7d cc       	rjmp	.-1798   	; 0x24ae <__stack+0x2af>
    2bb4:	d5 d9       	rcall	.-3158   	; 0x1f60 <_Z13Hold_Positionv>
			}
			/* if in throwing zone 1 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ1 && robotState == notmoving){
				//uart3_puts("Throwing \r\n");
				Hold_Position();
    2bb6:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <_b_Transmit_once>

				if(_b_Transmit_once)	//Stable_Robot() && 
    2bba:	88 23       	and	r24, r24
    2bbc:	09 f4       	brne	.+2      	; 0x2bc0 <__stack+0x9c1>
    2bbe:	89 cc       	rjmp	.-1774   	; 0x24d2 <__stack+0x2d3>
    2bc0:	83 cc       	rjmp	.-1786   	; 0x24c8 <__stack+0x2c9>
    2bc2:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <gotoLZ2>
				ShuttleCockGiven = false;
				ShuttleCockArmGone = false;
				backtoLZ1 = false;
			}
			/*if there is no manual robot ahead of automatic robot go to loading zone 2*/
			else if(gotoLZ2 && !task5){
    2bc6:	81 11       	cpse	r24, r1
    2bc8:	f5 cc       	rjmp	.-1558   	; 0x25b4 <__stack+0x3b5>
    2bca:	38 cd       	rjmp	.-1424   	; 0x263c <__stack+0x43d>
    2bcc:	ed e6       	ldi	r30, 0x6D	; 109
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	8f 77       	andi	r24, 0x7F	; 127
    2bd4:	80 83       	st	Z, r24
    2bd6:	85 e0       	ldi	r24, 0x05	; 5
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
			/*if after returning from throwing zone1, junction on line is detected i.e loading zone1 
			then stop and wait for communication*/
			else if(task4 && robotState == moving && where == inTZ1){
				//uart0_puts("REached loading zone 1\r\n");
				linetrackerYjunctionWatchOff();
				where = inLZ1;
    2bda:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <where+0x1>
    2bde:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <where>
    2be2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
				BrakeMotor();
    2be6:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <encoderX+0x1>
    2bea:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <encoderX>
    2bee:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <__data_end+0x1>
    2bf2:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <__data_end>
    2bf6:	88 e0       	ldi	r24, 0x08	; 8
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2bfa:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2bfe:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2c02:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <ShuttleCockGiven>
				//this statement below determines automatic robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2c06:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <ShuttleCockArmGone>
				ShuttleCockArmGone = false;
    2c0a:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <backtoLZ1>
				backtoLZ1 = false;
    2c0e:	27 cd       	rjmp	.-1458   	; 0x265e <__stack+0x45f>
    2c10:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <gotoLZ2>
			
			}
			/*if X junction near loading zone 2 is detected and robot was previously on loading zone 1*/
			else if(task5 && robotState == moving && where == inLZ1){
				//uart0_puts("reached loading zone 2\r\n");
				gotoLZ2 = false;
    2c14:	eb e6       	ldi	r30, 0x6B	; 107
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
	sei();
	PCICR |= (1<<PCIE2);
	PCMSK2 |= (1<<PCINT23);
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
    2c18:	80 81       	ld	r24, Z
    2c1a:	8f 7e       	andi	r24, 0xEF	; 239
    2c1c:	80 83       	st	Z, r24
    2c1e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
				linetrackerXjunctionWatchOff();
				BrakeMotor();
    2c22:	86 e0       	ldi	r24, 0x06	; 6
    2c24:	90 e0       	ldi	r25, 0x00	; 0
				where = inLZ2;
    2c26:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <where+0x1>
    2c2a:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <where>
    2c2e:	88 e0       	ldi	r24, 0x08	; 8
    2c30:	90 e0       	ldi	r25, 0x00	; 0
				robotState = notmoving;
    2c32:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2c36:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2c3a:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <encoderX+0x1>
    2c3e:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <encoderX>
    2c42:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <__data_end+0x1>
    2c46:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <__data_end>
    2c4a:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <ShuttleCockGiven>
				encoderX.resetCount();
				encoderY.resetCount();
				//this statement below determines automatic robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2c4e:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <ShuttleCockArmGone>
				ShuttleCockArmGone = false;
    2c52:	05 cd       	rjmp	.-1526   	; 0x265e <__stack+0x45f>
    2c54:	83 e0       	ldi	r24, 0x03	; 3
    2c56:	90 e0       	ldi	r25, 0x00	; 0

			}
			/*if robot just reached throwingzone 2 */
			else if(task6 && !task7 && where == inLZ2 && robotState == moving){
				//uart0_puts("Reached tz2 \r\n");
				where = inTZ2;
    2c58:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <where+0x1>
    2c5c:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <where>
    2c60:	ed e6       	ldi	r30, 0x6D	; 109
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT23);
    2c64:	80 81       	ld	r24, Z
    2c66:	8f 77       	andi	r24, 0x7F	; 127
    2c68:	80 83       	st	Z, r24
    2c6a:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <encoderX+0x1>
    2c6e:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <encoderX>
    2c72:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <__data_end+0x1>
    2c76:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <__data_end>
    2c7a:	88 e0       	ldi	r24, 0x08	; 8
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
				linetrackerYjunctionWatchOff();
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2c7e:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2c82:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2c86:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
				BrakeMotor();
    2c8a:	46 cd       	rjmp	.-1396   	; 0x2718 <__stack+0x519>
			if(where == inTZ2 && robotState == notmoving){
// 				if (!check_stable_robot)
// 				{
// 					check_stable_robot = Stable_Robot();
// 				}
				velocity_robot[0] =0;
    2c8c:	e5 ed       	ldi	r30, 0xD5	; 213
    2c8e:	f3 e0       	ldi	r31, 0x03	; 3
    2c90:	11 82       	std	Z+1, r1	; 0x01
    2c92:	10 82       	st	Z, r1
				velocity_robot[1]=0;
    2c94:	13 82       	std	Z+3, r1	; 0x03
    2c96:	12 82       	std	Z+2, r1	; 0x02
				Hold_Position();
    2c98:	63 d9       	rcall	.-3386   	; 0x1f60 <_Z13Hold_Positionv>
    2c9a:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <_b_Transmit_once>
				if(/*check_stable_robot &&Goto_Fence_And_Detect() &&*/ _b_Transmit_once)	//Stable_Robot() &&
    2c9e:	88 23       	and	r24, r24
    2ca0:	09 f4       	brne	.+2      	; 0x2ca4 <__stack+0xaa5>
    2ca2:	54 cd       	rjmp	.-1368   	; 0x274c <__stack+0x54d>
    2ca4:	46 cd       	rjmp	.-1396   	; 0x2732 <__stack+0x533>
    2ca6:	5c d9       	rcall	.-3400   	; 0x1f60 <_Z13Hold_Positionv>
				
			}
			/*if after returning from throwing zone2 junction on line is detected then stop and wait for
			communication*/
			else if(task7 && robotState == moving && where == inTZ2 ){
				Hold_Position();
    2ca8:	ed e6       	ldi	r30, 0x6D	; 109
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	80 81       	ld	r24, Z
    2cae:	8f 77       	andi	r24, 0x7F	; 127
    2cb0:	80 83       	st	Z, r24
    2cb2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
				//uart0_puts("reached loading zone 2 \r\n");
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    2cb6:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <encoderX+0x1>
    2cba:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <encoderX>
    2cbe:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <__data_end+0x1>
    2cc2:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <__data_end>
    2cc6:	86 e0       	ldi	r24, 0x06	; 6
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
				encoderX.resetCount();
				encoderY.resetCount();
				where = inLZ2;
    2cca:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <where+0x1>
    2cce:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <where>
    2cd2:	88 e0       	ldi	r24, 0x08	; 8
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
				robotState = notmoving;
    2cd6:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2cda:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2cde:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <ShuttleCockGiven>
				//this statement below determines robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2ce2:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <ShuttleCockArmGone>
				ShuttleCockArmGone = false;
    2ce6:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <backtoLZ2>
				backtoLZ2 = false;
    2cea:	9d cd       	rjmp	.-1222   	; 0x2826 <__stack+0x627>
    2cec:	ed e6       	ldi	r30, 0x6D	; 109
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	80 81       	ld	r24, Z
    2cf2:	8f 77       	andi	r24, 0x7F	; 127
    2cf4:	80 83       	st	Z, r24
    2cf6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
			}
			/*if throwing zone 3 has just reached */
			else if(task8 && where == inLZ2 && robotState == moving){
				//uart0_puts("reached tz3\r\n");
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    2cfa:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <encoderX+0x1>
    2cfe:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <encoderX>
    2d02:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <__data_end+0x1>
    2d06:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <__data_end>
    2d0a:	88 e0       	ldi	r24, 0x08	; 8
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2d12:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2d16:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <GoThrowingZone3>
				GoThrowingZone3 = false;
    2d1a:	84 e0       	ldi	r24, 0x04	; 4
				where = inTZ3;
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <where+0x1>
    2d22:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <where>
    2d26:	11 ce       	rjmp	.-990    	; 0x294a <__stack+0x74b>
    2d28:	1b d9       	rcall	.-3530   	; 0x1f60 <_Z13Hold_Positionv>
				//velocity_robot[0] = velocity_robot[1] = velocity_robot[2] = 0;
// 				if (!check_stable_robot)
// 				{
// 					check_stable_robot = Stable_Robot();
// 				}
				Hold_Position();
    2d2a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <_Z21Goto_Fence_And_Detectv>
				if(Goto_Fence_And_Detect() && _b_Transmit_once )	
    2d2e:	81 11       	cpse	r24, r1
    2d30:	e2 cd       	rjmp	.-1084   	; 0x28f6 <__stack+0x6f7>
    2d32:	e5 cd       	rjmp	.-1078   	; 0x28fe <__stack+0x6ff>
    2d34:	83 e3       	ldi	r24, 0x33	; 51
    2d36:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <_Z10uart3_putch>
				{	
					//uart0_puts("below \r\n");
					uart3_putc('3');
    2d3a:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <_b_Transmit_once>
					_b_Transmit_once = false;
    2d3e:	df cd       	rjmp	.-1090   	; 0x28fe <__stack+0x6ff>
    2d40:	ed e6       	ldi	r30, 0x6D	; 109
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	80 81       	ld	r24, Z
    2d46:	8f 77       	andi	r24, 0x7F	; 127
    2d48:	80 83       	st	Z, r24
    2d4a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
			/*if after returning from throwing zone3 junction on line is detected then stop and wait for
			communication*/
			else if(task9 && robotState == moving && where == inTZ3 ){
				////uart0_puts("reached loading zone 2\r\n");
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    2d4e:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <encoderX+0x1>
    2d52:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <encoderX>
    2d56:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <__data_end+0x1>
    2d5a:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <__data_end>
    2d5e:	86 e0       	ldi	r24, 0x06	; 6
    2d60:	90 e0       	ldi	r25, 0x00	; 0
				encoderX.resetCount();
				encoderY.resetCount();
				where = inLZ2;
    2d62:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <where+0x1>
    2d66:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <where>
    2d6a:	88 e0       	ldi	r24, 0x08	; 8
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
				robotState = notmoving;
    2d6e:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2d72:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2d76:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <ShuttleCockGiven>
				//this statement below determines robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2d7a:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <ShuttleCockArmGone>
				ShuttleCockArmGone = false;
    2d7e:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <backtoLZ2>
				backtoLZ2 = false;
    2d82:	08 95       	ret
    2d84:	20 91 b9 02 	lds	r18, 0x02B9	; 0x8002b9 <where>
		BrakeMotor();
		Hold_Position();
		encoderX.resetCount();
		encoderY.resetCount();
	}
	else if(where == inFirstloadingCorner && task2 && (directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && robotState == moving){
    2d88:	30 91 ba 02 	lds	r19, 0x02BA	; 0x8002ba <where+0x1>
    2d8c:	21 30       	cpi	r18, 0x01	; 1
    2d8e:	31 05       	cpc	r19, r1
    2d90:	09 f0       	breq	.+2      	; 0x2d94 <__stack+0xb95>
    2d92:	56 cb       	rjmp	.-2388   	; 0x2440 <__stack+0x241>
    2d94:	ef ca       	rjmp	.-2594   	; 0x2374 <__stack+0x175>
    2d96:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <directlyLZ2>
			linetrackerXjunctionWatch();
			//uart0_puts("int on");
		}

	}
	else if((directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && !task1){
    2d9a:	99 23       	and	r25, r25
    2d9c:	09 f4       	brne	.+2      	; 0x2da0 <__stack+0xba1>
    2d9e:	22 ca       	rjmp	.-3004   	; 0x21e4 <_Z18gorockthegamefieldv+0xba>
    2da0:	2f ca       	rjmp	.-2978   	; 0x2200 <__stack+0x1>
    2da2:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <directlyLZ2>
    2da6:	91 11       	cpse	r25, r1
    2da8:	5d ca       	rjmp	.-2886   	; 0x2264 <__stack+0x65>
    2daa:	1c ca       	rjmp	.-3016   	; 0x21e4 <_Z18gorockthegamefieldv+0xba>
    2dac:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <where>
				//give command to throwing mechanism to throw.
				//uart3_putc('3');
			}
			/* if in throwing zone 3 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			else if(task8 && where == inTZ3 && robotState == notmoving){
    2db0:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <where+0x1>
    2db4:	04 97       	sbiw	r24, 0x04	; 4
    2db6:	09 f0       	breq	.+2      	; 0x2dba <__stack+0xbbb>
    2db8:	c8 cd       	rjmp	.-1136   	; 0x294a <__stack+0x74b>
    2dba:	96 cd       	rjmp	.-1236   	; 0x28e8 <__stack+0x6e9>
    2dbc:	08 95       	ret

00002dbe <__vector_9>:
    2dbe:	1f 92       	push	r1
    2dc0:	0f 92       	push	r0
}


/*When Junction on Linetracker X is deteced*/
ISR(PCINT0_vect)		
{
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	0f 92       	push	r0
    2dc6:	11 24       	eor	r1, r1
    2dc8:	0b b6       	in	r0, 0x3b	; 59
    2dca:	0f 92       	push	r0
    2dcc:	2f 93       	push	r18
    2dce:	3f 93       	push	r19
    2dd0:	4f 93       	push	r20
    2dd2:	5f 93       	push	r21
    2dd4:	6f 93       	push	r22
    2dd6:	7f 93       	push	r23
    2dd8:	8f 93       	push	r24
    2dda:	9f 93       	push	r25
    2ddc:	af 93       	push	r26
    2dde:	bf 93       	push	r27
    2de0:	ef 93       	push	r30
    2de2:	ff 93       	push	r31
	if(!task1){
    2de4:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <task1>
    2de8:	81 11       	cpse	r24, r1
    2dea:	06 c0       	rjmp	.+12     	; 0x2df8 <__vector_9+0x3a>
		task1 = true;			//reached to corner of loading zone1
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <task1>
		FlagChangeSetpointCompass = true;
    2df2:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <FlagChangeSetpointCompass>
    2df6:	22 c0       	rjmp	.+68     	; 0x2e3c <__vector_9+0x7e>
	}
	else if(!task5){
    2df8:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <task5>
    2dfc:	81 11       	cpse	r24, r1
    2dfe:	08 c0       	rjmp	.+16     	; 0x2e10 <__vector_9+0x52>
		task5 = true;			//reached loading zone 2 from loading zone 1
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <task5>
		FlagChangeSetpointCompass = true;
    2e06:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <FlagChangeSetpointCompass>
		BrakeMotor();
    2e0a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    2e0e:	16 c0       	rjmp	.+44     	; 0x2e3c <__vector_9+0x7e>
	}
	else if(!xJunctionMeetFromTZ2){
    2e10:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <xJunctionMeetFromTZ2>
    2e14:	81 11       	cpse	r24, r1
    2e16:	12 c0       	rjmp	.+36     	; 0x2e3c <__vector_9+0x7e>
		xJunctionMeetFromTZ2 = true;
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <xJunctionMeetFromTZ2>
		BrakeMotor();
    2e1e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
	sei();
	PCICR |= (1<<PCIE2);
	PCMSK2 |= (1<<PCINT23);
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
    2e22:	eb e6       	ldi	r30, 0x6B	; 107
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	80 81       	ld	r24, Z
    2e28:	8f 7e       	andi	r24, 0xEF	; 239
    2e2a:	80 83       	st	Z, r24
    2e2c:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <encoderX+0x1>
    2e30:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <encoderX>
    2e34:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <__data_end+0x1>
    2e38:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <__data_end>
		linetrackerXjunctionWatchOff();
		encoderX.resetCount();
		encoderY.resetCount();
	}
}
    2e3c:	ff 91       	pop	r31
    2e3e:	ef 91       	pop	r30
    2e40:	bf 91       	pop	r27
    2e42:	af 91       	pop	r26
    2e44:	9f 91       	pop	r25
    2e46:	8f 91       	pop	r24
    2e48:	7f 91       	pop	r23
    2e4a:	6f 91       	pop	r22
    2e4c:	5f 91       	pop	r21
    2e4e:	4f 91       	pop	r20
    2e50:	3f 91       	pop	r19
    2e52:	2f 91       	pop	r18
    2e54:	0f 90       	pop	r0
    2e56:	0b be       	out	0x3b, r0	; 59
    2e58:	0f 90       	pop	r0
    2e5a:	0f be       	out	0x3f, r0	; 63
    2e5c:	0f 90       	pop	r0
    2e5e:	1f 90       	pop	r1
    2e60:	18 95       	reti

00002e62 <__vector_11>:


/*When Junction on Linetracker Y is detected*/
ISR(PCINT2_vect)
{
    2e62:	1f 92       	push	r1
    2e64:	0f 92       	push	r0
    2e66:	0f b6       	in	r0, 0x3f	; 63
    2e68:	0f 92       	push	r0
    2e6a:	11 24       	eor	r1, r1
    2e6c:	0b b6       	in	r0, 0x3b	; 59
    2e6e:	0f 92       	push	r0
    2e70:	2f 93       	push	r18
    2e72:	3f 93       	push	r19
    2e74:	4f 93       	push	r20
    2e76:	5f 93       	push	r21
    2e78:	6f 93       	push	r22
    2e7a:	7f 93       	push	r23
    2e7c:	8f 93       	push	r24
    2e7e:	9f 93       	push	r25
    2e80:	af 93       	push	r26
    2e82:	bf 93       	push	r27
    2e84:	ef 93       	push	r30
    2e86:	ff 93       	push	r31
	if(!task2){
    2e88:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <task2>
    2e8c:	81 11       	cpse	r24, r1
    2e8e:	06 c0       	rjmp	.+12     	; 0x2e9c <__vector_11+0x3a>
		BrakeMotor();
    2e90:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
		task2 = true;		//reached to loading zone 1
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <task2>
    2e9a:	41 c0       	rjmp	.+130    	; 0x2f1e <__vector_11+0xbc>
	}
	else if(!task3){
    2e9c:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <task3>
    2ea0:	81 11       	cpse	r24, r1
    2ea2:	08 c0       	rjmp	.+16     	; 0x2eb4 <__vector_11+0x52>
		_b_Transmit_once = true;
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <_b_Transmit_once>
		task3 = true;		//reached throwing zone 1
    2eaa:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <task3>
		BrakeMotor();
    2eae:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    2eb2:	35 c0       	rjmp	.+106    	; 0x2f1e <__vector_11+0xbc>
	}
		
	else if(!task4){
    2eb4:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <task4>
    2eb8:	81 11       	cpse	r24, r1
    2eba:	06 c0       	rjmp	.+12     	; 0x2ec8 <__vector_11+0x66>
		task4 = true;		//reached loading zone 1 from throwing zone 1
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <task4>
		 BrakeMotor();
    2ec2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    2ec6:	2b c0       	rjmp	.+86     	; 0x2f1e <__vector_11+0xbc>
	}
	else if(!task6){
    2ec8:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <task6>
    2ecc:	81 11       	cpse	r24, r1
    2ece:	08 c0       	rjmp	.+16     	; 0x2ee0 <__vector_11+0x7e>
		_b_Transmit_once = true;
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <_b_Transmit_once>
		task6 = true;		//reached throwing zone 2
    2ed6:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <task6>
		BrakeMotor();
    2eda:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    2ede:	1f c0       	rjmp	.+62     	; 0x2f1e <__vector_11+0xbc>
	}
		
	else if(!task7){
    2ee0:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <task7>
    2ee4:	81 11       	cpse	r24, r1
    2ee6:	06 c0       	rjmp	.+12     	; 0x2ef4 <__vector_11+0x92>
		task7 = true;		//reached loading zone 2 from throwing zone 2
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <task7>
		BrakeMotor();
    2eee:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    2ef2:	15 c0       	rjmp	.+42     	; 0x2f1e <__vector_11+0xbc>
	}
	else if(!task8){
    2ef4:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <task8>
    2ef8:	81 11       	cpse	r24, r1
    2efa:	08 c0       	rjmp	.+16     	; 0x2f0c <__vector_11+0xaa>
		_b_Transmit_once = true;
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <_b_Transmit_once>
		task8 = true;		//reached throwing zone 3
    2f02:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <task8>
		BrakeMotor();
    2f06:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    2f0a:	09 c0       	rjmp	.+18     	; 0x2f1e <__vector_11+0xbc>
	}
	else if(!task9){
    2f0c:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <task9>
    2f10:	81 11       	cpse	r24, r1
    2f12:	05 c0       	rjmp	.+10     	; 0x2f1e <__vector_11+0xbc>
		task9 = true;		//reached loading zone 2 from throwing zone 3
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <task9>
		BrakeMotor();
    2f1a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
	}
}
    2f1e:	ff 91       	pop	r31
    2f20:	ef 91       	pop	r30
    2f22:	bf 91       	pop	r27
    2f24:	af 91       	pop	r26
    2f26:	9f 91       	pop	r25
    2f28:	8f 91       	pop	r24
    2f2a:	7f 91       	pop	r23
    2f2c:	6f 91       	pop	r22
    2f2e:	5f 91       	pop	r21
    2f30:	4f 91       	pop	r20
    2f32:	3f 91       	pop	r19
    2f34:	2f 91       	pop	r18
    2f36:	0f 90       	pop	r0
    2f38:	0b be       	out	0x3b, r0	; 59
    2f3a:	0f 90       	pop	r0
    2f3c:	0f be       	out	0x3f, r0	; 63
    2f3e:	0f 90       	pop	r0
    2f40:	1f 90       	pop	r1
    2f42:	18 95       	reti

00002f44 <main>:
////////////////////////////////////////////

int main(void)
{
	////////////SET COMMUNICATION PINS AS INPUT AND PULL UP////////
	INPUT(SHUTTLECOCKPIN);
    2f44:	aa e0       	ldi	r26, 0x0A	; 10
    2f46:	b1 e0       	ldi	r27, 0x01	; 1
    2f48:	8c 91       	ld	r24, X
    2f4a:	8f 7b       	andi	r24, 0xBF	; 191
    2f4c:	8c 93       	st	X, r24
	INPUT(ZONEPIN);
    2f4e:	8c 91       	ld	r24, X
    2f50:	8f 7e       	andi	r24, 0xEF	; 239
    2f52:	8c 93       	st	X, r24
 	SET(SHUTTLECOCKPIN);
    2f54:	eb e0       	ldi	r30, 0x0B	; 11
    2f56:	f1 e0       	ldi	r31, 0x01	; 1
    2f58:	80 81       	ld	r24, Z
    2f5a:	80 64       	ori	r24, 0x40	; 64
    2f5c:	80 83       	st	Z, r24
 	SET(ZONEPIN);
    2f5e:	80 81       	ld	r24, Z
    2f60:	80 61       	ori	r24, 0x10	; 16
    2f62:	80 83       	st	Z, r24
	///////PULL DOWN RACK PIN 
	INPUT(RACKPIN);
    2f64:	8c 91       	ld	r24, X
    2f66:	8b 7f       	andi	r24, 0xFB	; 251
    2f68:	8c 93       	st	X, r24
	CLEAR(RACKPIN);
    2f6a:	80 81       	ld	r24, Z
    2f6c:	8b 7f       	andi	r24, 0xFB	; 251
    2f6e:	80 83       	st	Z, r24
	
	///Turn internal pullup for limit switch pin
	INPUT(RIGHT_LIMIT_SW);
    2f70:	e1 e0       	ldi	r30, 0x01	; 1
    2f72:	f1 e0       	ldi	r31, 0x01	; 1
    2f74:	80 81       	ld	r24, Z
    2f76:	87 7f       	andi	r24, 0xF7	; 247
    2f78:	80 83       	st	Z, r24
	INPUT(LEFT_LIMIT_SW);
    2f7a:	6b 98       	cbi	0x0d, 3	; 13
	SET(RIGHT_LIMIT_SW);
    2f7c:	e2 e0       	ldi	r30, 0x02	; 2
    2f7e:	f1 e0       	ldi	r31, 0x01	; 1
    2f80:	80 81       	ld	r24, Z
    2f82:	88 60       	ori	r24, 0x08	; 8
    2f84:	80 83       	st	Z, r24
	SET(LEFT_LIMIT_SW);
    2f86:	73 9a       	sbi	0x0e, 3	; 14
	///SET PK1 AS OUTPUT TO SEND SIGNAL TO SLAVE TO BRAKE MOTOR 
	DDRK |= (1<<PK0);
    2f88:	e7 e0       	ldi	r30, 0x07	; 7
    2f8a:	f1 e0       	ldi	r31, 0x01	; 1
    2f8c:	80 81       	ld	r24, Z
    2f8e:	81 60       	ori	r24, 0x01	; 1
    2f90:	80 83       	st	Z, r24
	PORTK &= ~(1<<PK0); 
    2f92:	e8 e0       	ldi	r30, 0x08	; 8
    2f94:	f1 e0       	ldi	r31, 0x01	; 1
    2f96:	80 81       	ld	r24, Z
    2f98:	8e 7f       	andi	r24, 0xFE	; 254
    2f9a:	80 83       	st	Z, r24
	/// INITIALIZE ALL THE UART
	uart0_init(UART_BAUD_SELECT(9600,F_CPU));
    2f9c:	87 e6       	ldi	r24, 0x67	; 103
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	66 d5       	rcall	.+2764   	; 0x3a6e <_Z10uart0_initj>
	uart2_init(UART_BAUD_SELECT(38400,F_CPU));
    2fa2:	89 e1       	ldi	r24, 0x19	; 25
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	3a d6       	rcall	.+3188   	; 0x3c1c <_Z10uart2_initj>
	uart3_init(UART_BAUD_SELECT(38400,F_CPU));
    2fa8:	89 e1       	ldi	r24, 0x19	; 25
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	c6 d6       	rcall	.+3468   	; 0x3d3a <_Z10uart3_initj>
	//INITIALIZE EVERYTHING ELSE
	initializeAll();
    2fae:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_Z13initializeAllv>
	sei();
	
    while (1) 
    {
		
		gorockthegamefield();
    2fb2:	78 94       	sei
    2fb4:	ba d8       	rcall	.-3724   	; 0x212a <_Z18gorockthegamefieldv>
 		calculatevel();
    2fb6:	0e 94 0f 08 	call	0x101e	; 0x101e <_Z12calculatevelv>
    2fba:	fc cf       	rjmp	.-8      	; 0x2fb4 <main+0x70>

00002fbc <_GLOBAL__sub_I_compassPID>:
#include "hmccompass.h"
#include "MPU6050.h"
#include "General-function.h"


static MPU6050 mpu;
    2fbc:	87 e1       	ldi	r24, 0x17	; 23
    2fbe:	94 e0       	ldi	r25, 0x04	; 4
    2fc0:	3d d0       	rcall	.+122    	; 0x303c <_ZN7MPU6050C1Ev>
};
////////////////////////////////////////////////////////////////////////////////


struct bodyPid{ 
	bodyPid():FirstData(true){};
    2fc2:	ef e8       	ldi	r30, 0x8F	; 143
    2fc4:	f3 e0       	ldi	r31, 0x03	; 3
    2fc6:	10 86       	std	Z+8, r1	; 0x08
    2fc8:	11 86       	std	Z+9, r1	; 0x09
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	80 8b       	std	Z+16, r24	; 0x10
    2fce:	ee e6       	ldi	r30, 0x6E	; 110
    2fd0:	f3 e0       	ldi	r31, 0x03	; 3
    2fd2:	10 86       	std	Z+8, r1	; 0x08
    2fd4:	11 86       	std	Z+9, r1	; 0x09
    2fd6:	80 8b       	std	Z+16, r24	; 0x10
    2fd8:	ed e4       	ldi	r30, 0x4D	; 77
    2fda:	f3 e0       	ldi	r31, 0x03	; 3
    2fdc:	10 86       	std	Z+8, r1	; 0x08
    2fde:	11 86       	std	Z+9, r1	; 0x09
    2fe0:	80 8b       	std	Z+16, r24	; 0x10
    2fe2:	ec e2       	ldi	r30, 0x2C	; 44
    2fe4:	f3 e0       	ldi	r31, 0x03	; 3
    2fe6:	10 86       	std	Z+8, r1	; 0x08
    2fe8:	11 86       	std	Z+9, r1	; 0x09
    2fea:	80 8b       	std	Z+16, r24	; 0x10
    2fec:	eb e0       	ldi	r30, 0x0B	; 11
    2fee:	f3 e0       	ldi	r31, 0x03	; 3
    2ff0:	10 86       	std	Z+8, r1	; 0x08
    2ff2:	11 86       	std	Z+9, r1	; 0x09
    2ff4:	80 8b       	std	Z+16, r24	; 0x10
    2ff6:	e6 ee       	ldi	r30, 0xE6	; 230
    2ff8:	f2 e0       	ldi	r31, 0x02	; 2
    2ffa:	10 86       	std	Z+8, r1	; 0x08
    2ffc:	11 86       	std	Z+9, r1	; 0x09
    2ffe:	80 8b       	std	Z+16, r24	; 0x10
    3000:	e5 ec       	ldi	r30, 0xC5	; 197
    3002:	f2 e0       	ldi	r31, 0x02	; 2
    3004:	10 86       	std	Z+8, r1	; 0x08
    3006:	11 86       	std	Z+9, r1	; 0x09
    3008:	80 8b       	std	Z+16, r24	; 0x10
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
    300a:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <encoderX+0x1>
    300e:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <encoderX>
			Init_encoder_interrupt();
    3012:	86 ea       	ldi	r24, 0xA6	; 166
    3014:	92 e0       	ldi	r25, 0x02	; 2
    3016:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    301a:	86 ea       	ldi	r24, 0xA6	; 166
    301c:	92 e0       	ldi	r25, 0x02	; 2
    301e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN7encoder10Init_timerEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
    3022:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <__data_end+0x1>
    3026:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <__data_end>
			Init_encoder_interrupt();
    302a:	8e e9       	ldi	r24, 0x9E	; 158
    302c:	92 e0       	ldi	r25, 0x02	; 2
    302e:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    3032:	8e e9       	ldi	r24, 0x9E	; 158
    3034:	92 e0       	ldi	r25, 0x02	; 2
    3036:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_ZN7encoder10Init_timerEv>
    303a:	08 95       	ret

0000303c <_ZN7MPU6050C1Ev>:

// Get current threshold value
uint8_t MPU6050::getThreshold(void)
{
	return actualThreshold;
}
    303c:	fc 01       	movw	r30, r24
    303e:	14 ae       	std	Z+60, r1	; 0x3c
    3040:	15 ae       	std	Z+61, r1	; 0x3d
    3042:	16 ae       	std	Z+62, r1	; 0x3e
    3044:	17 ae       	std	Z+63, r1	; 0x3f
    3046:	dc 01       	movw	r26, r24
    3048:	a0 5c       	subi	r26, 0xC0	; 192
    304a:	bf 4f       	sbci	r27, 0xFF	; 255
    304c:	1d 92       	st	X+, r1
    304e:	1d 92       	st	X+, r1
    3050:	1d 92       	st	X+, r1
    3052:	1c 92       	st	X, r1
    3054:	13 97       	sbiw	r26, 0x03	; 3
    3056:	14 96       	adiw	r26, 0x04	; 4
    3058:	1d 92       	st	X+, r1
    305a:	1d 92       	st	X+, r1
    305c:	1d 92       	st	X+, r1
    305e:	1c 92       	st	X, r1
    3060:	13 97       	sbiw	r26, 0x03	; 3
    3062:	d4 96       	adiw	r26, 0x34	; 52
    3064:	1c 92       	st	X, r1
    3066:	d0 97       	sbiw	r26, 0x30	; 48
    3068:	1d 92       	st	X+, r1
    306a:	1d 92       	st	X+, r1
    306c:	1d 92       	st	X+, r1
    306e:	1c 92       	st	X, r1
    3070:	13 97       	sbiw	r26, 0x03	; 3
    3072:	14 96       	adiw	r26, 0x04	; 4
    3074:	1d 92       	st	X+, r1
    3076:	1d 92       	st	X+, r1
    3078:	1d 92       	st	X+, r1
    307a:	1c 92       	st	X, r1
    307c:	13 97       	sbiw	r26, 0x03	; 3
    307e:	14 96       	adiw	r26, 0x04	; 4
    3080:	1d 92       	st	X+, r1
    3082:	1d 92       	st	X+, r1
    3084:	1d 92       	st	X+, r1
    3086:	1c 92       	st	X, r1
    3088:	13 97       	sbiw	r26, 0x03	; 3
    308a:	10 aa       	std	Z+48, r1	; 0x30
    308c:	11 aa       	std	Z+49, r1	; 0x31
    308e:	12 aa       	std	Z+50, r1	; 0x32
    3090:	13 aa       	std	Z+51, r1	; 0x33
    3092:	14 aa       	std	Z+52, r1	; 0x34
    3094:	15 aa       	std	Z+53, r1	; 0x35
    3096:	16 aa       	std	Z+54, r1	; 0x36
    3098:	17 aa       	std	Z+55, r1	; 0x37
    309a:	10 ae       	std	Z+56, r1	; 0x38
    309c:	11 ae       	std	Z+57, r1	; 0x39
    309e:	12 ae       	std	Z+58, r1	; 0x3a
    30a0:	13 ae       	std	Z+59, r1	; 0x3b
    30a2:	94 96       	adiw	r26, 0x24	; 36
    30a4:	1d 92       	st	X+, r1
    30a6:	1d 92       	st	X+, r1
    30a8:	1d 92       	st	X+, r1
    30aa:	1c 92       	st	X, r1
    30ac:	13 97       	sbiw	r26, 0x03	; 3
    30ae:	18 97       	sbiw	r26, 0x08	; 8
    30b0:	4f e3       	ldi	r20, 0x3F	; 63
    30b2:	5e e1       	ldi	r21, 0x1E	; 30
    30b4:	6a ef       	ldi	r22, 0xFA	; 250
    30b6:	7b e3       	ldi	r23, 0x3B	; 59
    30b8:	4d 93       	st	X+, r20
    30ba:	5d 93       	st	X+, r21
    30bc:	6d 93       	st	X+, r22
    30be:	7c 93       	st	X, r23
    30c0:	13 97       	sbiw	r26, 0x03	; 3
    30c2:	e0 59       	subi	r30, 0x90	; 144
    30c4:	ff 4f       	sbci	r31, 0xFF	; 255
    30c6:	80 e4       	ldi	r24, 0x40	; 64
    30c8:	9a ed       	ldi	r25, 0xDA	; 218
    30ca:	af e7       	ldi	r26, 0x7F	; 127
    30cc:	b8 e3       	ldi	r27, 0x38	; 56
    30ce:	80 83       	st	Z, r24
    30d0:	91 83       	std	Z+1, r25	; 0x01
    30d2:	a2 83       	std	Z+2, r26	; 0x02
    30d4:	b3 83       	std	Z+3, r27	; 0x03
    30d6:	08 95       	ret

000030d8 <_ZN7MPU60504InitEv>:
    30d8:	2f ef       	ldi	r18, 0xFF	; 255
    30da:	82 e5       	ldi	r24, 0x52	; 82
    30dc:	97 e0       	ldi	r25, 0x07	; 7
    30de:	21 50       	subi	r18, 0x01	; 1
    30e0:	80 40       	sbci	r24, 0x00	; 0
    30e2:	90 40       	sbci	r25, 0x00	; 0
    30e4:	e1 f7       	brne	.-8      	; 0x30de <_ZN7MPU60504InitEv+0x6>
    30e6:	00 c0       	rjmp	.+0      	; 0x30e8 <_ZN7MPU60504InitEv+0x10>
    30e8:	00 00       	nop
    30ea:	80 ed       	ldi	r24, 0xD0	; 208
    30ec:	ce d3       	rcall	.+1948   	; 0x388a <_Z9i2c_starth>
    30ee:	8b e6       	ldi	r24, 0x6B	; 107
    30f0:	39 d4       	rcall	.+2162   	; 0x3964 <_Z9i2c_writeh>
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	37 d4       	rcall	.+2158   	; 0x3964 <_Z9i2c_writeh>
    30f6:	f2 d3       	rcall	.+2020   	; 0x38dc <_Z8i2c_stopv>
    30f8:	80 ed       	ldi	r24, 0xD0	; 208
    30fa:	c7 d3       	rcall	.+1934   	; 0x388a <_Z9i2c_starth>
    30fc:	89 e1       	ldi	r24, 0x19	; 25
    30fe:	32 d4       	rcall	.+2148   	; 0x3964 <_Z9i2c_writeh>
    3100:	89 e1       	ldi	r24, 0x19	; 25
    3102:	30 d4       	rcall	.+2144   	; 0x3964 <_Z9i2c_writeh>
    3104:	eb d3       	rcall	.+2006   	; 0x38dc <_Z8i2c_stopv>
    3106:	80 ed       	ldi	r24, 0xD0	; 208
    3108:	c0 d3       	rcall	.+1920   	; 0x388a <_Z9i2c_starth>
    310a:	8a e1       	ldi	r24, 0x1A	; 26
    310c:	2b d4       	rcall	.+2134   	; 0x3964 <_Z9i2c_writeh>
    310e:	80 e0       	ldi	r24, 0x00	; 0
    3110:	29 d4       	rcall	.+2130   	; 0x3964 <_Z9i2c_writeh>
    3112:	e4 d3       	rcall	.+1992   	; 0x38dc <_Z8i2c_stopv>
    3114:	80 ed       	ldi	r24, 0xD0	; 208
    3116:	b9 d3       	rcall	.+1906   	; 0x388a <_Z9i2c_starth>
    3118:	8b e1       	ldi	r24, 0x1B	; 27
    311a:	24 d4       	rcall	.+2120   	; 0x3964 <_Z9i2c_writeh>
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	22 d4       	rcall	.+2116   	; 0x3964 <_Z9i2c_writeh>
    3120:	dd d3       	rcall	.+1978   	; 0x38dc <_Z8i2c_stopv>
    3122:	80 ed       	ldi	r24, 0xD0	; 208
    3124:	b2 d3       	rcall	.+1892   	; 0x388a <_Z9i2c_starth>
    3126:	88 e3       	ldi	r24, 0x38	; 56
    3128:	1d d4       	rcall	.+2106   	; 0x3964 <_Z9i2c_writeh>
    312a:	81 e0       	ldi	r24, 0x01	; 1
    312c:	1b d4       	rcall	.+2102   	; 0x3964 <_Z9i2c_writeh>
    312e:	d6 d3       	rcall	.+1964   	; 0x38dc <_Z8i2c_stopv>
    3130:	80 ed       	ldi	r24, 0xD0	; 208
    3132:	ab d3       	rcall	.+1878   	; 0x388a <_Z9i2c_starth>
    3134:	8c e1       	ldi	r24, 0x1C	; 28
    3136:	16 d4       	rcall	.+2092   	; 0x3964 <_Z9i2c_writeh>
    3138:	80 e0       	ldi	r24, 0x00	; 0
    313a:	14 d4       	rcall	.+2088   	; 0x3964 <_Z9i2c_writeh>
    313c:	cf c3       	rjmp	.+1950   	; 0x38dc <_Z8i2c_stopv>
    313e:	08 95       	ret

00003140 <_ZN7MPU605017startReadLocationEh>:
    3140:	cf 93       	push	r28
    3142:	c6 2f       	mov	r28, r22
    3144:	80 ed       	ldi	r24, 0xD0	; 208
    3146:	d3 d3       	rcall	.+1958   	; 0x38ee <_Z14i2c_start_waith>
    3148:	8c 2f       	mov	r24, r28
    314a:	0c d4       	rcall	.+2072   	; 0x3964 <_Z9i2c_writeh>
    314c:	81 ed       	ldi	r24, 0xD1	; 209
    314e:	c4 d3       	rcall	.+1928   	; 0x38d8 <_Z13i2c_rep_starth>
    3150:	cf 91       	pop	r28
    3152:	08 95       	ret

00003154 <_ZN7MPU605012readRawAccelEv>:
    3154:	af 92       	push	r10
    3156:	bf 92       	push	r11
    3158:	cf 92       	push	r12
    315a:	df 92       	push	r13
    315c:	ef 92       	push	r14
    315e:	ff 92       	push	r15
    3160:	0f 93       	push	r16
    3162:	1f 93       	push	r17
    3164:	cf 93       	push	r28
    3166:	df 93       	push	r29
    3168:	8c 01       	movw	r16, r24
    316a:	eb 01       	movw	r28, r22
    316c:	6b e3       	ldi	r22, 0x3B	; 59
    316e:	ce 01       	movw	r24, r28
    3170:	e7 df       	rcall	.-50     	; 0x3140 <_ZN7MPU605017startReadLocationEh>
    3172:	0a d4       	rcall	.+2068   	; 0x3988 <_Z11i2c_readAckv>
    3174:	a8 2e       	mov	r10, r24
    3176:	08 d4       	rcall	.+2064   	; 0x3988 <_Z11i2c_readAckv>
    3178:	b8 2e       	mov	r11, r24
    317a:	06 d4       	rcall	.+2060   	; 0x3988 <_Z11i2c_readAckv>
    317c:	c8 2e       	mov	r12, r24
    317e:	04 d4       	rcall	.+2056   	; 0x3988 <_Z11i2c_readAckv>
    3180:	e8 2e       	mov	r14, r24
    3182:	02 d4       	rcall	.+2052   	; 0x3988 <_Z11i2c_readAckv>
    3184:	d8 2e       	mov	r13, r24
    3186:	0b d4       	rcall	.+2070   	; 0x399e <_Z11i2c_readNakv>
    3188:	f8 2e       	mov	r15, r24
    318a:	6b 2d       	mov	r22, r11
    318c:	70 e0       	ldi	r23, 0x00	; 0
    318e:	7a 29       	or	r23, r10
    3190:	07 2e       	mov	r0, r23
    3192:	00 0c       	add	r0, r0
    3194:	88 0b       	sbc	r24, r24
    3196:	99 0b       	sbc	r25, r25
    3198:	82 d7       	rcall	.+3844   	; 0x409e <__floatsisf>
    319a:	fe 01       	movw	r30, r28
    319c:	e8 5b       	subi	r30, 0xB8	; 184
    319e:	ff 4f       	sbci	r31, 0xFF	; 255
    31a0:	20 81       	ld	r18, Z
    31a2:	31 81       	ldd	r19, Z+1	; 0x01
    31a4:	42 81       	ldd	r20, Z+2	; 0x02
    31a6:	53 81       	ldd	r21, Z+3	; 0x03
    31a8:	11 d6       	rcall	.+3106   	; 0x3dcc <__subsf3>
    31aa:	68 83       	st	Y, r22
    31ac:	79 83       	std	Y+1, r23	; 0x01
    31ae:	8a 83       	std	Y+2, r24	; 0x02
    31b0:	9b 83       	std	Y+3, r25	; 0x03
    31b2:	6e 2d       	mov	r22, r14
    31b4:	70 e0       	ldi	r23, 0x00	; 0
    31b6:	7c 29       	or	r23, r12
    31b8:	07 2e       	mov	r0, r23
    31ba:	00 0c       	add	r0, r0
    31bc:	88 0b       	sbc	r24, r24
    31be:	99 0b       	sbc	r25, r25
    31c0:	6e d7       	rcall	.+3804   	; 0x409e <__floatsisf>
    31c2:	fe 01       	movw	r30, r28
    31c4:	e4 5b       	subi	r30, 0xB4	; 180
    31c6:	ff 4f       	sbci	r31, 0xFF	; 255
    31c8:	20 81       	ld	r18, Z
    31ca:	31 81       	ldd	r19, Z+1	; 0x01
    31cc:	42 81       	ldd	r20, Z+2	; 0x02
    31ce:	53 81       	ldd	r21, Z+3	; 0x03
    31d0:	fd d5       	rcall	.+3066   	; 0x3dcc <__subsf3>
    31d2:	6c 83       	std	Y+4, r22	; 0x04
    31d4:	7d 83       	std	Y+5, r23	; 0x05
    31d6:	8e 83       	std	Y+6, r24	; 0x06
    31d8:	9f 83       	std	Y+7, r25	; 0x07
    31da:	6f 2d       	mov	r22, r15
    31dc:	70 e0       	ldi	r23, 0x00	; 0
    31de:	7d 29       	or	r23, r13
    31e0:	07 2e       	mov	r0, r23
    31e2:	00 0c       	add	r0, r0
    31e4:	88 0b       	sbc	r24, r24
    31e6:	99 0b       	sbc	r25, r25
    31e8:	5a d7       	rcall	.+3764   	; 0x409e <__floatsisf>
    31ea:	68 87       	std	Y+8, r22	; 0x08
    31ec:	79 87       	std	Y+9, r23	; 0x09
    31ee:	8a 87       	std	Y+10, r24	; 0x0a
    31f0:	9b 87       	std	Y+11, r25	; 0x0b
    31f2:	74 d3       	rcall	.+1768   	; 0x38dc <_Z8i2c_stopv>
    31f4:	8c e0       	ldi	r24, 0x0C	; 12
    31f6:	fe 01       	movw	r30, r28
    31f8:	d8 01       	movw	r26, r16
    31fa:	01 90       	ld	r0, Z+
    31fc:	0d 92       	st	X+, r0
    31fe:	8a 95       	dec	r24
    3200:	e1 f7       	brne	.-8      	; 0x31fa <_ZN7MPU605012readRawAccelEv+0xa6>
    3202:	c8 01       	movw	r24, r16
    3204:	df 91       	pop	r29
    3206:	cf 91       	pop	r28
    3208:	1f 91       	pop	r17
    320a:	0f 91       	pop	r16
    320c:	ff 90       	pop	r15
    320e:	ef 90       	pop	r14
    3210:	df 90       	pop	r13
    3212:	cf 90       	pop	r12
    3214:	bf 90       	pop	r11
    3216:	af 90       	pop	r10
    3218:	08 95       	ret

0000321a <_ZN7MPU605018readNormalizeAccelEv>:
    321a:	af 92       	push	r10
    321c:	bf 92       	push	r11
    321e:	cf 92       	push	r12
    3220:	df 92       	push	r13
    3222:	ef 92       	push	r14
    3224:	ff 92       	push	r15
    3226:	0f 93       	push	r16
    3228:	1f 93       	push	r17
    322a:	cf 93       	push	r28
    322c:	df 93       	push	r29
    322e:	cd b7       	in	r28, 0x3d	; 61
    3230:	de b7       	in	r29, 0x3e	; 62
    3232:	2c 97       	sbiw	r28, 0x0c	; 12
    3234:	0f b6       	in	r0, 0x3f	; 63
    3236:	f8 94       	cli
    3238:	de bf       	out	0x3e, r29	; 62
    323a:	0f be       	out	0x3f, r0	; 63
    323c:	cd bf       	out	0x3d, r28	; 61
    323e:	5c 01       	movw	r10, r24
    3240:	8b 01       	movw	r16, r22
    3242:	ce 01       	movw	r24, r28
    3244:	01 96       	adiw	r24, 0x01	; 1
    3246:	86 df       	rcall	.-244    	; 0x3154 <_ZN7MPU605012readRawAccelEv>
    3248:	f8 01       	movw	r30, r16
    324a:	e0 59       	subi	r30, 0x90	; 144
    324c:	ff 4f       	sbci	r31, 0xFF	; 255
    324e:	c0 80       	ld	r12, Z
    3250:	d1 80       	ldd	r13, Z+1	; 0x01
    3252:	e2 80       	ldd	r14, Z+2	; 0x02
    3254:	f3 80       	ldd	r15, Z+3	; 0x03
    3256:	a7 01       	movw	r20, r14
    3258:	96 01       	movw	r18, r12
    325a:	f8 01       	movw	r30, r16
    325c:	60 81       	ld	r22, Z
    325e:	71 81       	ldd	r23, Z+1	; 0x01
    3260:	82 81       	ldd	r24, Z+2	; 0x02
    3262:	93 81       	ldd	r25, Z+3	; 0x03
    3264:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
    3268:	f8 01       	movw	r30, r16
    326a:	60 8f       	std	Z+24, r22	; 0x18
    326c:	71 8f       	std	Z+25, r23	; 0x19
    326e:	82 8f       	std	Z+26, r24	; 0x1a
    3270:	93 8f       	std	Z+27, r25	; 0x1b
    3272:	a7 01       	movw	r20, r14
    3274:	96 01       	movw	r18, r12
    3276:	64 81       	ldd	r22, Z+4	; 0x04
    3278:	75 81       	ldd	r23, Z+5	; 0x05
    327a:	86 81       	ldd	r24, Z+6	; 0x06
    327c:	97 81       	ldd	r25, Z+7	; 0x07
    327e:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
    3282:	f8 01       	movw	r30, r16
    3284:	64 8f       	std	Z+28, r22	; 0x1c
    3286:	75 8f       	std	Z+29, r23	; 0x1d
    3288:	86 8f       	std	Z+30, r24	; 0x1e
    328a:	97 8f       	std	Z+31, r25	; 0x1f
    328c:	a7 01       	movw	r20, r14
    328e:	96 01       	movw	r18, r12
    3290:	60 85       	ldd	r22, Z+8	; 0x08
    3292:	71 85       	ldd	r23, Z+9	; 0x09
    3294:	82 85       	ldd	r24, Z+10	; 0x0a
    3296:	93 85       	ldd	r25, Z+11	; 0x0b
    3298:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__mulsf3>
    329c:	f8 01       	movw	r30, r16
    329e:	60 a3       	std	Z+32, r22	; 0x20
    32a0:	71 a3       	std	Z+33, r23	; 0x21
    32a2:	82 a3       	std	Z+34, r24	; 0x22
    32a4:	93 a3       	std	Z+35, r25	; 0x23
    32a6:	8c e0       	ldi	r24, 0x0C	; 12
    32a8:	78 96       	adiw	r30, 0x18	; 24
    32aa:	d5 01       	movw	r26, r10
    32ac:	01 90       	ld	r0, Z+
    32ae:	0d 92       	st	X+, r0
    32b0:	8a 95       	dec	r24
    32b2:	e1 f7       	brne	.-8      	; 0x32ac <_ZN7MPU605018readNormalizeAccelEv+0x92>
    32b4:	c5 01       	movw	r24, r10
    32b6:	2c 96       	adiw	r28, 0x0c	; 12
    32b8:	0f b6       	in	r0, 0x3f	; 63
    32ba:	f8 94       	cli
    32bc:	de bf       	out	0x3e, r29	; 62
    32be:	0f be       	out	0x3f, r0	; 63
    32c0:	cd bf       	out	0x3d, r28	; 61
    32c2:	df 91       	pop	r29
    32c4:	cf 91       	pop	r28
    32c6:	1f 91       	pop	r17
    32c8:	0f 91       	pop	r16
    32ca:	ff 90       	pop	r15
    32cc:	ef 90       	pop	r14
    32ce:	df 90       	pop	r13
    32d0:	cf 90       	pop	r12
    32d2:	bf 90       	pop	r11
    32d4:	af 90       	pop	r10
    32d6:	08 95       	ret

000032d8 <_ZN7MPU605011readRawGyroEv>:
    32d8:	ff 92       	push	r15
    32da:	0f 93       	push	r16
    32dc:	1f 93       	push	r17
    32de:	cf 93       	push	r28
    32e0:	df 93       	push	r29
    32e2:	8c 01       	movw	r16, r24
    32e4:	eb 01       	movw	r28, r22
    32e6:	63 e4       	ldi	r22, 0x43	; 67
    32e8:	ce 01       	movw	r24, r28
    32ea:	2a df       	rcall	.-428    	; 0x3140 <_ZN7MPU605017startReadLocationEh>
    32ec:	4d d3       	rcall	.+1690   	; 0x3988 <_Z11i2c_readAckv>
    32ee:	f8 2e       	mov	r15, r24
    32f0:	4b d3       	rcall	.+1686   	; 0x3988 <_Z11i2c_readAckv>
    32f2:	6f 2d       	mov	r22, r15
    32f4:	70 e0       	ldi	r23, 0x00	; 0
    32f6:	76 2f       	mov	r23, r22
    32f8:	66 27       	eor	r22, r22
    32fa:	68 2b       	or	r22, r24
    32fc:	07 2e       	mov	r0, r23
    32fe:	00 0c       	add	r0, r0
    3300:	88 0b       	sbc	r24, r24
    3302:	99 0b       	sbc	r25, r25
    3304:	cc d6       	rcall	.+3480   	; 0x409e <__floatsisf>
    3306:	6c 87       	std	Y+12, r22	; 0x0c
    3308:	7d 87       	std	Y+13, r23	; 0x0d
    330a:	8e 87       	std	Y+14, r24	; 0x0e
    330c:	9f 87       	std	Y+15, r25	; 0x0f
    330e:	3c d3       	rcall	.+1656   	; 0x3988 <_Z11i2c_readAckv>
    3310:	f8 2e       	mov	r15, r24
    3312:	3a d3       	rcall	.+1652   	; 0x3988 <_Z11i2c_readAckv>
    3314:	6f 2d       	mov	r22, r15
    3316:	70 e0       	ldi	r23, 0x00	; 0
    3318:	76 2f       	mov	r23, r22
    331a:	66 27       	eor	r22, r22
    331c:	68 2b       	or	r22, r24
    331e:	07 2e       	mov	r0, r23
    3320:	00 0c       	add	r0, r0
    3322:	88 0b       	sbc	r24, r24
    3324:	99 0b       	sbc	r25, r25
    3326:	bb d6       	rcall	.+3446   	; 0x409e <__floatsisf>
    3328:	68 8b       	std	Y+16, r22	; 0x10
    332a:	79 8b       	std	Y+17, r23	; 0x11
    332c:	8a 8b       	std	Y+18, r24	; 0x12
    332e:	9b 8b       	std	Y+19, r25	; 0x13
    3330:	2b d3       	rcall	.+1622   	; 0x3988 <_Z11i2c_readAckv>
    3332:	f8 2e       	mov	r15, r24
    3334:	34 d3       	rcall	.+1640   	; 0x399e <_Z11i2c_readNakv>
    3336:	6f 2d       	mov	r22, r15
    3338:	70 e0       	ldi	r23, 0x00	; 0
    333a:	76 2f       	mov	r23, r22
    333c:	66 27       	eor	r22, r22
    333e:	68 2b       	or	r22, r24
    3340:	07 2e       	mov	r0, r23
    3342:	00 0c       	add	r0, r0
    3344:	88 0b       	sbc	r24, r24
    3346:	99 0b       	sbc	r25, r25
    3348:	aa d6       	rcall	.+3412   	; 0x409e <__floatsisf>
    334a:	6c 8b       	std	Y+20, r22	; 0x14
    334c:	7d 8b       	std	Y+21, r23	; 0x15
    334e:	8e 8b       	std	Y+22, r24	; 0x16
    3350:	9f 8b       	std	Y+23, r25	; 0x17
    3352:	c4 d2       	rcall	.+1416   	; 0x38dc <_Z8i2c_stopv>
    3354:	8c e0       	ldi	r24, 0x0C	; 12
    3356:	fe 01       	movw	r30, r28
    3358:	3c 96       	adiw	r30, 0x0c	; 12
    335a:	d8 01       	movw	r26, r16
    335c:	01 90       	ld	r0, Z+
    335e:	0d 92       	st	X+, r0
    3360:	8a 95       	dec	r24
    3362:	e1 f7       	brne	.-8      	; 0x335c <_ZN7MPU605011readRawGyroEv+0x84>
    3364:	c8 01       	movw	r24, r16
    3366:	df 91       	pop	r29
    3368:	cf 91       	pop	r28
    336a:	1f 91       	pop	r17
    336c:	0f 91       	pop	r16
    336e:	ff 90       	pop	r15
    3370:	08 95       	ret

00003372 <_ZN7MPU605012setThresholdEh>:

// Set treshold value
void MPU6050::setThreshold(uint8_t multiple)
{
    3372:	cf 92       	push	r12
    3374:	df 92       	push	r13
    3376:	ef 92       	push	r14
    3378:	ff 92       	push	r15
    337a:	1f 93       	push	r17
    337c:	cf 93       	push	r28
    337e:	df 93       	push	r29
    3380:	ec 01       	movw	r28, r24
    3382:	16 2f       	mov	r17, r22
	if (multiple > 0)
    3384:	66 23       	and	r22, r22
    3386:	09 f4       	brne	.+2      	; 0x338a <_ZN7MPU605012setThresholdEh+0x18>
    3388:	3b c0       	rjmp	.+118    	; 0x3400 <_ZN7MPU605012setThresholdEh+0x8e>
	{
		// If not calibrated, need calibrate
		if (!useCalibrate)
    338a:	fc 01       	movw	r30, r24
    338c:	e8 58       	subi	r30, 0x88	; 136
    338e:	ff 4f       	sbci	r31, 0xFF	; 255
    3390:	80 81       	ld	r24, Z
    3392:	81 11       	cpse	r24, r1
    3394:	03 c0       	rjmp	.+6      	; 0x339c <_ZN7MPU605012setThresholdEh+0x2a>
		{
			calibrateGyro();
    3396:	62 e3       	ldi	r22, 0x32	; 50
    3398:	ce 01       	movw	r24, r28
    339a:	51 d0       	rcall	.+162    	; 0x343e <_ZN7MPU605013calibrateGyroEh>
		}

		// Calculate threshold vectors
		tg.XAxis = th.XAxis * multiple;
    339c:	61 2f       	mov	r22, r17
    339e:	70 e0       	ldi	r23, 0x00	; 0
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	7c d6       	rcall	.+3320   	; 0x409e <__floatsisf>
    33a6:	6b 01       	movw	r12, r22
    33a8:	7c 01       	movw	r14, r24
    33aa:	9b 01       	movw	r18, r22
    33ac:	ac 01       	movw	r20, r24
    33ae:	fe 01       	movw	r30, r28
    33b0:	ec 5a       	subi	r30, 0xAC	; 172
    33b2:	ff 4f       	sbci	r31, 0xFF	; 255
    33b4:	60 81       	ld	r22, Z
    33b6:	71 81       	ldd	r23, Z+1	; 0x01
    33b8:	82 81       	ldd	r24, Z+2	; 0x02
    33ba:	93 81       	ldd	r25, Z+3	; 0x03
    33bc:	89 d7       	rcall	.+3858   	; 0x42d0 <__mulsf3>
    33be:	68 ab       	std	Y+48, r22	; 0x30
    33c0:	79 ab       	std	Y+49, r23	; 0x31
    33c2:	8a ab       	std	Y+50, r24	; 0x32
    33c4:	9b ab       	std	Y+51, r25	; 0x33
		tg.YAxis = th.YAxis * multiple;
    33c6:	a7 01       	movw	r20, r14
    33c8:	96 01       	movw	r18, r12
    33ca:	fe 01       	movw	r30, r28
    33cc:	e8 5a       	subi	r30, 0xA8	; 168
    33ce:	ff 4f       	sbci	r31, 0xFF	; 255
    33d0:	60 81       	ld	r22, Z
    33d2:	71 81       	ldd	r23, Z+1	; 0x01
    33d4:	82 81       	ldd	r24, Z+2	; 0x02
    33d6:	93 81       	ldd	r25, Z+3	; 0x03
    33d8:	7b d7       	rcall	.+3830   	; 0x42d0 <__mulsf3>
    33da:	6c ab       	std	Y+52, r22	; 0x34
    33dc:	7d ab       	std	Y+53, r23	; 0x35
    33de:	8e ab       	std	Y+54, r24	; 0x36
    33e0:	9f ab       	std	Y+55, r25	; 0x37
		tg.ZAxis = th.ZAxis * multiple;
    33e2:	a7 01       	movw	r20, r14
    33e4:	96 01       	movw	r18, r12
    33e6:	fe 01       	movw	r30, r28
    33e8:	e4 5a       	subi	r30, 0xA4	; 164
    33ea:	ff 4f       	sbci	r31, 0xFF	; 255
    33ec:	60 81       	ld	r22, Z
    33ee:	71 81       	ldd	r23, Z+1	; 0x01
    33f0:	82 81       	ldd	r24, Z+2	; 0x02
    33f2:	93 81       	ldd	r25, Z+3	; 0x03
    33f4:	6d d7       	rcall	.+3802   	; 0x42d0 <__mulsf3>
    33f6:	68 af       	std	Y+56, r22	; 0x38
    33f8:	79 af       	std	Y+57, r23	; 0x39
    33fa:	8a af       	std	Y+58, r24	; 0x3a
    33fc:	9b af       	std	Y+59, r25	; 0x3b
    33fe:	0c c0       	rjmp	.+24     	; 0x3418 <_ZN7MPU605012setThresholdEh+0xa6>
	} else
	{
		// No threshold
		tg.XAxis = 0;
    3400:	18 aa       	std	Y+48, r1	; 0x30
    3402:	19 aa       	std	Y+49, r1	; 0x31
    3404:	1a aa       	std	Y+50, r1	; 0x32
    3406:	1b aa       	std	Y+51, r1	; 0x33
		tg.YAxis = 0;
    3408:	1c aa       	std	Y+52, r1	; 0x34
    340a:	1d aa       	std	Y+53, r1	; 0x35
    340c:	1e aa       	std	Y+54, r1	; 0x36
    340e:	1f aa       	std	Y+55, r1	; 0x37
		tg.ZAxis = 0;
    3410:	18 ae       	std	Y+56, r1	; 0x38
    3412:	19 ae       	std	Y+57, r1	; 0x39
    3414:	1a ae       	std	Y+58, r1	; 0x3a
    3416:	1b ae       	std	Y+59, r1	; 0x3b
	}

	// Remember old threshold value
	actualThreshold = multiple;
    3418:	cc 58       	subi	r28, 0x8C	; 140
    341a:	df 4f       	sbci	r29, 0xFF	; 255
    341c:	61 2f       	mov	r22, r17
    341e:	70 e0       	ldi	r23, 0x00	; 0
    3420:	80 e0       	ldi	r24, 0x00	; 0
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	3a d6       	rcall	.+3188   	; 0x409a <__floatunsisf>
    3426:	68 83       	st	Y, r22
    3428:	79 83       	std	Y+1, r23	; 0x01
    342a:	8a 83       	std	Y+2, r24	; 0x02
    342c:	9b 83       	std	Y+3, r25	; 0x03
}
    342e:	df 91       	pop	r29
    3430:	cf 91       	pop	r28
    3432:	1f 91       	pop	r17
    3434:	ff 90       	pop	r15
    3436:	ef 90       	pop	r14
    3438:	df 90       	pop	r13
    343a:	cf 90       	pop	r12
    343c:	08 95       	ret

0000343e <_ZN7MPU605013calibrateGyroEh>:
	offsetAccelero.XAxis = sumX / samples;
	offsetAccelero.YAxis = sumY / samples;
}

void MPU6050::calibrateGyro(uint8_t samples)
{
    343e:	2f 92       	push	r2
    3440:	3f 92       	push	r3
    3442:	4f 92       	push	r4
    3444:	5f 92       	push	r5
    3446:	6f 92       	push	r6
    3448:	7f 92       	push	r7
    344a:	8f 92       	push	r8
    344c:	9f 92       	push	r9
    344e:	af 92       	push	r10
    3450:	bf 92       	push	r11
    3452:	cf 92       	push	r12
    3454:	df 92       	push	r13
    3456:	ef 92       	push	r14
    3458:	ff 92       	push	r15
    345a:	0f 93       	push	r16
    345c:	1f 93       	push	r17
    345e:	cf 93       	push	r28
    3460:	df 93       	push	r29
    3462:	cd b7       	in	r28, 0x3d	; 61
    3464:	de b7       	in	r29, 0x3e	; 62
    3466:	a4 97       	sbiw	r28, 0x24	; 36
    3468:	0f b6       	in	r0, 0x3f	; 63
    346a:	f8 94       	cli
    346c:	de bf       	out	0x3e, r29	; 62
    346e:	0f be       	out	0x3f, r0	; 63
    3470:	cd bf       	out	0x3d, r28	; 61
    3472:	1c 01       	movw	r2, r24
    3474:	06 2f       	mov	r16, r22
	// Set calibrate
	useCalibrate = true;
    3476:	fc 01       	movw	r30, r24
    3478:	e8 58       	subi	r30, 0x88	; 136
    347a:	ff 4f       	sbci	r31, 0xFF	; 255
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	80 83       	st	Z, r24
	float sigmaX = 0;
	float sigmaY = 0;
	float sigmaZ = 0;

	// Read n-samples
	for (uint8_t i = 0; i < samples; ++i)
    3480:	66 23       	and	r22, r22
    3482:	09 f4       	brne	.+2      	; 0x3486 <_ZN7MPU605013calibrateGyroEh+0x48>
    3484:	87 c0       	rjmp	.+270    	; 0x3594 <_ZN7MPU605013calibrateGyroEh+0x156>
    3486:	10 e0       	ldi	r17, 0x00	; 0
    3488:	19 8e       	std	Y+25, r1	; 0x19
    348a:	1a 8e       	std	Y+26, r1	; 0x1a
    348c:	1b 8e       	std	Y+27, r1	; 0x1b
    348e:	1c 8e       	std	Y+28, r1	; 0x1c
    3490:	1d 8a       	std	Y+21, r1	; 0x15
    3492:	1e 8a       	std	Y+22, r1	; 0x16
    3494:	1f 8a       	std	Y+23, r1	; 0x17
    3496:	18 8e       	std	Y+24, r1	; 0x18
    3498:	1d 86       	std	Y+13, r1	; 0x0d
    349a:	1e 86       	std	Y+14, r1	; 0x0e
    349c:	1f 86       	std	Y+15, r1	; 0x0f
    349e:	18 8a       	std	Y+16, r1	; 0x10
    34a0:	19 a2       	std	Y+33, r1	; 0x21
    34a2:	1a a2       	std	Y+34, r1	; 0x22
    34a4:	1b a2       	std	Y+35, r1	; 0x23
    34a6:	1c a2       	std	Y+36, r1	; 0x24
    34a8:	1d 8e       	std	Y+29, r1	; 0x1d
    34aa:	1e 8e       	std	Y+30, r1	; 0x1e
    34ac:	1f 8e       	std	Y+31, r1	; 0x1f
    34ae:	18 a2       	std	Y+32, r1	; 0x20
    34b0:	19 8a       	std	Y+17, r1	; 0x11
    34b2:	1a 8a       	std	Y+18, r1	; 0x12
    34b4:	1b 8a       	std	Y+19, r1	; 0x13
    34b6:	1c 8a       	std	Y+20, r1	; 0x14
	{
		readRawGyro();
    34b8:	b1 01       	movw	r22, r2
    34ba:	ce 01       	movw	r24, r28
    34bc:	01 96       	adiw	r24, 0x01	; 1
    34be:	0c df       	rcall	.-488    	; 0x32d8 <_ZN7MPU605011readRawGyroEv>
		sumX += rg.XAxis;
    34c0:	f1 01       	movw	r30, r2
    34c2:	44 84       	ldd	r4, Z+12	; 0x0c
    34c4:	55 84       	ldd	r5, Z+13	; 0x0d
    34c6:	66 84       	ldd	r6, Z+14	; 0x0e
    34c8:	77 84       	ldd	r7, Z+15	; 0x0f
    34ca:	a3 01       	movw	r20, r6
    34cc:	92 01       	movw	r18, r4
    34ce:	69 89       	ldd	r22, Y+17	; 0x11
    34d0:	7a 89       	ldd	r23, Y+18	; 0x12
    34d2:	8b 89       	ldd	r24, Y+19	; 0x13
    34d4:	9c 89       	ldd	r25, Y+20	; 0x14
    34d6:	7b d4       	rcall	.+2294   	; 0x3dce <__addsf3>
    34d8:	69 8b       	std	Y+17, r22	; 0x11
    34da:	7a 8b       	std	Y+18, r23	; 0x12
    34dc:	8b 8b       	std	Y+19, r24	; 0x13
    34de:	9c 8b       	std	Y+20, r25	; 0x14
		sumY += rg.YAxis;
    34e0:	f1 01       	movw	r30, r2
    34e2:	80 88       	ldd	r8, Z+16	; 0x10
    34e4:	91 88       	ldd	r9, Z+17	; 0x11
    34e6:	a2 88       	ldd	r10, Z+18	; 0x12
    34e8:	b3 88       	ldd	r11, Z+19	; 0x13
    34ea:	a5 01       	movw	r20, r10
    34ec:	94 01       	movw	r18, r8
    34ee:	6d 8d       	ldd	r22, Y+29	; 0x1d
    34f0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    34f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34f4:	98 a1       	ldd	r25, Y+32	; 0x20
    34f6:	6b d4       	rcall	.+2262   	; 0x3dce <__addsf3>
    34f8:	6d 8f       	std	Y+29, r22	; 0x1d
    34fa:	7e 8f       	std	Y+30, r23	; 0x1e
    34fc:	8f 8f       	std	Y+31, r24	; 0x1f
    34fe:	98 a3       	std	Y+32, r25	; 0x20
		sumZ += rg.ZAxis;
    3500:	f1 01       	movw	r30, r2
    3502:	c4 88       	ldd	r12, Z+20	; 0x14
    3504:	d5 88       	ldd	r13, Z+21	; 0x15
    3506:	e6 88       	ldd	r14, Z+22	; 0x16
    3508:	f7 88       	ldd	r15, Z+23	; 0x17
    350a:	a7 01       	movw	r20, r14
    350c:	96 01       	movw	r18, r12
    350e:	69 a1       	ldd	r22, Y+33	; 0x21
    3510:	7a a1       	ldd	r23, Y+34	; 0x22
    3512:	8b a1       	ldd	r24, Y+35	; 0x23
    3514:	9c a1       	ldd	r25, Y+36	; 0x24
    3516:	5b d4       	rcall	.+2230   	; 0x3dce <__addsf3>
    3518:	69 a3       	std	Y+33, r22	; 0x21
    351a:	7a a3       	std	Y+34, r23	; 0x22
    351c:	8b a3       	std	Y+35, r24	; 0x23
    351e:	9c a3       	std	Y+36, r25	; 0x24

		sigmaX += rg.XAxis * rg.XAxis;
    3520:	a3 01       	movw	r20, r6
    3522:	92 01       	movw	r18, r4
    3524:	c3 01       	movw	r24, r6
    3526:	b2 01       	movw	r22, r4
    3528:	d3 d6       	rcall	.+3494   	; 0x42d0 <__mulsf3>
    352a:	9b 01       	movw	r18, r22
    352c:	ac 01       	movw	r20, r24
    352e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3530:	7e 85       	ldd	r23, Y+14	; 0x0e
    3532:	8f 85       	ldd	r24, Y+15	; 0x0f
    3534:	98 89       	ldd	r25, Y+16	; 0x10
    3536:	4b d4       	rcall	.+2198   	; 0x3dce <__addsf3>
    3538:	6d 87       	std	Y+13, r22	; 0x0d
    353a:	7e 87       	std	Y+14, r23	; 0x0e
    353c:	8f 87       	std	Y+15, r24	; 0x0f
    353e:	98 8b       	std	Y+16, r25	; 0x10
		sigmaY += rg.YAxis * rg.YAxis;
    3540:	a5 01       	movw	r20, r10
    3542:	94 01       	movw	r18, r8
    3544:	c5 01       	movw	r24, r10
    3546:	b4 01       	movw	r22, r8
    3548:	c3 d6       	rcall	.+3462   	; 0x42d0 <__mulsf3>
    354a:	9b 01       	movw	r18, r22
    354c:	ac 01       	movw	r20, r24
    354e:	6d 89       	ldd	r22, Y+21	; 0x15
    3550:	7e 89       	ldd	r23, Y+22	; 0x16
    3552:	8f 89       	ldd	r24, Y+23	; 0x17
    3554:	98 8d       	ldd	r25, Y+24	; 0x18
    3556:	3b d4       	rcall	.+2166   	; 0x3dce <__addsf3>
    3558:	6d 8b       	std	Y+21, r22	; 0x15
    355a:	7e 8b       	std	Y+22, r23	; 0x16
    355c:	8f 8b       	std	Y+23, r24	; 0x17
    355e:	98 8f       	std	Y+24, r25	; 0x18
		sigmaZ += rg.ZAxis * rg.ZAxis;
    3560:	a7 01       	movw	r20, r14
    3562:	96 01       	movw	r18, r12
    3564:	c7 01       	movw	r24, r14
    3566:	b6 01       	movw	r22, r12
    3568:	b3 d6       	rcall	.+3430   	; 0x42d0 <__mulsf3>
    356a:	9b 01       	movw	r18, r22
    356c:	ac 01       	movw	r20, r24
    356e:	69 8d       	ldd	r22, Y+25	; 0x19
    3570:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3572:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3574:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3576:	2b d4       	rcall	.+2134   	; 0x3dce <__addsf3>
    3578:	69 8f       	std	Y+25, r22	; 0x19
    357a:	7a 8f       	std	Y+26, r23	; 0x1a
    357c:	8b 8f       	std	Y+27, r24	; 0x1b
    357e:	9c 8f       	std	Y+28, r25	; 0x1c
    3580:	8f e1       	ldi	r24, 0x1F	; 31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3582:	9e e4       	ldi	r25, 0x4E	; 78
    3584:	01 97       	sbiw	r24, 0x01	; 1
    3586:	f1 f7       	brne	.-4      	; 0x3584 <_ZN7MPU605013calibrateGyroEh+0x146>
    3588:	00 c0       	rjmp	.+0      	; 0x358a <_ZN7MPU605013calibrateGyroEh+0x14c>
    358a:	00 00       	nop
    358c:	1f 5f       	subi	r17, 0xFF	; 255
	float sigmaX = 0;
	float sigmaY = 0;
	float sigmaZ = 0;

	// Read n-samples
	for (uint8_t i = 0; i < samples; ++i)
    358e:	01 13       	cpse	r16, r17
    3590:	93 cf       	rjmp	.-218    	; 0x34b8 <_ZN7MPU605013calibrateGyroEh+0x7a>
    3592:	18 c0       	rjmp	.+48     	; 0x35c4 <_ZN7MPU605013calibrateGyroEh+0x186>
    3594:	19 8e       	std	Y+25, r1	; 0x19
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
	float sigmaX = 0;
	float sigmaY = 0;
	float sigmaZ = 0;
    3596:	1a 8e       	std	Y+26, r1	; 0x1a
    3598:	1b 8e       	std	Y+27, r1	; 0x1b
    359a:	1c 8e       	std	Y+28, r1	; 0x1c
    359c:	1d 8a       	std	Y+21, r1	; 0x15
	// Reset values
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
	float sigmaX = 0;
	float sigmaY = 0;
    359e:	1e 8a       	std	Y+22, r1	; 0x16
    35a0:	1f 8a       	std	Y+23, r1	; 0x17
    35a2:	18 8e       	std	Y+24, r1	; 0x18
    35a4:	1d 86       	std	Y+13, r1	; 0x0d

	// Reset values
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
	float sigmaX = 0;
    35a6:	1e 86       	std	Y+14, r1	; 0x0e
    35a8:	1f 86       	std	Y+15, r1	; 0x0f
    35aa:	18 8a       	std	Y+16, r1	; 0x10
    35ac:	19 a2       	std	Y+33, r1	; 0x21
	useCalibrate = true;

	// Reset values
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
    35ae:	1a a2       	std	Y+34, r1	; 0x22
    35b0:	1b a2       	std	Y+35, r1	; 0x23
    35b2:	1c a2       	std	Y+36, r1	; 0x24
    35b4:	1d 8e       	std	Y+29, r1	; 0x1d
	// Set calibrate
	useCalibrate = true;

	// Reset values
	float sumX = 0;
	float sumY = 0;
    35b6:	1e 8e       	std	Y+30, r1	; 0x1e
    35b8:	1f 8e       	std	Y+31, r1	; 0x1f
    35ba:	18 a2       	std	Y+32, r1	; 0x20
{
	// Set calibrate
	useCalibrate = true;

	// Reset values
	float sumX = 0;
    35bc:	19 8a       	std	Y+17, r1	; 0x11
    35be:	1a 8a       	std	Y+18, r1	; 0x12
    35c0:	1b 8a       	std	Y+19, r1	; 0x13
    35c2:	1c 8a       	std	Y+20, r1	; 0x14

		_delay_ms(5);
	}

	// Calculate delta vectors
	dg.XAxis = sumX / samples;
    35c4:	60 2f       	mov	r22, r16
    35c6:	70 e0       	ldi	r23, 0x00	; 0
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	68 d5       	rcall	.+2768   	; 0x409e <__floatsisf>
    35ce:	4b 01       	movw	r8, r22
    35d0:	5c 01       	movw	r10, r24
    35d2:	9b 01       	movw	r18, r22
    35d4:	ac 01       	movw	r20, r24
    35d6:	69 89       	ldd	r22, Y+17	; 0x11
    35d8:	7a 89       	ldd	r23, Y+18	; 0x12
    35da:	8b 89       	ldd	r24, Y+19	; 0x13
    35dc:	9c 89       	ldd	r25, Y+20	; 0x14
    35de:	c4 d4       	rcall	.+2440   	; 0x3f68 <__divsf3>
    35e0:	6b 01       	movw	r12, r22
    35e2:	7c 01       	movw	r14, r24
    35e4:	f1 01       	movw	r30, r2
    35e6:	64 af       	std	Z+60, r22	; 0x3c
    35e8:	75 af       	std	Z+61, r23	; 0x3d
    35ea:	86 af       	std	Z+62, r24	; 0x3e
    35ec:	97 af       	std	Z+63, r25	; 0x3f
	dg.YAxis = sumY / samples;
    35ee:	a5 01       	movw	r20, r10
    35f0:	94 01       	movw	r18, r8
    35f2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    35f4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    35f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35f8:	98 a1       	ldd	r25, Y+32	; 0x20
    35fa:	b6 d4       	rcall	.+2412   	; 0x3f68 <__divsf3>
    35fc:	2b 01       	movw	r4, r22
    35fe:	3c 01       	movw	r6, r24
    3600:	f1 01       	movw	r30, r2
    3602:	e0 5c       	subi	r30, 0xC0	; 192
    3604:	ff 4f       	sbci	r31, 0xFF	; 255
    3606:	60 83       	st	Z, r22
    3608:	71 83       	std	Z+1, r23	; 0x01
    360a:	82 83       	std	Z+2, r24	; 0x02
    360c:	93 83       	std	Z+3, r25	; 0x03
	dg.ZAxis = sumZ / samples;
    360e:	a5 01       	movw	r20, r10
    3610:	94 01       	movw	r18, r8
    3612:	69 a1       	ldd	r22, Y+33	; 0x21
    3614:	7a a1       	ldd	r23, Y+34	; 0x22
    3616:	8b a1       	ldd	r24, Y+35	; 0x23
    3618:	9c a1       	ldd	r25, Y+36	; 0x24
    361a:	a6 d4       	rcall	.+2380   	; 0x3f68 <__divsf3>
    361c:	4b 01       	movw	r8, r22
    361e:	5c 01       	movw	r10, r24
    3620:	f1 01       	movw	r30, r2
    3622:	ec 5b       	subi	r30, 0xBC	; 188
    3624:	ff 4f       	sbci	r31, 0xFF	; 255
    3626:	60 83       	st	Z, r22
    3628:	71 83       	std	Z+1, r23	; 0x01
    362a:	82 83       	std	Z+2, r24	; 0x02
    362c:	93 83       	std	Z+3, r25	; 0x03

	// Calculate threshold vectors
	th.XAxis = sqrt((sigmaX / 50) - (dg.XAxis * dg.XAxis));
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	48 e4       	ldi	r20, 0x48	; 72
    3634:	52 e4       	ldi	r21, 0x42	; 66
    3636:	6d 85       	ldd	r22, Y+13	; 0x0d
    3638:	7e 85       	ldd	r23, Y+14	; 0x0e
    363a:	8f 85       	ldd	r24, Y+15	; 0x0f
    363c:	98 89       	ldd	r25, Y+16	; 0x10
    363e:	94 d4       	rcall	.+2344   	; 0x3f68 <__divsf3>
    3640:	69 8b       	std	Y+17, r22	; 0x11
    3642:	7a 8b       	std	Y+18, r23	; 0x12
    3644:	8b 8b       	std	Y+19, r24	; 0x13
    3646:	9c 8b       	std	Y+20, r25	; 0x14
    3648:	20 e0       	ldi	r18, 0x00	; 0
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	48 e4       	ldi	r20, 0x48	; 72
    364e:	52 e4       	ldi	r21, 0x42	; 66
    3650:	6d 85       	ldd	r22, Y+13	; 0x0d
    3652:	7e 85       	ldd	r23, Y+14	; 0x0e
    3654:	8f 85       	ldd	r24, Y+15	; 0x0f
    3656:	98 89       	ldd	r25, Y+16	; 0x10
    3658:	87 d4       	rcall	.+2318   	; 0x3f68 <__divsf3>
    365a:	6d 87       	std	Y+13, r22	; 0x0d
    365c:	7e 87       	std	Y+14, r23	; 0x0e
    365e:	8f 87       	std	Y+15, r24	; 0x0f
    3660:	98 8b       	std	Y+16, r25	; 0x10
    3662:	a7 01       	movw	r20, r14
    3664:	96 01       	movw	r18, r12
    3666:	c7 01       	movw	r24, r14
    3668:	b6 01       	movw	r22, r12
    366a:	32 d6       	rcall	.+3172   	; 0x42d0 <__mulsf3>
    366c:	9b 01       	movw	r18, r22
    366e:	ac 01       	movw	r20, r24
    3670:	6d 85       	ldd	r22, Y+13	; 0x0d
    3672:	7e 85       	ldd	r23, Y+14	; 0x0e
    3674:	8f 85       	ldd	r24, Y+15	; 0x0f
    3676:	98 89       	ldd	r25, Y+16	; 0x10
    3678:	a9 d3       	rcall	.+1874   	; 0x3dcc <__subsf3>
    367a:	97 d6       	rcall	.+3374   	; 0x43aa <sqrt>
    367c:	f1 01       	movw	r30, r2
    367e:	ec 5a       	subi	r30, 0xAC	; 172
    3680:	ff 4f       	sbci	r31, 0xFF	; 255
    3682:	60 83       	st	Z, r22
    3684:	71 83       	std	Z+1, r23	; 0x01
    3686:	82 83       	std	Z+2, r24	; 0x02
    3688:	93 83       	std	Z+3, r25	; 0x03
	th.YAxis = sqrt((sigmaY / 50) - (dg.YAxis * dg.YAxis));
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	48 e4       	ldi	r20, 0x48	; 72
    3690:	52 e4       	ldi	r21, 0x42	; 66
    3692:	6d 89       	ldd	r22, Y+21	; 0x15
    3694:	7e 89       	ldd	r23, Y+22	; 0x16
    3696:	8f 89       	ldd	r24, Y+23	; 0x17
    3698:	98 8d       	ldd	r25, Y+24	; 0x18
    369a:	66 d4       	rcall	.+2252   	; 0x3f68 <__divsf3>
    369c:	6b 01       	movw	r12, r22
    369e:	7c 01       	movw	r14, r24
    36a0:	a3 01       	movw	r20, r6
    36a2:	92 01       	movw	r18, r4
    36a4:	c3 01       	movw	r24, r6
    36a6:	b2 01       	movw	r22, r4
    36a8:	13 d6       	rcall	.+3110   	; 0x42d0 <__mulsf3>
    36aa:	9b 01       	movw	r18, r22
    36ac:	ac 01       	movw	r20, r24
    36ae:	c7 01       	movw	r24, r14
    36b0:	b6 01       	movw	r22, r12
    36b2:	8c d3       	rcall	.+1816   	; 0x3dcc <__subsf3>
    36b4:	7a d6       	rcall	.+3316   	; 0x43aa <sqrt>
    36b6:	f1 01       	movw	r30, r2
    36b8:	e8 5a       	subi	r30, 0xA8	; 168
    36ba:	ff 4f       	sbci	r31, 0xFF	; 255
    36bc:	60 83       	st	Z, r22
    36be:	71 83       	std	Z+1, r23	; 0x01
    36c0:	82 83       	std	Z+2, r24	; 0x02
    36c2:	93 83       	std	Z+3, r25	; 0x03
	th.ZAxis = sqrt((sigmaZ / 50) - (dg.ZAxis * dg.ZAxis));
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	48 e4       	ldi	r20, 0x48	; 72
    36ca:	52 e4       	ldi	r21, 0x42	; 66
    36cc:	69 8d       	ldd	r22, Y+25	; 0x19
    36ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36d4:	49 d4       	rcall	.+2194   	; 0x3f68 <__divsf3>
    36d6:	6b 01       	movw	r12, r22
    36d8:	7c 01       	movw	r14, r24
    36da:	a5 01       	movw	r20, r10
    36dc:	94 01       	movw	r18, r8
    36de:	c5 01       	movw	r24, r10
    36e0:	b4 01       	movw	r22, r8
    36e2:	f6 d5       	rcall	.+3052   	; 0x42d0 <__mulsf3>
    36e4:	9b 01       	movw	r18, r22
    36e6:	ac 01       	movw	r20, r24
    36e8:	c7 01       	movw	r24, r14
    36ea:	b6 01       	movw	r22, r12
    36ec:	6f d3       	rcall	.+1758   	; 0x3dcc <__subsf3>
    36ee:	5d d6       	rcall	.+3258   	; 0x43aa <sqrt>
    36f0:	f1 01       	movw	r30, r2
    36f2:	e4 5a       	subi	r30, 0xA4	; 164
    36f4:	ff 4f       	sbci	r31, 0xFF	; 255
    36f6:	60 83       	st	Z, r22
    36f8:	71 83       	std	Z+1, r23	; 0x01
    36fa:	82 83       	std	Z+2, r24	; 0x02
    36fc:	93 83       	std	Z+3, r25	; 0x03
    36fe:	78 96       	adiw	r30, 0x18	; 24

	// If already set threshold, recalculate threshold vectors
	if (actualThreshold > 0)
    3700:	c0 80       	ld	r12, Z
    3702:	d1 80       	ldd	r13, Z+1	; 0x01
    3704:	e2 80       	ldd	r14, Z+2	; 0x02
    3706:	f3 80       	ldd	r15, Z+3	; 0x03
    3708:	20 e0       	ldi	r18, 0x00	; 0
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	a9 01       	movw	r20, r18
    370e:	c7 01       	movw	r24, r14
    3710:	b6 01       	movw	r22, r12
    3712:	d3 d5       	rcall	.+2982   	; 0x42ba <__gesf2>
    3714:	18 16       	cp	r1, r24
    3716:	2c f4       	brge	.+10     	; 0x3722 <_ZN7MPU605013calibrateGyroEh+0x2e4>
    3718:	c7 01       	movw	r24, r14
    371a:	b6 01       	movw	r22, r12
	{
		setThreshold(actualThreshold);
    371c:	92 d4       	rcall	.+2340   	; 0x4042 <__fixunssfsi>
    371e:	c1 01       	movw	r24, r2
    3720:	28 de       	rcall	.-944    	; 0x3372 <_ZN7MPU605012setThresholdEh>
    3722:	a4 96       	adiw	r28, 0x24	; 36
    3724:	0f b6       	in	r0, 0x3f	; 63
    3726:	f8 94       	cli
    3728:	de bf       	out	0x3e, r29	; 62
	}
}
    372a:	0f be       	out	0x3f, r0	; 63
    372c:	cd bf       	out	0x3d, r28	; 61
    372e:	df 91       	pop	r29
    3730:	cf 91       	pop	r28
    3732:	1f 91       	pop	r17
    3734:	0f 91       	pop	r16
    3736:	ff 90       	pop	r15
    3738:	ef 90       	pop	r14
    373a:	df 90       	pop	r13
    373c:	cf 90       	pop	r12
    373e:	bf 90       	pop	r11
    3740:	af 90       	pop	r10
    3742:	9f 90       	pop	r9
    3744:	8f 90       	pop	r8
    3746:	7f 90       	pop	r7
    3748:	6f 90       	pop	r6
    374a:	5f 90       	pop	r5
    374c:	4f 90       	pop	r4
    374e:	3f 90       	pop	r3
    3750:	2f 90       	pop	r2
    3752:	08 95       	ret

00003754 <_ZN7MPU60508rateGyroEv>:
    3754:	ef 92       	push	r14
    3756:	ff 92       	push	r15
    3758:	0f 93       	push	r16
    375a:	1f 93       	push	r17

	// Remember old threshold value
	actualThreshold = multiple;
}

void MPU6050::rateGyro(){
    375c:	cf 93       	push	r28
    375e:	df 93       	push	r29
    3760:	cd b7       	in	r28, 0x3d	; 61
    3762:	de b7       	in	r29, 0x3e	; 62
    3764:	2c 97       	sbiw	r28, 0x0c	; 12
    3766:	0f b6       	in	r0, 0x3f	; 63
    3768:	f8 94       	cli
    376a:	de bf       	out	0x3e, r29	; 62
    376c:	0f be       	out	0x3f, r0	; 63
    376e:	cd bf       	out	0x3d, r28	; 61
    3770:	8c 01       	movw	r16, r24
	readRawGyro();
    3772:	bc 01       	movw	r22, r24
    3774:	ce 01       	movw	r24, r28
    3776:	01 96       	adiw	r24, 0x01	; 1
    3778:	af dd       	rcall	.-1186   	; 0x32d8 <_ZN7MPU605011readRawGyroEv>
	gyroRateX = (rg.XAxis)/131;
    377a:	78 01       	movw	r14, r16
    377c:	80 e6       	ldi	r24, 0x60	; 96
    377e:	e8 0e       	add	r14, r24
    3780:	f1 1c       	adc	r15, r1
    3782:	20 e0       	ldi	r18, 0x00	; 0
    3784:	30 e0       	ldi	r19, 0x00	; 0
    3786:	43 e0       	ldi	r20, 0x03	; 3
    3788:	53 e4       	ldi	r21, 0x43	; 67
    378a:	f8 01       	movw	r30, r16
    378c:	64 85       	ldd	r22, Z+12	; 0x0c
    378e:	75 85       	ldd	r23, Z+13	; 0x0d
    3790:	86 85       	ldd	r24, Z+14	; 0x0e
    3792:	97 85       	ldd	r25, Z+15	; 0x0f
    3794:	e9 d3       	rcall	.+2002   	; 0x3f68 <__divsf3>
    3796:	f7 01       	movw	r30, r14
    3798:	60 83       	st	Z, r22
    379a:	71 83       	std	Z+1, r23	; 0x01
    379c:	82 83       	std	Z+2, r24	; 0x02
    379e:	93 83       	std	Z+3, r25	; 0x03
	gyroRateY = (rg.YAxis)/131;
    37a0:	78 01       	movw	r14, r16
    37a2:	f4 e6       	ldi	r31, 0x64	; 100
    37a4:	ef 0e       	add	r14, r31
    37a6:	f1 1c       	adc	r15, r1
    37a8:	20 e0       	ldi	r18, 0x00	; 0
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	43 e0       	ldi	r20, 0x03	; 3
    37ae:	53 e4       	ldi	r21, 0x43	; 67
    37b0:	f8 01       	movw	r30, r16
    37b2:	60 89       	ldd	r22, Z+16	; 0x10
    37b4:	71 89       	ldd	r23, Z+17	; 0x11
    37b6:	82 89       	ldd	r24, Z+18	; 0x12
    37b8:	93 89       	ldd	r25, Z+19	; 0x13
    37ba:	d6 d3       	rcall	.+1964   	; 0x3f68 <__divsf3>
    37bc:	f7 01       	movw	r30, r14
    37be:	60 83       	st	Z, r22
    37c0:	71 83       	std	Z+1, r23	; 0x01
    37c2:	82 83       	std	Z+2, r24	; 0x02
    37c4:	93 83       	std	Z+3, r25	; 0x03
	gyroRateZ = (rg.ZAxis)/131;
    37c6:	78 01       	movw	r14, r16
    37c8:	f8 e6       	ldi	r31, 0x68	; 104
    37ca:	ef 0e       	add	r14, r31
    37cc:	f1 1c       	adc	r15, r1
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	43 e0       	ldi	r20, 0x03	; 3
    37d4:	53 e4       	ldi	r21, 0x43	; 67
    37d6:	f8 01       	movw	r30, r16
    37d8:	64 89       	ldd	r22, Z+20	; 0x14
    37da:	75 89       	ldd	r23, Z+21	; 0x15
    37dc:	86 89       	ldd	r24, Z+22	; 0x16
    37de:	97 89       	ldd	r25, Z+23	; 0x17
    37e0:	c3 d3       	rcall	.+1926   	; 0x3f68 <__divsf3>
    37e2:	f7 01       	movw	r30, r14
    37e4:	60 83       	st	Z, r22
    37e6:	71 83       	std	Z+1, r23	; 0x01
    37e8:	82 83       	std	Z+2, r24	; 0x02
    37ea:	93 83       	std	Z+3, r25	; 0x03
}
    37ec:	2c 96       	adiw	r28, 0x0c	; 12
    37ee:	0f b6       	in	r0, 0x3f	; 63
    37f0:	f8 94       	cli
    37f2:	de bf       	out	0x3e, r29	; 62
    37f4:	0f be       	out	0x3f, r0	; 63
    37f6:	cd bf       	out	0x3d, r28	; 61
    37f8:	df 91       	pop	r29
    37fa:	cf 91       	pop	r28
    37fc:	1f 91       	pop	r17
    37fe:	0f 91       	pop	r16
    3800:	ff 90       	pop	r15
    3802:	ef 90       	pop	r14
    3804:	08 95       	ret

00003806 <_ZN7MPU605012getGyroRateXEv>:

float MPU6050::getGyroRateX(){
	return gyroRateX;
    3806:	80 5a       	subi	r24, 0xA0	; 160
    3808:	9f 4f       	sbci	r25, 0xFF	; 255
    380a:	fc 01       	movw	r30, r24
    380c:	60 81       	ld	r22, Z
    380e:	71 81       	ldd	r23, Z+1	; 0x01
    3810:	82 81       	ldd	r24, Z+2	; 0x02
    3812:	93 81       	ldd	r25, Z+3	; 0x03
}
    3814:	08 95       	ret

00003816 <_ZN7MPU605012getGyroRateYEv>:
float MPU6050::getGyroRateY(){
	return gyroRateY;
    3816:	8c 59       	subi	r24, 0x9C	; 156
    3818:	9f 4f       	sbci	r25, 0xFF	; 255
    381a:	fc 01       	movw	r30, r24
    381c:	60 81       	ld	r22, Z
    381e:	71 81       	ldd	r23, Z+1	; 0x01
    3820:	82 81       	ldd	r24, Z+2	; 0x02
    3822:	93 81       	ldd	r25, Z+3	; 0x03
}
    3824:	08 95       	ret

00003826 <_ZN7MPU605012getGyroRateZEv>:
float MPU6050::getGyroRateZ(){
	return gyroRateZ;
    3826:	88 59       	subi	r24, 0x98	; 152
    3828:	9f 4f       	sbci	r25, 0xFF	; 255
    382a:	fc 01       	movw	r30, r24
    382c:	60 81       	ld	r22, Z
    382e:	71 81       	ldd	r23, Z+1	; 0x01
    3830:	82 81       	ldd	r24, Z+2	; 0x02
    3832:	93 81       	ldd	r25, Z+3	; 0x03
    3834:	08 95       	ret

00003836 <_Z16checkRobotMotionv>:
 bool normalGame			= false;

 
void checkRobotMotion(){
	//Wait while main switch is not clicked//
 	while(READ(M_MAIN_SWITCH));
    3836:	78 99       	sbic	0x0f, 0	; 15
    3838:	fe cf       	rjmp	.-4      	; 0x3836 <_Z16checkRobotMotionv>
 	////after main switch is clicked check the state of retry conditions//
 	if(!READ(M_DIRECTLY_LZ2))			{directlyLZ2 = true;}
    383a:	79 99       	sbic	0x0f, 1	; 15
    383c:	04 c0       	rjmp	.+8      	; 0x3846 <_Z16checkRobotMotionv+0x10>
    383e:	81 e0       	ldi	r24, 0x01	; 1
    3840:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <directlyLZ2>
    3844:	08 95       	ret
 	else if(!READ(M_DIRECTLY_TZ3))		{directlyTZ3 = true;}
    3846:	7a 99       	sbic	0x0f, 2	; 15
    3848:	04 c0       	rjmp	.+8      	; 0x3852 <_Z16checkRobotMotionv+0x1c>
    384a:	81 e0       	ldi	r24, 0x01	; 1
    384c:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <directlyTZ3>
    3850:	08 95       	ret
 	else if(!READ(M_LZ2FORTZ3))			{LZ2ForTZ3   = true;}
    3852:	7b 99       	sbic	0x0f, 3	; 15
    3854:	04 c0       	rjmp	.+8      	; 0x385e <_Z16checkRobotMotionv+0x28>
    3856:	81 e0       	ldi	r24, 0x01	; 1
    3858:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <LZ2ForTZ3>
    385c:	08 95       	ret
 	else if(!READ(M_ALWAYSTZ2))			{alwaysTZ2   = true;}
    385e:	7c 99       	sbic	0x0f, 4	; 15
    3860:	04 c0       	rjmp	.+8      	; 0x386a <_Z16checkRobotMotionv+0x34>
    3862:	81 e0       	ldi	r24, 0x01	; 1
    3864:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <alwaysTZ2>
    3868:	08 95       	ret
 	else if(!READ(M_ALWAYSTZ1))			{alwaysTZ1   = true;}
    386a:	7d 99       	sbic	0x0f, 5	; 15
    386c:	04 c0       	rjmp	.+8      	; 0x3876 <_Z16checkRobotMotionv+0x40>
    386e:	81 e0       	ldi	r24, 0x01	; 1
    3870:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <alwaysTZ1>
    3874:	08 95       	ret
 	else								{normalGame = true;}
    3876:	81 e0       	ldi	r24, 0x01	; 1
    3878:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <normalGame>
    387c:	08 95       	ret

0000387e <_Z8i2c_initv>:
uint8_t i2c_write_array(uint8_t *data, uint8_t count){
	while(count--){
		if(i2c_write(*data++) != 0)		return count;
	}
	return 0;
}
    387e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3882:	88 e4       	ldi	r24, 0x48	; 72
    3884:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    3888:	08 95       	ret

0000388a <_Z9i2c_starth>:
    388a:	94 ea       	ldi	r25, 0xA4	; 164
    388c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3890:	ec eb       	ldi	r30, 0xBC	; 188
    3892:	f0 e0       	ldi	r31, 0x00	; 0
    3894:	90 81       	ld	r25, Z
    3896:	99 23       	and	r25, r25
    3898:	ec f7       	brge	.-6      	; 0x3894 <_Z9i2c_starth+0xa>
    389a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    389e:	98 7f       	andi	r25, 0xF8	; 248
    38a0:	98 30       	cpi	r25, 0x08	; 8
    38a2:	11 f0       	breq	.+4      	; 0x38a8 <_Z9i2c_starth+0x1e>
    38a4:	90 31       	cpi	r25, 0x10	; 16
    38a6:	a1 f4       	brne	.+40     	; 0x38d0 <_Z9i2c_starth+0x46>
    38a8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    38ac:	84 e8       	ldi	r24, 0x84	; 132
    38ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    38b2:	ec eb       	ldi	r30, 0xBC	; 188
    38b4:	f0 e0       	ldi	r31, 0x00	; 0
    38b6:	80 81       	ld	r24, Z
    38b8:	88 23       	and	r24, r24
    38ba:	ec f7       	brge	.-6      	; 0x38b6 <_Z9i2c_starth+0x2c>
    38bc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    38c0:	98 7f       	andi	r25, 0xF8	; 248
    38c2:	98 31       	cpi	r25, 0x18	; 24
    38c4:	39 f0       	breq	.+14     	; 0x38d4 <_Z9i2c_starth+0x4a>
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	90 34       	cpi	r25, 0x40	; 64
    38ca:	29 f4       	brne	.+10     	; 0x38d6 <_Z9i2c_starth+0x4c>
    38cc:	80 e0       	ldi	r24, 0x00	; 0
    38ce:	08 95       	ret
    38d0:	81 e0       	ldi	r24, 0x01	; 1
    38d2:	08 95       	ret
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	08 95       	ret

000038d8 <_Z13i2c_rep_starth>:
    38d8:	d8 cf       	rjmp	.-80     	; 0x388a <_Z9i2c_starth>
    38da:	08 95       	ret

000038dc <_Z8i2c_stopv>:
    38dc:	84 e9       	ldi	r24, 0x94	; 148
    38de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    38e2:	ec eb       	ldi	r30, 0xBC	; 188
    38e4:	f0 e0       	ldi	r31, 0x00	; 0
    38e6:	80 81       	ld	r24, Z
    38e8:	84 fd       	sbrc	r24, 4
    38ea:	fd cf       	rjmp	.-6      	; 0x38e6 <_Z8i2c_stopv+0xa>
    38ec:	08 95       	ret

000038ee <_Z14i2c_start_waith>:
    38ee:	bf 92       	push	r11
    38f0:	cf 92       	push	r12
    38f2:	df 92       	push	r13
    38f4:	ef 92       	push	r14
    38f6:	ff 92       	push	r15
    38f8:	0f 93       	push	r16
    38fa:	1f 93       	push	r17
    38fc:	cf 93       	push	r28
    38fe:	df 93       	push	r29
    3900:	b8 2e       	mov	r11, r24
    3902:	cc eb       	ldi	r28, 0xBC	; 188
    3904:	d0 e0       	ldi	r29, 0x00	; 0
    3906:	09 eb       	ldi	r16, 0xB9	; 185
    3908:	10 e0       	ldi	r17, 0x00	; 0
    390a:	0f 2e       	mov	r0, r31
    390c:	f4 ea       	ldi	r31, 0xA4	; 164
    390e:	df 2e       	mov	r13, r31
    3910:	f0 2d       	mov	r31, r0
    3912:	0f 2e       	mov	r0, r31
    3914:	fb eb       	ldi	r31, 0xBB	; 187
    3916:	ef 2e       	mov	r14, r31
    3918:	f1 2c       	mov	r15, r1
    391a:	f0 2d       	mov	r31, r0
    391c:	0f 2e       	mov	r0, r31
    391e:	f4 e8       	ldi	r31, 0x84	; 132
    3920:	cf 2e       	mov	r12, r31
    3922:	f0 2d       	mov	r31, r0
    3924:	d8 82       	st	Y, r13
    3926:	88 81       	ld	r24, Y
    3928:	88 23       	and	r24, r24
    392a:	ec f7       	brge	.-6      	; 0x3926 <_Z14i2c_start_waith+0x38>
    392c:	f8 01       	movw	r30, r16
    392e:	80 81       	ld	r24, Z
    3930:	88 7f       	andi	r24, 0xF8	; 248
    3932:	88 30       	cpi	r24, 0x08	; 8
    3934:	b9 f7       	brne	.-18     	; 0x3924 <_Z14i2c_start_waith+0x36>
    3936:	f7 01       	movw	r30, r14
    3938:	b0 82       	st	Z, r11
    393a:	c8 82       	st	Y, r12
    393c:	88 81       	ld	r24, Y
    393e:	88 23       	and	r24, r24
    3940:	ec f7       	brge	.-6      	; 0x393c <_Z14i2c_start_waith+0x4e>
    3942:	f8 01       	movw	r30, r16
    3944:	80 81       	ld	r24, Z
    3946:	88 7f       	andi	r24, 0xF8	; 248
    3948:	88 31       	cpi	r24, 0x18	; 24
    394a:	11 f0       	breq	.+4      	; 0x3950 <_Z14i2c_start_waith+0x62>
    394c:	c7 df       	rcall	.-114    	; 0x38dc <_Z8i2c_stopv>
    394e:	ea cf       	rjmp	.-44     	; 0x3924 <_Z14i2c_start_waith+0x36>
    3950:	df 91       	pop	r29
    3952:	cf 91       	pop	r28
    3954:	1f 91       	pop	r17
    3956:	0f 91       	pop	r16
    3958:	ff 90       	pop	r15
    395a:	ef 90       	pop	r14
    395c:	df 90       	pop	r13
    395e:	cf 90       	pop	r12
    3960:	bf 90       	pop	r11
    3962:	08 95       	ret

00003964 <_Z9i2c_writeh>:
    3964:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3968:	84 e8       	ldi	r24, 0x84	; 132
    396a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    396e:	ec eb       	ldi	r30, 0xBC	; 188
    3970:	f0 e0       	ldi	r31, 0x00	; 0
    3972:	80 81       	ld	r24, Z
    3974:	88 23       	and	r24, r24
    3976:	ec f7       	brge	.-6      	; 0x3972 <_Z9i2c_writeh+0xe>
    3978:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    397c:	98 7f       	andi	r25, 0xF8	; 248
    397e:	81 e0       	ldi	r24, 0x01	; 1
    3980:	98 32       	cpi	r25, 0x28	; 40
    3982:	09 f4       	brne	.+2      	; 0x3986 <_Z9i2c_writeh+0x22>
    3984:	80 e0       	ldi	r24, 0x00	; 0
    3986:	08 95       	ret

00003988 <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3988:	84 ec       	ldi	r24, 0xC4	; 196
    398a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(!(TWCR & (1<<TWINT)));    
    398e:	ec eb       	ldi	r30, 0xBC	; 188
    3990:	f0 e0       	ldi	r31, 0x00	; 0
    3992:	80 81       	ld	r24, Z
    3994:	88 23       	and	r24, r24
    3996:	ec f7       	brge	.-6      	; 0x3992 <_Z11i2c_readAckv+0xa>

    return TWDR;
    3998:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

}/* i2c_readAck */
    399c:	08 95       	ret

0000399e <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    399e:	84 e8       	ldi	r24, 0x84	; 132
    39a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(!(TWCR & (1<<TWINT)));
    39a4:	ec eb       	ldi	r30, 0xBC	; 188
    39a6:	f0 e0       	ldi	r31, 0x00	; 0
    39a8:	80 81       	ld	r24, Z
    39aa:	88 23       	and	r24, r24
    39ac:	ec f7       	brge	.-6      	; 0x39a8 <_Z11i2c_readNakv+0xa>
	
    return TWDR;
    39ae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

    39b2:	08 95       	ret

000039b4 <__vector_25>:
 Input:    None
 Returns:  None
 **************************************************************************/
void uart2_flush(void)
{
	UART2_RxHead = UART2_RxTail;
    39b4:	1f 92       	push	r1
    39b6:	0f 92       	push	r0
    39b8:	0f b6       	in	r0, 0x3f	; 63
    39ba:	0f 92       	push	r0
    39bc:	11 24       	eor	r1, r1
    39be:	0b b6       	in	r0, 0x3b	; 59
    39c0:	0f 92       	push	r0
    39c2:	2f 93       	push	r18
    39c4:	8f 93       	push	r24
    39c6:	9f 93       	push	r25
    39c8:	ef 93       	push	r30
    39ca:	ff 93       	push	r31
    39cc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    39d0:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    39d4:	88 71       	andi	r24, 0x18	; 24
    39d6:	e0 91 55 05 	lds	r30, 0x0555	; 0x800555 <_ZL12UART0_RxHead>
    39da:	ef 5f       	subi	r30, 0xFF	; 255
    39dc:	ef 71       	andi	r30, 0x1F	; 31
    39de:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <_ZL12UART0_RxTail>
    39e2:	e9 17       	cp	r30, r25
    39e4:	39 f0       	breq	.+14     	; 0x39f4 <__vector_25+0x40>
    39e6:	e0 93 55 05 	sts	0x0555, r30	; 0x800555 <_ZL12UART0_RxHead>
    39ea:	f0 e0       	ldi	r31, 0x00	; 0
    39ec:	e8 5a       	subi	r30, 0xA8	; 168
    39ee:	fa 4f       	sbci	r31, 0xFA	; 250
    39f0:	20 83       	st	Z, r18
    39f2:	01 c0       	rjmp	.+2      	; 0x39f6 <__vector_25+0x42>
    39f4:	82 e0       	ldi	r24, 0x02	; 2
    39f6:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <_ZL17UART0_LastRxError>
    39fa:	ff 91       	pop	r31
    39fc:	ef 91       	pop	r30
    39fe:	9f 91       	pop	r25
    3a00:	8f 91       	pop	r24
    3a02:	2f 91       	pop	r18
    3a04:	0f 90       	pop	r0
    3a06:	0b be       	out	0x3b, r0	; 59
    3a08:	0f 90       	pop	r0
    3a0a:	0f be       	out	0x3f, r0	; 63
    3a0c:	0f 90       	pop	r0
    3a0e:	1f 90       	pop	r1
    3a10:	18 95       	reti

00003a12 <__vector_26>:
    3a12:	1f 92       	push	r1
    3a14:	0f 92       	push	r0
    3a16:	0f b6       	in	r0, 0x3f	; 63
    3a18:	0f 92       	push	r0
    3a1a:	11 24       	eor	r1, r1
    3a1c:	0b b6       	in	r0, 0x3b	; 59
    3a1e:	0f 92       	push	r0
    3a20:	8f 93       	push	r24
    3a22:	9f 93       	push	r25
    3a24:	ef 93       	push	r30
    3a26:	ff 93       	push	r31
    3a28:	90 91 57 05 	lds	r25, 0x0557	; 0x800557 <_ZL12UART0_TxHead>
    3a2c:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <_ZL12UART0_TxTail>
    3a30:	98 17       	cp	r25, r24
    3a32:	69 f0       	breq	.+26     	; 0x3a4e <__vector_26+0x3c>
    3a34:	e0 91 56 05 	lds	r30, 0x0556	; 0x800556 <_ZL12UART0_TxTail>
    3a38:	ef 5f       	subi	r30, 0xFF	; 255
    3a3a:	ef 71       	andi	r30, 0x1F	; 31
    3a3c:	e0 93 56 05 	sts	0x0556, r30	; 0x800556 <_ZL12UART0_TxTail>
    3a40:	f0 e0       	ldi	r31, 0x00	; 0
    3a42:	e8 58       	subi	r30, 0x88	; 136
    3a44:	fa 4f       	sbci	r31, 0xFA	; 250
    3a46:	80 81       	ld	r24, Z
    3a48:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3a4c:	05 c0       	rjmp	.+10     	; 0x3a58 <__vector_26+0x46>
    3a4e:	e1 ec       	ldi	r30, 0xC1	; 193
    3a50:	f0 e0       	ldi	r31, 0x00	; 0
    3a52:	80 81       	ld	r24, Z
    3a54:	8f 7d       	andi	r24, 0xDF	; 223
    3a56:	80 83       	st	Z, r24
    3a58:	ff 91       	pop	r31
    3a5a:	ef 91       	pop	r30
    3a5c:	9f 91       	pop	r25
    3a5e:	8f 91       	pop	r24
    3a60:	0f 90       	pop	r0
    3a62:	0b be       	out	0x3b, r0	; 59
    3a64:	0f 90       	pop	r0
    3a66:	0f be       	out	0x3f, r0	; 63
    3a68:	0f 90       	pop	r0
    3a6a:	1f 90       	pop	r1
    3a6c:	18 95       	reti

00003a6e <_Z10uart0_initj>:
    3a6e:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <_ZL12UART0_TxHead>
    3a72:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <_ZL12UART0_TxTail>
    3a76:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <_ZL12UART0_RxHead>
    3a7a:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <_ZL12UART0_RxTail>
    3a7e:	99 23       	and	r25, r25
    3a80:	24 f4       	brge	.+8      	; 0x3a8a <_Z10uart0_initj+0x1c>
    3a82:	22 e0       	ldi	r18, 0x02	; 2
    3a84:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    3a88:	9f 77       	andi	r25, 0x7F	; 127
    3a8a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    3a8e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    3a92:	88 e9       	ldi	r24, 0x98	; 152
    3a94:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    3a98:	86 e0       	ldi	r24, 0x06	; 6
    3a9a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    3a9e:	08 95       	ret

00003aa0 <_Z10uart0_putch>:
    3aa0:	20 91 57 05 	lds	r18, 0x0557	; 0x800557 <_ZL12UART0_TxHead>
    3aa4:	2f 5f       	subi	r18, 0xFF	; 255
    3aa6:	2f 71       	andi	r18, 0x1F	; 31
    3aa8:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <_ZL12UART0_TxTail>
    3aac:	29 17       	cp	r18, r25
    3aae:	e1 f3       	breq	.-8      	; 0x3aa8 <_Z10uart0_putch+0x8>
    3ab0:	e2 2f       	mov	r30, r18
    3ab2:	f0 e0       	ldi	r31, 0x00	; 0
    3ab4:	e8 58       	subi	r30, 0x88	; 136
    3ab6:	fa 4f       	sbci	r31, 0xFA	; 250
    3ab8:	80 83       	st	Z, r24
    3aba:	20 93 57 05 	sts	0x0557, r18	; 0x800557 <_ZL12UART0_TxHead>
    3abe:	e1 ec       	ldi	r30, 0xC1	; 193
    3ac0:	f0 e0       	ldi	r31, 0x00	; 0
    3ac2:	80 81       	ld	r24, Z
    3ac4:	80 62       	ori	r24, 0x20	; 32
    3ac6:	80 83       	st	Z, r24
    3ac8:	08 95       	ret

00003aca <_Z10uart0_putsPKc>:
    3aca:	cf 93       	push	r28
    3acc:	df 93       	push	r29
    3ace:	ec 01       	movw	r28, r24
    3ad0:	88 81       	ld	r24, Y
    3ad2:	88 23       	and	r24, r24
    3ad4:	29 f0       	breq	.+10     	; 0x3ae0 <_Z10uart0_putsPKc+0x16>
    3ad6:	21 96       	adiw	r28, 0x01	; 1
    3ad8:	e3 df       	rcall	.-58     	; 0x3aa0 <_Z10uart0_putch>
    3ada:	89 91       	ld	r24, Y+
    3adc:	81 11       	cpse	r24, r1
    3ade:	fc cf       	rjmp	.-8      	; 0x3ad8 <_Z10uart0_putsPKc+0xe>
    3ae0:	df 91       	pop	r29
    3ae2:	cf 91       	pop	r28
    3ae4:	08 95       	ret

00003ae6 <__vector_36>:
    3ae6:	1f 92       	push	r1
    3ae8:	0f 92       	push	r0
    3aea:	0f b6       	in	r0, 0x3f	; 63
    3aec:	0f 92       	push	r0
    3aee:	11 24       	eor	r1, r1
    3af0:	0b b6       	in	r0, 0x3b	; 59
    3af2:	0f 92       	push	r0
    3af4:	2f 93       	push	r18
    3af6:	8f 93       	push	r24
    3af8:	9f 93       	push	r25
    3afa:	ef 93       	push	r30
    3afc:	ff 93       	push	r31
    3afe:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    3b02:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3b06:	88 71       	andi	r24, 0x18	; 24
    3b08:	e0 91 10 05 	lds	r30, 0x0510	; 0x800510 <_ZL12UART1_RxHead>
    3b0c:	ef 5f       	subi	r30, 0xFF	; 255
    3b0e:	ef 71       	andi	r30, 0x1F	; 31
    3b10:	90 91 0f 05 	lds	r25, 0x050F	; 0x80050f <_ZL12UART1_RxTail>
    3b14:	e9 17       	cp	r30, r25
    3b16:	39 f0       	breq	.+14     	; 0x3b26 <__vector_36+0x40>
    3b18:	e0 93 10 05 	sts	0x0510, r30	; 0x800510 <_ZL12UART1_RxHead>
    3b1c:	f0 e0       	ldi	r31, 0x00	; 0
    3b1e:	ed 5e       	subi	r30, 0xED	; 237
    3b20:	fa 4f       	sbci	r31, 0xFA	; 250
    3b22:	20 83       	st	Z, r18
    3b24:	01 c0       	rjmp	.+2      	; 0x3b28 <__vector_36+0x42>
    3b26:	82 e0       	ldi	r24, 0x02	; 2
    3b28:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <_ZL17UART1_LastRxError>
    3b2c:	ff 91       	pop	r31
    3b2e:	ef 91       	pop	r30
    3b30:	9f 91       	pop	r25
    3b32:	8f 91       	pop	r24
    3b34:	2f 91       	pop	r18
    3b36:	0f 90       	pop	r0
    3b38:	0b be       	out	0x3b, r0	; 59
    3b3a:	0f 90       	pop	r0
    3b3c:	0f be       	out	0x3f, r0	; 63
    3b3e:	0f 90       	pop	r0
    3b40:	1f 90       	pop	r1
    3b42:	18 95       	reti

00003b44 <__vector_37>:
    3b44:	1f 92       	push	r1
    3b46:	0f 92       	push	r0
    3b48:	0f b6       	in	r0, 0x3f	; 63
    3b4a:	0f 92       	push	r0
    3b4c:	11 24       	eor	r1, r1
    3b4e:	0b b6       	in	r0, 0x3b	; 59
    3b50:	0f 92       	push	r0
    3b52:	8f 93       	push	r24
    3b54:	9f 93       	push	r25
    3b56:	ef 93       	push	r30
    3b58:	ff 93       	push	r31
    3b5a:	90 91 12 05 	lds	r25, 0x0512	; 0x800512 <_ZL12UART1_TxHead>
    3b5e:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <_ZL12UART1_TxTail>
    3b62:	98 17       	cp	r25, r24
    3b64:	69 f0       	breq	.+26     	; 0x3b80 <__vector_37+0x3c>
    3b66:	e0 91 11 05 	lds	r30, 0x0511	; 0x800511 <_ZL12UART1_TxTail>
    3b6a:	ef 5f       	subi	r30, 0xFF	; 255
    3b6c:	ef 71       	andi	r30, 0x1F	; 31
    3b6e:	e0 93 11 05 	sts	0x0511, r30	; 0x800511 <_ZL12UART1_TxTail>
    3b72:	f0 e0       	ldi	r31, 0x00	; 0
    3b74:	ed 5c       	subi	r30, 0xCD	; 205
    3b76:	fa 4f       	sbci	r31, 0xFA	; 250
    3b78:	80 81       	ld	r24, Z
    3b7a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3b7e:	05 c0       	rjmp	.+10     	; 0x3b8a <__vector_37+0x46>
    3b80:	e9 ec       	ldi	r30, 0xC9	; 201
    3b82:	f0 e0       	ldi	r31, 0x00	; 0
    3b84:	80 81       	ld	r24, Z
    3b86:	8f 7d       	andi	r24, 0xDF	; 223
    3b88:	80 83       	st	Z, r24
    3b8a:	ff 91       	pop	r31
    3b8c:	ef 91       	pop	r30
    3b8e:	9f 91       	pop	r25
    3b90:	8f 91       	pop	r24
    3b92:	0f 90       	pop	r0
    3b94:	0b be       	out	0x3b, r0	; 59
    3b96:	0f 90       	pop	r0
    3b98:	0f be       	out	0x3f, r0	; 63
    3b9a:	0f 90       	pop	r0
    3b9c:	1f 90       	pop	r1
    3b9e:	18 95       	reti

00003ba0 <__vector_51>:
    3ba0:	1f 92       	push	r1
    3ba2:	0f 92       	push	r0
    3ba4:	0f b6       	in	r0, 0x3f	; 63
    3ba6:	0f 92       	push	r0
    3ba8:	11 24       	eor	r1, r1
    3baa:	8f 93       	push	r24
    3bac:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3bb0:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <buffer2>
    3bb4:	8f 91       	pop	r24
    3bb6:	0f 90       	pop	r0
    3bb8:	0f be       	out	0x3f, r0	; 63
    3bba:	0f 90       	pop	r0
    3bbc:	1f 90       	pop	r1
    3bbe:	18 95       	reti

00003bc0 <__vector_52>:
    3bc0:	1f 92       	push	r1
    3bc2:	0f 92       	push	r0
    3bc4:	0f b6       	in	r0, 0x3f	; 63
    3bc6:	0f 92       	push	r0
    3bc8:	11 24       	eor	r1, r1
    3bca:	0b b6       	in	r0, 0x3b	; 59
    3bcc:	0f 92       	push	r0
    3bce:	8f 93       	push	r24
    3bd0:	9f 93       	push	r25
    3bd2:	ef 93       	push	r30
    3bd4:	ff 93       	push	r31
    3bd6:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <_ZL12UART2_TxHead>
    3bda:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <_ZL12UART2_TxTail>
    3bde:	98 17       	cp	r25, r24
    3be0:	69 f0       	breq	.+26     	; 0x3bfc <__vector_52+0x3c>
    3be2:	e0 91 ec 04 	lds	r30, 0x04EC	; 0x8004ec <_ZL12UART2_TxTail>
    3be6:	ef 5f       	subi	r30, 0xFF	; 255
    3be8:	ef 71       	andi	r30, 0x1F	; 31
    3bea:	e0 93 ec 04 	sts	0x04EC, r30	; 0x8004ec <_ZL12UART2_TxTail>
    3bee:	f0 e0       	ldi	r31, 0x00	; 0
    3bf0:	e2 51       	subi	r30, 0x12	; 18
    3bf2:	fb 4f       	sbci	r31, 0xFB	; 251
    3bf4:	80 81       	ld	r24, Z
    3bf6:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3bfa:	05 c0       	rjmp	.+10     	; 0x3c06 <__vector_52+0x46>
    3bfc:	e1 ed       	ldi	r30, 0xD1	; 209
    3bfe:	f0 e0       	ldi	r31, 0x00	; 0
    3c00:	80 81       	ld	r24, Z
    3c02:	8f 7d       	andi	r24, 0xDF	; 223
    3c04:	80 83       	st	Z, r24
    3c06:	ff 91       	pop	r31
    3c08:	ef 91       	pop	r30
    3c0a:	9f 91       	pop	r25
    3c0c:	8f 91       	pop	r24
    3c0e:	0f 90       	pop	r0
    3c10:	0b be       	out	0x3b, r0	; 59
    3c12:	0f 90       	pop	r0
    3c14:	0f be       	out	0x3f, r0	; 63
    3c16:	0f 90       	pop	r0
    3c18:	1f 90       	pop	r1
    3c1a:	18 95       	reti

00003c1c <_Z10uart2_initj>:
    3c1c:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <_ZL12UART2_TxHead>
    3c20:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <_ZL12UART2_TxTail>
    3c24:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <_ZL12UART2_RxHead>
    3c28:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <_ZL12UART2_RxTail>
    3c2c:	99 23       	and	r25, r25
    3c2e:	24 f4       	brge	.+8      	; 0x3c38 <_Z10uart2_initj+0x1c>
    3c30:	22 e0       	ldi	r18, 0x02	; 2
    3c32:	20 93 d0 00 	sts	0x00D0, r18	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    3c36:	9f 77       	andi	r25, 0x7F	; 127
    3c38:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    3c3c:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    3c40:	88 e9       	ldi	r24, 0x98	; 152
    3c42:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    3c46:	86 e0       	ldi	r24, 0x06	; 6
    3c48:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    3c4c:	08 95       	ret

00003c4e <_Z10uart2_getcv>:
    3c4e:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <buffer2>
    3c52:	90 e0       	ldi	r25, 0x00	; 0
    3c54:	08 95       	ret

00003c56 <_Z10uart2_putch>:
    3c56:	20 91 ed 04 	lds	r18, 0x04ED	; 0x8004ed <_ZL12UART2_TxHead>
    3c5a:	2f 5f       	subi	r18, 0xFF	; 255
    3c5c:	2f 71       	andi	r18, 0x1F	; 31
    3c5e:	90 91 ec 04 	lds	r25, 0x04EC	; 0x8004ec <_ZL12UART2_TxTail>
    3c62:	29 17       	cp	r18, r25
    3c64:	e1 f3       	breq	.-8      	; 0x3c5e <_Z10uart2_putch+0x8>
    3c66:	e2 2f       	mov	r30, r18
    3c68:	f0 e0       	ldi	r31, 0x00	; 0
    3c6a:	e2 51       	subi	r30, 0x12	; 18
    3c6c:	fb 4f       	sbci	r31, 0xFB	; 251
    3c6e:	80 83       	st	Z, r24
    3c70:	20 93 ed 04 	sts	0x04ED, r18	; 0x8004ed <_ZL12UART2_TxHead>
    3c74:	e1 ed       	ldi	r30, 0xD1	; 209
    3c76:	f0 e0       	ldi	r31, 0x00	; 0
    3c78:	80 81       	ld	r24, Z
    3c7a:	80 62       	ori	r24, 0x20	; 32
    3c7c:	80 83       	st	Z, r24
    3c7e:	08 95       	ret

00003c80 <__vector_54>:
ISR(UART3_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART3 Receive Complete interrupt
Purpose:  called when the UART3 has received a character
**************************************************************************/
{
    3c80:	1f 92       	push	r1
    3c82:	0f 92       	push	r0
    3c84:	0f b6       	in	r0, 0x3f	; 63
    3c86:	0f 92       	push	r0
    3c88:	11 24       	eor	r1, r1
    3c8a:	0b b6       	in	r0, 0x3b	; 59
    3c8c:	0f 92       	push	r0
    3c8e:	2f 93       	push	r18
    3c90:	8f 93       	push	r24
    3c92:	9f 93       	push	r25
    3c94:	ef 93       	push	r30
    3c96:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;


	/* read UART status register and UART data register */
	usr = UART3_STATUS;
    3c98:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
	data = UART3_DATA;
    3c9c:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	

	/* */
	lastRxError = (usr & (_BV(FE3) | _BV(DOR3)));
    3ca0:	88 71       	andi	r24, 0x18	; 24

	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;
    3ca2:	e0 91 a7 04 	lds	r30, 0x04A7	; 0x8004a7 <_ZL12UART3_RxHead>
    3ca6:	ef 5f       	subi	r30, 0xFF	; 255
    3ca8:	ef 71       	andi	r30, 0x1F	; 31

	if (tmphead == UART3_RxTail) {
    3caa:	90 91 a6 04 	lds	r25, 0x04A6	; 0x8004a6 <_ZL12UART3_RxTail>
    3cae:	e9 17       	cp	r30, r25
    3cb0:	39 f0       	breq	.+14     	; 0x3cc0 <__vector_54+0x40>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else {
		/* store new index */
		UART3_RxHead = tmphead;
    3cb2:	e0 93 a7 04 	sts	0x04A7, r30	; 0x8004a7 <_ZL12UART3_RxHead>
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
    3cb6:	f0 e0       	ldi	r31, 0x00	; 0
    3cb8:	e6 55       	subi	r30, 0x56	; 86
    3cba:	fb 4f       	sbci	r31, 0xFB	; 251
    3cbc:	20 83       	st	Z, r18
    3cbe:	01 c0       	rjmp	.+2      	; 0x3cc2 <__vector_54+0x42>
	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;

	if (tmphead == UART3_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    3cc0:	82 e0       	ldi	r24, 0x02	; 2
		/* store new index */
		UART3_RxHead = tmphead;
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
	}
	UART3_LastRxError = lastRxError;
    3cc2:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <_ZL17UART3_LastRxError>
}
    3cc6:	ff 91       	pop	r31
    3cc8:	ef 91       	pop	r30
    3cca:	9f 91       	pop	r25
    3ccc:	8f 91       	pop	r24
    3cce:	2f 91       	pop	r18
    3cd0:	0f 90       	pop	r0
    3cd2:	0b be       	out	0x3b, r0	; 59
    3cd4:	0f 90       	pop	r0
    3cd6:	0f be       	out	0x3f, r0	; 63
    3cd8:	0f 90       	pop	r0
    3cda:	1f 90       	pop	r1
    3cdc:	18 95       	reti

00003cde <__vector_55>:
ISR(UART3_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART3 Data Register Empty interrupt
Purpose:  called when the UART3 is ready to transmit the next byte
**************************************************************************/
{
    3cde:	1f 92       	push	r1
    3ce0:	0f 92       	push	r0
    3ce2:	0f b6       	in	r0, 0x3f	; 63
    3ce4:	0f 92       	push	r0
    3ce6:	11 24       	eor	r1, r1
    3ce8:	0b b6       	in	r0, 0x3b	; 59
    3cea:	0f 92       	push	r0
    3cec:	8f 93       	push	r24
    3cee:	9f 93       	push	r25
    3cf0:	ef 93       	push	r30
    3cf2:	ff 93       	push	r31
	unsigned char tmptail;


	if (UART3_TxHead != UART3_TxTail) {
    3cf4:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <_ZL12UART3_TxHead>
    3cf8:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <_ZL12UART3_TxTail>
    3cfc:	98 17       	cp	r25, r24
    3cfe:	69 f0       	breq	.+26     	; 0x3d1a <__vector_55+0x3c>
		/* calculate and store new buffer index */
		tmptail = (UART3_TxTail + 1) & UART_TX_BUFFER_MASK;
    3d00:	e0 91 a8 04 	lds	r30, 0x04A8	; 0x8004a8 <_ZL12UART3_TxTail>
    3d04:	ef 5f       	subi	r30, 0xFF	; 255
    3d06:	ef 71       	andi	r30, 0x1F	; 31
		UART3_TxTail = tmptail;
    3d08:	e0 93 a8 04 	sts	0x04A8, r30	; 0x8004a8 <_ZL12UART3_TxTail>
		/* get one byte from buffer and write it to UART */
		UART3_DATA = UART3_TxBuf[tmptail];  /* start transmission */
    3d0c:	f0 e0       	ldi	r31, 0x00	; 0
    3d0e:	e6 53       	subi	r30, 0x36	; 54
    3d10:	fb 4f       	sbci	r31, 0xFB	; 251
    3d12:	80 81       	ld	r24, Z
    3d14:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3d18:	05 c0       	rjmp	.+10     	; 0x3d24 <__vector_55+0x46>
	}
	else {
		/* tx buffer empty, disable UDRE interrupt */
		UART3_CONTROL &= ~_BV(UART3_UDRIE);
    3d1a:	e1 e3       	ldi	r30, 0x31	; 49
    3d1c:	f1 e0       	ldi	r31, 0x01	; 1
    3d1e:	80 81       	ld	r24, Z
    3d20:	8f 7d       	andi	r24, 0xDF	; 223
    3d22:	80 83       	st	Z, r24
	}
}
    3d24:	ff 91       	pop	r31
    3d26:	ef 91       	pop	r30
    3d28:	9f 91       	pop	r25
    3d2a:	8f 91       	pop	r24
    3d2c:	0f 90       	pop	r0
    3d2e:	0b be       	out	0x3b, r0	; 59
    3d30:	0f 90       	pop	r0
    3d32:	0f be       	out	0x3f, r0	; 63
    3d34:	0f 90       	pop	r0
    3d36:	1f 90       	pop	r1
    3d38:	18 95       	reti

00003d3a <_Z10uart3_initj>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart3_init(unsigned int baudrate)
{
	UART3_TxHead = 0;
    3d3a:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <_ZL12UART3_TxHead>
	UART3_TxTail = 0;
    3d3e:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <_ZL12UART3_TxTail>
	UART3_RxHead = 0;
    3d42:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <_ZL12UART3_RxHead>
	UART3_RxTail = 0;
    3d46:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <_ZL12UART3_RxTail>


	/* Set baud rate */
	if (baudrate & 0x8000)
    3d4a:	99 23       	and	r25, r25
    3d4c:	24 f4       	brge	.+8      	; 0x3d56 <_Z10uart3_initj+0x1c>
	{
		UART3_STATUS = (3 << U2X3);  //Enable 2x speed 
    3d4e:	26 e0       	ldi	r18, 0x06	; 6
    3d50:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
		baudrate &= ~0x8000;
    3d54:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRR3H = (unsigned char)(baudrate >> 8);
    3d56:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
	UBRR3L = (unsigned char)baudrate;
    3d5a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART3_CONTROL = _BV(RXCIE3) | (1 << RXEN3) | (1 << TXEN3);
    3d5e:	88 e9       	ldi	r24, 0x98	; 152
    3d60:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>

	/* Set frame format: asynchronous, 8data, no parity, 1-stop bit */
#ifdef URSEL3
	UCSR3C = (1 << URSEL3) | (1 << UCSZ30) | ( 1 << UCSZ31);
#else
	UCSR3C = (1 << UCSZ30) | ( 1 << UCSZ31);
    3d64:	86 e0       	ldi	r24, 0x06	; 6
    3d66:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    3d6a:	08 95       	ret

00003d6c <_Z10uart3_getcv>:
{
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
    3d6c:	90 91 a7 04 	lds	r25, 0x04A7	; 0x8004a7 <_ZL12UART3_RxHead>
    3d70:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <_ZL12UART3_RxTail>
    3d74:	98 17       	cp	r25, r24
    3d76:	91 f0       	breq	.+36     	; 0x3d9c <_Z10uart3_getcv+0x30>
		 return UART_NO_DATA;   /* no data available */
	}

	/* calculate /store buffer index */
	tmptail = (UART3_RxTail + 1) & UART_RX_BUFFER_MASK;
    3d78:	e0 91 a6 04 	lds	r30, 0x04A6	; 0x8004a6 <_ZL12UART3_RxTail>
    3d7c:	ef 5f       	subi	r30, 0xFF	; 255
    3d7e:	ef 71       	andi	r30, 0x1F	; 31
	UART3_RxTail = tmptail;
    3d80:	e0 93 a6 04 	sts	0x04A6, r30	; 0x8004a6 <_ZL12UART3_RxTail>

	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];
    3d84:	f0 e0       	ldi	r31, 0x00	; 0
    3d86:	e6 55       	subi	r30, 0x56	; 86
    3d88:	fb 4f       	sbci	r31, 0xFB	; 251
    3d8a:	20 81       	ld	r18, Z

	return (UART3_LastRxError << 8) + data;
    3d8c:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <_ZL17UART3_LastRxError>
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	98 2f       	mov	r25, r24
    3d94:	88 27       	eor	r24, r24
    3d96:	82 0f       	add	r24, r18
    3d98:	91 1d       	adc	r25, r1
    3d9a:	08 95       	ret
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
		 return UART_NO_DATA;   /* no data available */
    3d9c:	80 e0       	ldi	r24, 0x00	; 0
    3d9e:	91 e0       	ldi	r25, 0x01	; 1
	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];

	return (UART3_LastRxError << 8) + data;

}/* uart3_getc */
    3da0:	08 95       	ret

00003da2 <_Z10uart3_putch>:
void uart3_putc(unsigned char data)
{
	unsigned char tmphead;


	tmphead = (UART3_TxHead + 1) & UART_TX_BUFFER_MASK;
    3da2:	20 91 a9 04 	lds	r18, 0x04A9	; 0x8004a9 <_ZL12UART3_TxHead>
    3da6:	2f 5f       	subi	r18, 0xFF	; 255
    3da8:	2f 71       	andi	r18, 0x1F	; 31

	while (tmphead == UART3_TxTail) {
    3daa:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <_ZL12UART3_TxTail>
    3dae:	29 17       	cp	r18, r25
    3db0:	e1 f3       	breq	.-8      	; 0x3daa <_Z10uart3_putch+0x8>
		;/* wait for free space in buffer */
	}

	UART3_TxBuf[tmphead] = data;
    3db2:	e2 2f       	mov	r30, r18
    3db4:	f0 e0       	ldi	r31, 0x00	; 0
    3db6:	e6 53       	subi	r30, 0x36	; 54
    3db8:	fb 4f       	sbci	r31, 0xFB	; 251
    3dba:	80 83       	st	Z, r24
	UART3_TxHead = tmphead;
    3dbc:	20 93 a9 04 	sts	0x04A9, r18	; 0x8004a9 <_ZL12UART3_TxHead>

	/* enable UDRE interrupt */
	UART3_CONTROL |= _BV(UART3_UDRIE);
    3dc0:	e1 e3       	ldi	r30, 0x31	; 49
    3dc2:	f1 e0       	ldi	r31, 0x01	; 1
    3dc4:	80 81       	ld	r24, Z
    3dc6:	80 62       	ori	r24, 0x20	; 32
    3dc8:	80 83       	st	Z, r24
    3dca:	08 95       	ret

00003dcc <__subsf3>:
    3dcc:	50 58       	subi	r21, 0x80	; 128

00003dce <__addsf3>:
    3dce:	bb 27       	eor	r27, r27
    3dd0:	aa 27       	eor	r26, r26
    3dd2:	0e d0       	rcall	.+28     	; 0x3df0 <__addsf3x>
    3dd4:	27 c2       	rjmp	.+1102   	; 0x4224 <__fp_round>
    3dd6:	f0 d1       	rcall	.+992    	; 0x41b8 <__fp_pscA>
    3dd8:	30 f0       	brcs	.+12     	; 0x3de6 <__addsf3+0x18>
    3dda:	f5 d1       	rcall	.+1002   	; 0x41c6 <__fp_pscB>
    3ddc:	20 f0       	brcs	.+8      	; 0x3de6 <__addsf3+0x18>
    3dde:	31 f4       	brne	.+12     	; 0x3dec <__addsf3+0x1e>
    3de0:	9f 3f       	cpi	r25, 0xFF	; 255
    3de2:	11 f4       	brne	.+4      	; 0x3de8 <__addsf3+0x1a>
    3de4:	1e f4       	brtc	.+6      	; 0x3dec <__addsf3+0x1e>
    3de6:	c0 c1       	rjmp	.+896    	; 0x4168 <__fp_nan>
    3de8:	0e f4       	brtc	.+2      	; 0x3dec <__addsf3+0x1e>
    3dea:	e0 95       	com	r30
    3dec:	e7 fb       	bst	r30, 7
    3dee:	b6 c1       	rjmp	.+876    	; 0x415c <__fp_inf>

00003df0 <__addsf3x>:
    3df0:	e9 2f       	mov	r30, r25
    3df2:	3a d2       	rcall	.+1140   	; 0x4268 <__fp_split3>
    3df4:	80 f3       	brcs	.-32     	; 0x3dd6 <__addsf3+0x8>
    3df6:	ba 17       	cp	r27, r26
    3df8:	62 07       	cpc	r22, r18
    3dfa:	73 07       	cpc	r23, r19
    3dfc:	84 07       	cpc	r24, r20
    3dfe:	95 07       	cpc	r25, r21
    3e00:	18 f0       	brcs	.+6      	; 0x3e08 <__addsf3x+0x18>
    3e02:	71 f4       	brne	.+28     	; 0x3e20 <__addsf3x+0x30>
    3e04:	9e f5       	brtc	.+102    	; 0x3e6c <__addsf3x+0x7c>
    3e06:	52 c2       	rjmp	.+1188   	; 0x42ac <__fp_zero>
    3e08:	0e f4       	brtc	.+2      	; 0x3e0c <__addsf3x+0x1c>
    3e0a:	e0 95       	com	r30
    3e0c:	0b 2e       	mov	r0, r27
    3e0e:	ba 2f       	mov	r27, r26
    3e10:	a0 2d       	mov	r26, r0
    3e12:	0b 01       	movw	r0, r22
    3e14:	b9 01       	movw	r22, r18
    3e16:	90 01       	movw	r18, r0
    3e18:	0c 01       	movw	r0, r24
    3e1a:	ca 01       	movw	r24, r20
    3e1c:	a0 01       	movw	r20, r0
    3e1e:	11 24       	eor	r1, r1
    3e20:	ff 27       	eor	r31, r31
    3e22:	59 1b       	sub	r21, r25
    3e24:	99 f0       	breq	.+38     	; 0x3e4c <__addsf3x+0x5c>
    3e26:	59 3f       	cpi	r21, 0xF9	; 249
    3e28:	50 f4       	brcc	.+20     	; 0x3e3e <__addsf3x+0x4e>
    3e2a:	50 3e       	cpi	r21, 0xE0	; 224
    3e2c:	68 f1       	brcs	.+90     	; 0x3e88 <__addsf3x+0x98>
    3e2e:	1a 16       	cp	r1, r26
    3e30:	f0 40       	sbci	r31, 0x00	; 0
    3e32:	a2 2f       	mov	r26, r18
    3e34:	23 2f       	mov	r18, r19
    3e36:	34 2f       	mov	r19, r20
    3e38:	44 27       	eor	r20, r20
    3e3a:	58 5f       	subi	r21, 0xF8	; 248
    3e3c:	f3 cf       	rjmp	.-26     	; 0x3e24 <__addsf3x+0x34>
    3e3e:	46 95       	lsr	r20
    3e40:	37 95       	ror	r19
    3e42:	27 95       	ror	r18
    3e44:	a7 95       	ror	r26
    3e46:	f0 40       	sbci	r31, 0x00	; 0
    3e48:	53 95       	inc	r21
    3e4a:	c9 f7       	brne	.-14     	; 0x3e3e <__addsf3x+0x4e>
    3e4c:	7e f4       	brtc	.+30     	; 0x3e6c <__addsf3x+0x7c>
    3e4e:	1f 16       	cp	r1, r31
    3e50:	ba 0b       	sbc	r27, r26
    3e52:	62 0b       	sbc	r22, r18
    3e54:	73 0b       	sbc	r23, r19
    3e56:	84 0b       	sbc	r24, r20
    3e58:	ba f0       	brmi	.+46     	; 0x3e88 <__addsf3x+0x98>
    3e5a:	91 50       	subi	r25, 0x01	; 1
    3e5c:	a1 f0       	breq	.+40     	; 0x3e86 <__addsf3x+0x96>
    3e5e:	ff 0f       	add	r31, r31
    3e60:	bb 1f       	adc	r27, r27
    3e62:	66 1f       	adc	r22, r22
    3e64:	77 1f       	adc	r23, r23
    3e66:	88 1f       	adc	r24, r24
    3e68:	c2 f7       	brpl	.-16     	; 0x3e5a <__addsf3x+0x6a>
    3e6a:	0e c0       	rjmp	.+28     	; 0x3e88 <__addsf3x+0x98>
    3e6c:	ba 0f       	add	r27, r26
    3e6e:	62 1f       	adc	r22, r18
    3e70:	73 1f       	adc	r23, r19
    3e72:	84 1f       	adc	r24, r20
    3e74:	48 f4       	brcc	.+18     	; 0x3e88 <__addsf3x+0x98>
    3e76:	87 95       	ror	r24
    3e78:	77 95       	ror	r23
    3e7a:	67 95       	ror	r22
    3e7c:	b7 95       	ror	r27
    3e7e:	f7 95       	ror	r31
    3e80:	9e 3f       	cpi	r25, 0xFE	; 254
    3e82:	08 f0       	brcs	.+2      	; 0x3e86 <__addsf3x+0x96>
    3e84:	b3 cf       	rjmp	.-154    	; 0x3dec <__addsf3+0x1e>
    3e86:	93 95       	inc	r25
    3e88:	88 0f       	add	r24, r24
    3e8a:	08 f0       	brcs	.+2      	; 0x3e8e <__addsf3x+0x9e>
    3e8c:	99 27       	eor	r25, r25
    3e8e:	ee 0f       	add	r30, r30
    3e90:	97 95       	ror	r25
    3e92:	87 95       	ror	r24
    3e94:	08 95       	ret
    3e96:	90 d1       	rcall	.+800    	; 0x41b8 <__fp_pscA>
    3e98:	58 f0       	brcs	.+22     	; 0x3eb0 <__addsf3x+0xc0>
    3e9a:	80 e8       	ldi	r24, 0x80	; 128
    3e9c:	91 e0       	ldi	r25, 0x01	; 1
    3e9e:	09 f4       	brne	.+2      	; 0x3ea2 <__addsf3x+0xb2>
    3ea0:	9e ef       	ldi	r25, 0xFE	; 254
    3ea2:	91 d1       	rcall	.+802    	; 0x41c6 <__fp_pscB>
    3ea4:	28 f0       	brcs	.+10     	; 0x3eb0 <__addsf3x+0xc0>
    3ea6:	40 e8       	ldi	r20, 0x80	; 128
    3ea8:	51 e0       	ldi	r21, 0x01	; 1
    3eaa:	59 f4       	brne	.+22     	; 0x3ec2 <atan2+0xe>
    3eac:	5e ef       	ldi	r21, 0xFE	; 254
    3eae:	09 c0       	rjmp	.+18     	; 0x3ec2 <atan2+0xe>
    3eb0:	5b c1       	rjmp	.+694    	; 0x4168 <__fp_nan>
    3eb2:	fc c1       	rjmp	.+1016   	; 0x42ac <__fp_zero>

00003eb4 <atan2>:
    3eb4:	e9 2f       	mov	r30, r25
    3eb6:	e0 78       	andi	r30, 0x80	; 128
    3eb8:	d7 d1       	rcall	.+942    	; 0x4268 <__fp_split3>
    3eba:	68 f3       	brcs	.-38     	; 0x3e96 <__addsf3x+0xa6>
    3ebc:	09 2e       	mov	r0, r25
    3ebe:	05 2a       	or	r0, r21
    3ec0:	c1 f3       	breq	.-16     	; 0x3eb2 <__addsf3x+0xc2>
    3ec2:	26 17       	cp	r18, r22
    3ec4:	37 07       	cpc	r19, r23
    3ec6:	48 07       	cpc	r20, r24
    3ec8:	59 07       	cpc	r21, r25
    3eca:	38 f0       	brcs	.+14     	; 0x3eda <atan2+0x26>
    3ecc:	0e 2e       	mov	r0, r30
    3ece:	07 f8       	bld	r0, 7
    3ed0:	e0 25       	eor	r30, r0
    3ed2:	69 f0       	breq	.+26     	; 0x3eee <atan2+0x3a>
    3ed4:	e0 25       	eor	r30, r0
    3ed6:	e0 64       	ori	r30, 0x40	; 64
    3ed8:	0a c0       	rjmp	.+20     	; 0x3eee <atan2+0x3a>
    3eda:	ef 63       	ori	r30, 0x3F	; 63
    3edc:	07 f8       	bld	r0, 7
    3ede:	00 94       	com	r0
    3ee0:	07 fa       	bst	r0, 7
    3ee2:	db 01       	movw	r26, r22
    3ee4:	b9 01       	movw	r22, r18
    3ee6:	9d 01       	movw	r18, r26
    3ee8:	dc 01       	movw	r26, r24
    3eea:	ca 01       	movw	r24, r20
    3eec:	ad 01       	movw	r20, r26
    3eee:	ef 93       	push	r30
    3ef0:	4a d0       	rcall	.+148    	; 0x3f86 <__divsf3_pse>
    3ef2:	98 d1       	rcall	.+816    	; 0x4224 <__fp_round>
    3ef4:	0a d0       	rcall	.+20     	; 0x3f0a <atan>
    3ef6:	5f 91       	pop	r21
    3ef8:	55 23       	and	r21, r21
    3efa:	31 f0       	breq	.+12     	; 0x3f08 <atan2+0x54>
    3efc:	2b ed       	ldi	r18, 0xDB	; 219
    3efe:	3f e0       	ldi	r19, 0x0F	; 15
    3f00:	49 e4       	ldi	r20, 0x49	; 73
    3f02:	50 fd       	sbrc	r21, 0
    3f04:	49 ec       	ldi	r20, 0xC9	; 201
    3f06:	63 cf       	rjmp	.-314    	; 0x3dce <__addsf3>
    3f08:	08 95       	ret

00003f0a <atan>:
    3f0a:	df 93       	push	r29
    3f0c:	dd 27       	eor	r29, r29
    3f0e:	b9 2f       	mov	r27, r25
    3f10:	bf 77       	andi	r27, 0x7F	; 127
    3f12:	40 e8       	ldi	r20, 0x80	; 128
    3f14:	5f e3       	ldi	r21, 0x3F	; 63
    3f16:	16 16       	cp	r1, r22
    3f18:	17 06       	cpc	r1, r23
    3f1a:	48 07       	cpc	r20, r24
    3f1c:	5b 07       	cpc	r21, r27
    3f1e:	10 f4       	brcc	.+4      	; 0x3f24 <atan+0x1a>
    3f20:	d9 2f       	mov	r29, r25
    3f22:	cf d1       	rcall	.+926    	; 0x42c2 <inverse>
    3f24:	9f 93       	push	r25
    3f26:	8f 93       	push	r24
    3f28:	7f 93       	push	r23
    3f2a:	6f 93       	push	r22
    3f2c:	7c d2       	rcall	.+1272   	; 0x4426 <square>
    3f2e:	e4 ee       	ldi	r30, 0xE4	; 228
    3f30:	f0 e0       	ldi	r31, 0x00	; 0
    3f32:	1d d1       	rcall	.+570    	; 0x416e <__fp_powser>
    3f34:	77 d1       	rcall	.+750    	; 0x4224 <__fp_round>
    3f36:	2f 91       	pop	r18
    3f38:	3f 91       	pop	r19
    3f3a:	4f 91       	pop	r20
    3f3c:	5f 91       	pop	r21
    3f3e:	d4 d1       	rcall	.+936    	; 0x42e8 <__mulsf3x>
    3f40:	dd 23       	and	r29, r29
    3f42:	49 f0       	breq	.+18     	; 0x3f56 <atan+0x4c>
    3f44:	90 58       	subi	r25, 0x80	; 128
    3f46:	a2 ea       	ldi	r26, 0xA2	; 162
    3f48:	2a ed       	ldi	r18, 0xDA	; 218
    3f4a:	3f e0       	ldi	r19, 0x0F	; 15
    3f4c:	49 ec       	ldi	r20, 0xC9	; 201
    3f4e:	5f e3       	ldi	r21, 0x3F	; 63
    3f50:	d0 78       	andi	r29, 0x80	; 128
    3f52:	5d 27       	eor	r21, r29
    3f54:	4d df       	rcall	.-358    	; 0x3df0 <__addsf3x>
    3f56:	df 91       	pop	r29
    3f58:	65 c1       	rjmp	.+714    	; 0x4224 <__fp_round>

00003f5a <__cmpsf2>:
    3f5a:	dc d0       	rcall	.+440    	; 0x4114 <__fp_cmp>
    3f5c:	08 f4       	brcc	.+2      	; 0x3f60 <__cmpsf2+0x6>
    3f5e:	81 e0       	ldi	r24, 0x01	; 1
    3f60:	08 95       	ret

00003f62 <cos>:
    3f62:	39 d1       	rcall	.+626    	; 0x41d6 <__fp_rempio2>
    3f64:	e3 95       	inc	r30
    3f66:	6f c1       	rjmp	.+734    	; 0x4246 <__fp_sinus>

00003f68 <__divsf3>:
    3f68:	0c d0       	rcall	.+24     	; 0x3f82 <__divsf3x>
    3f6a:	5c c1       	rjmp	.+696    	; 0x4224 <__fp_round>
    3f6c:	2c d1       	rcall	.+600    	; 0x41c6 <__fp_pscB>
    3f6e:	40 f0       	brcs	.+16     	; 0x3f80 <__divsf3+0x18>
    3f70:	23 d1       	rcall	.+582    	; 0x41b8 <__fp_pscA>
    3f72:	30 f0       	brcs	.+12     	; 0x3f80 <__divsf3+0x18>
    3f74:	21 f4       	brne	.+8      	; 0x3f7e <__divsf3+0x16>
    3f76:	5f 3f       	cpi	r21, 0xFF	; 255
    3f78:	19 f0       	breq	.+6      	; 0x3f80 <__divsf3+0x18>
    3f7a:	f0 c0       	rjmp	.+480    	; 0x415c <__fp_inf>
    3f7c:	51 11       	cpse	r21, r1
    3f7e:	97 c1       	rjmp	.+814    	; 0x42ae <__fp_szero>
    3f80:	f3 c0       	rjmp	.+486    	; 0x4168 <__fp_nan>

00003f82 <__divsf3x>:
    3f82:	72 d1       	rcall	.+740    	; 0x4268 <__fp_split3>
    3f84:	98 f3       	brcs	.-26     	; 0x3f6c <__divsf3+0x4>

00003f86 <__divsf3_pse>:
    3f86:	99 23       	and	r25, r25
    3f88:	c9 f3       	breq	.-14     	; 0x3f7c <__divsf3+0x14>
    3f8a:	55 23       	and	r21, r21
    3f8c:	b1 f3       	breq	.-20     	; 0x3f7a <__divsf3+0x12>
    3f8e:	95 1b       	sub	r25, r21
    3f90:	55 0b       	sbc	r21, r21
    3f92:	bb 27       	eor	r27, r27
    3f94:	aa 27       	eor	r26, r26
    3f96:	62 17       	cp	r22, r18
    3f98:	73 07       	cpc	r23, r19
    3f9a:	84 07       	cpc	r24, r20
    3f9c:	38 f0       	brcs	.+14     	; 0x3fac <__divsf3_pse+0x26>
    3f9e:	9f 5f       	subi	r25, 0xFF	; 255
    3fa0:	5f 4f       	sbci	r21, 0xFF	; 255
    3fa2:	22 0f       	add	r18, r18
    3fa4:	33 1f       	adc	r19, r19
    3fa6:	44 1f       	adc	r20, r20
    3fa8:	aa 1f       	adc	r26, r26
    3faa:	a9 f3       	breq	.-22     	; 0x3f96 <__divsf3_pse+0x10>
    3fac:	33 d0       	rcall	.+102    	; 0x4014 <__divsf3_pse+0x8e>
    3fae:	0e 2e       	mov	r0, r30
    3fb0:	3a f0       	brmi	.+14     	; 0x3fc0 <__divsf3_pse+0x3a>
    3fb2:	e0 e8       	ldi	r30, 0x80	; 128
    3fb4:	30 d0       	rcall	.+96     	; 0x4016 <__divsf3_pse+0x90>
    3fb6:	91 50       	subi	r25, 0x01	; 1
    3fb8:	50 40       	sbci	r21, 0x00	; 0
    3fba:	e6 95       	lsr	r30
    3fbc:	00 1c       	adc	r0, r0
    3fbe:	ca f7       	brpl	.-14     	; 0x3fb2 <__divsf3_pse+0x2c>
    3fc0:	29 d0       	rcall	.+82     	; 0x4014 <__divsf3_pse+0x8e>
    3fc2:	fe 2f       	mov	r31, r30
    3fc4:	27 d0       	rcall	.+78     	; 0x4014 <__divsf3_pse+0x8e>
    3fc6:	66 0f       	add	r22, r22
    3fc8:	77 1f       	adc	r23, r23
    3fca:	88 1f       	adc	r24, r24
    3fcc:	bb 1f       	adc	r27, r27
    3fce:	26 17       	cp	r18, r22
    3fd0:	37 07       	cpc	r19, r23
    3fd2:	48 07       	cpc	r20, r24
    3fd4:	ab 07       	cpc	r26, r27
    3fd6:	b0 e8       	ldi	r27, 0x80	; 128
    3fd8:	09 f0       	breq	.+2      	; 0x3fdc <__divsf3_pse+0x56>
    3fda:	bb 0b       	sbc	r27, r27
    3fdc:	80 2d       	mov	r24, r0
    3fde:	bf 01       	movw	r22, r30
    3fe0:	ff 27       	eor	r31, r31
    3fe2:	93 58       	subi	r25, 0x83	; 131
    3fe4:	5f 4f       	sbci	r21, 0xFF	; 255
    3fe6:	2a f0       	brmi	.+10     	; 0x3ff2 <__divsf3_pse+0x6c>
    3fe8:	9e 3f       	cpi	r25, 0xFE	; 254
    3fea:	51 05       	cpc	r21, r1
    3fec:	68 f0       	brcs	.+26     	; 0x4008 <__divsf3_pse+0x82>
    3fee:	b6 c0       	rjmp	.+364    	; 0x415c <__fp_inf>
    3ff0:	5e c1       	rjmp	.+700    	; 0x42ae <__fp_szero>
    3ff2:	5f 3f       	cpi	r21, 0xFF	; 255
    3ff4:	ec f3       	brlt	.-6      	; 0x3ff0 <__divsf3_pse+0x6a>
    3ff6:	98 3e       	cpi	r25, 0xE8	; 232
    3ff8:	dc f3       	brlt	.-10     	; 0x3ff0 <__divsf3_pse+0x6a>
    3ffa:	86 95       	lsr	r24
    3ffc:	77 95       	ror	r23
    3ffe:	67 95       	ror	r22
    4000:	b7 95       	ror	r27
    4002:	f7 95       	ror	r31
    4004:	9f 5f       	subi	r25, 0xFF	; 255
    4006:	c9 f7       	brne	.-14     	; 0x3ffa <__divsf3_pse+0x74>
    4008:	88 0f       	add	r24, r24
    400a:	91 1d       	adc	r25, r1
    400c:	96 95       	lsr	r25
    400e:	87 95       	ror	r24
    4010:	97 f9       	bld	r25, 7
    4012:	08 95       	ret
    4014:	e1 e0       	ldi	r30, 0x01	; 1
    4016:	66 0f       	add	r22, r22
    4018:	77 1f       	adc	r23, r23
    401a:	88 1f       	adc	r24, r24
    401c:	bb 1f       	adc	r27, r27
    401e:	62 17       	cp	r22, r18
    4020:	73 07       	cpc	r23, r19
    4022:	84 07       	cpc	r24, r20
    4024:	ba 07       	cpc	r27, r26
    4026:	20 f0       	brcs	.+8      	; 0x4030 <__divsf3_pse+0xaa>
    4028:	62 1b       	sub	r22, r18
    402a:	73 0b       	sbc	r23, r19
    402c:	84 0b       	sbc	r24, r20
    402e:	ba 0b       	sbc	r27, r26
    4030:	ee 1f       	adc	r30, r30
    4032:	88 f7       	brcc	.-30     	; 0x4016 <__divsf3_pse+0x90>
    4034:	e0 95       	com	r30
    4036:	08 95       	ret

00004038 <__fixsfsi>:
    4038:	04 d0       	rcall	.+8      	; 0x4042 <__fixunssfsi>
    403a:	68 94       	set
    403c:	b1 11       	cpse	r27, r1
    403e:	37 c1       	rjmp	.+622    	; 0x42ae <__fp_szero>
    4040:	08 95       	ret

00004042 <__fixunssfsi>:
    4042:	1a d1       	rcall	.+564    	; 0x4278 <__fp_splitA>
    4044:	88 f0       	brcs	.+34     	; 0x4068 <__fixunssfsi+0x26>
    4046:	9f 57       	subi	r25, 0x7F	; 127
    4048:	90 f0       	brcs	.+36     	; 0x406e <__fixunssfsi+0x2c>
    404a:	b9 2f       	mov	r27, r25
    404c:	99 27       	eor	r25, r25
    404e:	b7 51       	subi	r27, 0x17	; 23
    4050:	a0 f0       	brcs	.+40     	; 0x407a <__fixunssfsi+0x38>
    4052:	d1 f0       	breq	.+52     	; 0x4088 <__fixunssfsi+0x46>
    4054:	66 0f       	add	r22, r22
    4056:	77 1f       	adc	r23, r23
    4058:	88 1f       	adc	r24, r24
    405a:	99 1f       	adc	r25, r25
    405c:	1a f0       	brmi	.+6      	; 0x4064 <__fixunssfsi+0x22>
    405e:	ba 95       	dec	r27
    4060:	c9 f7       	brne	.-14     	; 0x4054 <__fixunssfsi+0x12>
    4062:	12 c0       	rjmp	.+36     	; 0x4088 <__fixunssfsi+0x46>
    4064:	b1 30       	cpi	r27, 0x01	; 1
    4066:	81 f0       	breq	.+32     	; 0x4088 <__fixunssfsi+0x46>
    4068:	21 d1       	rcall	.+578    	; 0x42ac <__fp_zero>
    406a:	b1 e0       	ldi	r27, 0x01	; 1
    406c:	08 95       	ret
    406e:	1e c1       	rjmp	.+572    	; 0x42ac <__fp_zero>
    4070:	67 2f       	mov	r22, r23
    4072:	78 2f       	mov	r23, r24
    4074:	88 27       	eor	r24, r24
    4076:	b8 5f       	subi	r27, 0xF8	; 248
    4078:	39 f0       	breq	.+14     	; 0x4088 <__fixunssfsi+0x46>
    407a:	b9 3f       	cpi	r27, 0xF9	; 249
    407c:	cc f3       	brlt	.-14     	; 0x4070 <__fixunssfsi+0x2e>
    407e:	86 95       	lsr	r24
    4080:	77 95       	ror	r23
    4082:	67 95       	ror	r22
    4084:	b3 95       	inc	r27
    4086:	d9 f7       	brne	.-10     	; 0x407e <__fixunssfsi+0x3c>
    4088:	3e f4       	brtc	.+14     	; 0x4098 <__fixunssfsi+0x56>
    408a:	90 95       	com	r25
    408c:	80 95       	com	r24
    408e:	70 95       	com	r23
    4090:	61 95       	neg	r22
    4092:	7f 4f       	sbci	r23, 0xFF	; 255
    4094:	8f 4f       	sbci	r24, 0xFF	; 255
    4096:	9f 4f       	sbci	r25, 0xFF	; 255
    4098:	08 95       	ret

0000409a <__floatunsisf>:
    409a:	e8 94       	clt
    409c:	09 c0       	rjmp	.+18     	; 0x40b0 <__floatsisf+0x12>

0000409e <__floatsisf>:
    409e:	97 fb       	bst	r25, 7
    40a0:	3e f4       	brtc	.+14     	; 0x40b0 <__floatsisf+0x12>
    40a2:	90 95       	com	r25
    40a4:	80 95       	com	r24
    40a6:	70 95       	com	r23
    40a8:	61 95       	neg	r22
    40aa:	7f 4f       	sbci	r23, 0xFF	; 255
    40ac:	8f 4f       	sbci	r24, 0xFF	; 255
    40ae:	9f 4f       	sbci	r25, 0xFF	; 255
    40b0:	99 23       	and	r25, r25
    40b2:	a9 f0       	breq	.+42     	; 0x40de <__floatsisf+0x40>
    40b4:	f9 2f       	mov	r31, r25
    40b6:	96 e9       	ldi	r25, 0x96	; 150
    40b8:	bb 27       	eor	r27, r27
    40ba:	93 95       	inc	r25
    40bc:	f6 95       	lsr	r31
    40be:	87 95       	ror	r24
    40c0:	77 95       	ror	r23
    40c2:	67 95       	ror	r22
    40c4:	b7 95       	ror	r27
    40c6:	f1 11       	cpse	r31, r1
    40c8:	f8 cf       	rjmp	.-16     	; 0x40ba <__floatsisf+0x1c>
    40ca:	fa f4       	brpl	.+62     	; 0x410a <__floatsisf+0x6c>
    40cc:	bb 0f       	add	r27, r27
    40ce:	11 f4       	brne	.+4      	; 0x40d4 <__floatsisf+0x36>
    40d0:	60 ff       	sbrs	r22, 0
    40d2:	1b c0       	rjmp	.+54     	; 0x410a <__floatsisf+0x6c>
    40d4:	6f 5f       	subi	r22, 0xFF	; 255
    40d6:	7f 4f       	sbci	r23, 0xFF	; 255
    40d8:	8f 4f       	sbci	r24, 0xFF	; 255
    40da:	9f 4f       	sbci	r25, 0xFF	; 255
    40dc:	16 c0       	rjmp	.+44     	; 0x410a <__floatsisf+0x6c>
    40de:	88 23       	and	r24, r24
    40e0:	11 f0       	breq	.+4      	; 0x40e6 <__floatsisf+0x48>
    40e2:	96 e9       	ldi	r25, 0x96	; 150
    40e4:	11 c0       	rjmp	.+34     	; 0x4108 <__floatsisf+0x6a>
    40e6:	77 23       	and	r23, r23
    40e8:	21 f0       	breq	.+8      	; 0x40f2 <__floatsisf+0x54>
    40ea:	9e e8       	ldi	r25, 0x8E	; 142
    40ec:	87 2f       	mov	r24, r23
    40ee:	76 2f       	mov	r23, r22
    40f0:	05 c0       	rjmp	.+10     	; 0x40fc <__floatsisf+0x5e>
    40f2:	66 23       	and	r22, r22
    40f4:	71 f0       	breq	.+28     	; 0x4112 <__floatsisf+0x74>
    40f6:	96 e8       	ldi	r25, 0x86	; 134
    40f8:	86 2f       	mov	r24, r22
    40fa:	70 e0       	ldi	r23, 0x00	; 0
    40fc:	60 e0       	ldi	r22, 0x00	; 0
    40fe:	2a f0       	brmi	.+10     	; 0x410a <__floatsisf+0x6c>
    4100:	9a 95       	dec	r25
    4102:	66 0f       	add	r22, r22
    4104:	77 1f       	adc	r23, r23
    4106:	88 1f       	adc	r24, r24
    4108:	da f7       	brpl	.-10     	; 0x4100 <__floatsisf+0x62>
    410a:	88 0f       	add	r24, r24
    410c:	96 95       	lsr	r25
    410e:	87 95       	ror	r24
    4110:	97 f9       	bld	r25, 7
    4112:	08 95       	ret

00004114 <__fp_cmp>:
    4114:	99 0f       	add	r25, r25
    4116:	00 08       	sbc	r0, r0
    4118:	55 0f       	add	r21, r21
    411a:	aa 0b       	sbc	r26, r26
    411c:	e0 e8       	ldi	r30, 0x80	; 128
    411e:	fe ef       	ldi	r31, 0xFE	; 254
    4120:	16 16       	cp	r1, r22
    4122:	17 06       	cpc	r1, r23
    4124:	e8 07       	cpc	r30, r24
    4126:	f9 07       	cpc	r31, r25
    4128:	c0 f0       	brcs	.+48     	; 0x415a <__fp_cmp+0x46>
    412a:	12 16       	cp	r1, r18
    412c:	13 06       	cpc	r1, r19
    412e:	e4 07       	cpc	r30, r20
    4130:	f5 07       	cpc	r31, r21
    4132:	98 f0       	brcs	.+38     	; 0x415a <__fp_cmp+0x46>
    4134:	62 1b       	sub	r22, r18
    4136:	73 0b       	sbc	r23, r19
    4138:	84 0b       	sbc	r24, r20
    413a:	95 0b       	sbc	r25, r21
    413c:	39 f4       	brne	.+14     	; 0x414c <__fp_cmp+0x38>
    413e:	0a 26       	eor	r0, r26
    4140:	61 f0       	breq	.+24     	; 0x415a <__fp_cmp+0x46>
    4142:	23 2b       	or	r18, r19
    4144:	24 2b       	or	r18, r20
    4146:	25 2b       	or	r18, r21
    4148:	21 f4       	brne	.+8      	; 0x4152 <__fp_cmp+0x3e>
    414a:	08 95       	ret
    414c:	0a 26       	eor	r0, r26
    414e:	09 f4       	brne	.+2      	; 0x4152 <__fp_cmp+0x3e>
    4150:	a1 40       	sbci	r26, 0x01	; 1
    4152:	a6 95       	lsr	r26
    4154:	8f ef       	ldi	r24, 0xFF	; 255
    4156:	81 1d       	adc	r24, r1
    4158:	81 1d       	adc	r24, r1
    415a:	08 95       	ret

0000415c <__fp_inf>:
    415c:	97 f9       	bld	r25, 7
    415e:	9f 67       	ori	r25, 0x7F	; 127
    4160:	80 e8       	ldi	r24, 0x80	; 128
    4162:	70 e0       	ldi	r23, 0x00	; 0
    4164:	60 e0       	ldi	r22, 0x00	; 0
    4166:	08 95       	ret

00004168 <__fp_nan>:
    4168:	9f ef       	ldi	r25, 0xFF	; 255
    416a:	80 ec       	ldi	r24, 0xC0	; 192
    416c:	08 95       	ret

0000416e <__fp_powser>:
    416e:	df 93       	push	r29
    4170:	cf 93       	push	r28
    4172:	1f 93       	push	r17
    4174:	0f 93       	push	r16
    4176:	ff 92       	push	r15
    4178:	ef 92       	push	r14
    417a:	df 92       	push	r13
    417c:	7b 01       	movw	r14, r22
    417e:	8c 01       	movw	r16, r24
    4180:	68 94       	set
    4182:	05 c0       	rjmp	.+10     	; 0x418e <__fp_powser+0x20>
    4184:	da 2e       	mov	r13, r26
    4186:	ef 01       	movw	r28, r30
    4188:	af d0       	rcall	.+350    	; 0x42e8 <__mulsf3x>
    418a:	fe 01       	movw	r30, r28
    418c:	e8 94       	clt
    418e:	a5 91       	lpm	r26, Z+
    4190:	25 91       	lpm	r18, Z+
    4192:	35 91       	lpm	r19, Z+
    4194:	45 91       	lpm	r20, Z+
    4196:	55 91       	lpm	r21, Z+
    4198:	ae f3       	brts	.-22     	; 0x4184 <__fp_powser+0x16>
    419a:	ef 01       	movw	r28, r30
    419c:	29 de       	rcall	.-942    	; 0x3df0 <__addsf3x>
    419e:	fe 01       	movw	r30, r28
    41a0:	97 01       	movw	r18, r14
    41a2:	a8 01       	movw	r20, r16
    41a4:	da 94       	dec	r13
    41a6:	79 f7       	brne	.-34     	; 0x4186 <__fp_powser+0x18>
    41a8:	df 90       	pop	r13
    41aa:	ef 90       	pop	r14
    41ac:	ff 90       	pop	r15
    41ae:	0f 91       	pop	r16
    41b0:	1f 91       	pop	r17
    41b2:	cf 91       	pop	r28
    41b4:	df 91       	pop	r29
    41b6:	08 95       	ret

000041b8 <__fp_pscA>:
    41b8:	00 24       	eor	r0, r0
    41ba:	0a 94       	dec	r0
    41bc:	16 16       	cp	r1, r22
    41be:	17 06       	cpc	r1, r23
    41c0:	18 06       	cpc	r1, r24
    41c2:	09 06       	cpc	r0, r25
    41c4:	08 95       	ret

000041c6 <__fp_pscB>:
    41c6:	00 24       	eor	r0, r0
    41c8:	0a 94       	dec	r0
    41ca:	12 16       	cp	r1, r18
    41cc:	13 06       	cpc	r1, r19
    41ce:	14 06       	cpc	r1, r20
    41d0:	05 06       	cpc	r0, r21
    41d2:	08 95       	ret
    41d4:	c9 cf       	rjmp	.-110    	; 0x4168 <__fp_nan>

000041d6 <__fp_rempio2>:
    41d6:	50 d0       	rcall	.+160    	; 0x4278 <__fp_splitA>
    41d8:	e8 f3       	brcs	.-6      	; 0x41d4 <__fp_pscB+0xe>
    41da:	e8 94       	clt
    41dc:	e0 e0       	ldi	r30, 0x00	; 0
    41de:	bb 27       	eor	r27, r27
    41e0:	9f 57       	subi	r25, 0x7F	; 127
    41e2:	f0 f0       	brcs	.+60     	; 0x4220 <__fp_rempio2+0x4a>
    41e4:	2a ed       	ldi	r18, 0xDA	; 218
    41e6:	3f e0       	ldi	r19, 0x0F	; 15
    41e8:	49 ec       	ldi	r20, 0xC9	; 201
    41ea:	06 c0       	rjmp	.+12     	; 0x41f8 <__fp_rempio2+0x22>
    41ec:	ee 0f       	add	r30, r30
    41ee:	bb 0f       	add	r27, r27
    41f0:	66 1f       	adc	r22, r22
    41f2:	77 1f       	adc	r23, r23
    41f4:	88 1f       	adc	r24, r24
    41f6:	28 f0       	brcs	.+10     	; 0x4202 <__fp_rempio2+0x2c>
    41f8:	b2 3a       	cpi	r27, 0xA2	; 162
    41fa:	62 07       	cpc	r22, r18
    41fc:	73 07       	cpc	r23, r19
    41fe:	84 07       	cpc	r24, r20
    4200:	28 f0       	brcs	.+10     	; 0x420c <__fp_rempio2+0x36>
    4202:	b2 5a       	subi	r27, 0xA2	; 162
    4204:	62 0b       	sbc	r22, r18
    4206:	73 0b       	sbc	r23, r19
    4208:	84 0b       	sbc	r24, r20
    420a:	e3 95       	inc	r30
    420c:	9a 95       	dec	r25
    420e:	72 f7       	brpl	.-36     	; 0x41ec <__fp_rempio2+0x16>
    4210:	80 38       	cpi	r24, 0x80	; 128
    4212:	30 f4       	brcc	.+12     	; 0x4220 <__fp_rempio2+0x4a>
    4214:	9a 95       	dec	r25
    4216:	bb 0f       	add	r27, r27
    4218:	66 1f       	adc	r22, r22
    421a:	77 1f       	adc	r23, r23
    421c:	88 1f       	adc	r24, r24
    421e:	d2 f7       	brpl	.-12     	; 0x4214 <__fp_rempio2+0x3e>
    4220:	90 48       	sbci	r25, 0x80	; 128
    4222:	06 c1       	rjmp	.+524    	; 0x4430 <__fp_mpack_finite>

00004224 <__fp_round>:
    4224:	09 2e       	mov	r0, r25
    4226:	03 94       	inc	r0
    4228:	00 0c       	add	r0, r0
    422a:	11 f4       	brne	.+4      	; 0x4230 <__fp_round+0xc>
    422c:	88 23       	and	r24, r24
    422e:	52 f0       	brmi	.+20     	; 0x4244 <__fp_round+0x20>
    4230:	bb 0f       	add	r27, r27
    4232:	40 f4       	brcc	.+16     	; 0x4244 <__fp_round+0x20>
    4234:	bf 2b       	or	r27, r31
    4236:	11 f4       	brne	.+4      	; 0x423c <__fp_round+0x18>
    4238:	60 ff       	sbrs	r22, 0
    423a:	04 c0       	rjmp	.+8      	; 0x4244 <__fp_round+0x20>
    423c:	6f 5f       	subi	r22, 0xFF	; 255
    423e:	7f 4f       	sbci	r23, 0xFF	; 255
    4240:	8f 4f       	sbci	r24, 0xFF	; 255
    4242:	9f 4f       	sbci	r25, 0xFF	; 255
    4244:	08 95       	ret

00004246 <__fp_sinus>:
    4246:	ef 93       	push	r30
    4248:	e0 ff       	sbrs	r30, 0
    424a:	06 c0       	rjmp	.+12     	; 0x4258 <__fp_sinus+0x12>
    424c:	a2 ea       	ldi	r26, 0xA2	; 162
    424e:	2a ed       	ldi	r18, 0xDA	; 218
    4250:	3f e0       	ldi	r19, 0x0F	; 15
    4252:	49 ec       	ldi	r20, 0xC9	; 201
    4254:	5f eb       	ldi	r21, 0xBF	; 191
    4256:	cc dd       	rcall	.-1128   	; 0x3df0 <__addsf3x>
    4258:	e5 df       	rcall	.-54     	; 0x4224 <__fp_round>
    425a:	0f 90       	pop	r0
    425c:	03 94       	inc	r0
    425e:	01 fc       	sbrc	r0, 1
    4260:	90 58       	subi	r25, 0x80	; 128
    4262:	e1 e1       	ldi	r30, 0x11	; 17
    4264:	f1 e0       	ldi	r31, 0x01	; 1
    4266:	f7 c0       	rjmp	.+494    	; 0x4456 <__fp_powsodd>

00004268 <__fp_split3>:
    4268:	57 fd       	sbrc	r21, 7
    426a:	90 58       	subi	r25, 0x80	; 128
    426c:	44 0f       	add	r20, r20
    426e:	55 1f       	adc	r21, r21
    4270:	59 f0       	breq	.+22     	; 0x4288 <__fp_splitA+0x10>
    4272:	5f 3f       	cpi	r21, 0xFF	; 255
    4274:	71 f0       	breq	.+28     	; 0x4292 <__fp_splitA+0x1a>
    4276:	47 95       	ror	r20

00004278 <__fp_splitA>:
    4278:	88 0f       	add	r24, r24
    427a:	97 fb       	bst	r25, 7
    427c:	99 1f       	adc	r25, r25
    427e:	61 f0       	breq	.+24     	; 0x4298 <__fp_splitA+0x20>
    4280:	9f 3f       	cpi	r25, 0xFF	; 255
    4282:	79 f0       	breq	.+30     	; 0x42a2 <__fp_splitA+0x2a>
    4284:	87 95       	ror	r24
    4286:	08 95       	ret
    4288:	12 16       	cp	r1, r18
    428a:	13 06       	cpc	r1, r19
    428c:	14 06       	cpc	r1, r20
    428e:	55 1f       	adc	r21, r21
    4290:	f2 cf       	rjmp	.-28     	; 0x4276 <__fp_split3+0xe>
    4292:	46 95       	lsr	r20
    4294:	f1 df       	rcall	.-30     	; 0x4278 <__fp_splitA>
    4296:	08 c0       	rjmp	.+16     	; 0x42a8 <__fp_splitA+0x30>
    4298:	16 16       	cp	r1, r22
    429a:	17 06       	cpc	r1, r23
    429c:	18 06       	cpc	r1, r24
    429e:	99 1f       	adc	r25, r25
    42a0:	f1 cf       	rjmp	.-30     	; 0x4284 <__fp_splitA+0xc>
    42a2:	86 95       	lsr	r24
    42a4:	71 05       	cpc	r23, r1
    42a6:	61 05       	cpc	r22, r1
    42a8:	08 94       	sec
    42aa:	08 95       	ret

000042ac <__fp_zero>:
    42ac:	e8 94       	clt

000042ae <__fp_szero>:
    42ae:	bb 27       	eor	r27, r27
    42b0:	66 27       	eor	r22, r22
    42b2:	77 27       	eor	r23, r23
    42b4:	cb 01       	movw	r24, r22
    42b6:	97 f9       	bld	r25, 7
    42b8:	08 95       	ret

000042ba <__gesf2>:
    42ba:	2c df       	rcall	.-424    	; 0x4114 <__fp_cmp>
    42bc:	08 f4       	brcc	.+2      	; 0x42c0 <__gesf2+0x6>
    42be:	8f ef       	ldi	r24, 0xFF	; 255
    42c0:	08 95       	ret

000042c2 <inverse>:
    42c2:	9b 01       	movw	r18, r22
    42c4:	ac 01       	movw	r20, r24
    42c6:	60 e0       	ldi	r22, 0x00	; 0
    42c8:	70 e0       	ldi	r23, 0x00	; 0
    42ca:	80 e8       	ldi	r24, 0x80	; 128
    42cc:	9f e3       	ldi	r25, 0x3F	; 63
    42ce:	4c ce       	rjmp	.-872    	; 0x3f68 <__divsf3>

000042d0 <__mulsf3>:
    42d0:	0b d0       	rcall	.+22     	; 0x42e8 <__mulsf3x>
    42d2:	a8 cf       	rjmp	.-176    	; 0x4224 <__fp_round>
    42d4:	71 df       	rcall	.-286    	; 0x41b8 <__fp_pscA>
    42d6:	28 f0       	brcs	.+10     	; 0x42e2 <__mulsf3+0x12>
    42d8:	76 df       	rcall	.-276    	; 0x41c6 <__fp_pscB>
    42da:	18 f0       	brcs	.+6      	; 0x42e2 <__mulsf3+0x12>
    42dc:	95 23       	and	r25, r21
    42de:	09 f0       	breq	.+2      	; 0x42e2 <__mulsf3+0x12>
    42e0:	3d cf       	rjmp	.-390    	; 0x415c <__fp_inf>
    42e2:	42 cf       	rjmp	.-380    	; 0x4168 <__fp_nan>
    42e4:	11 24       	eor	r1, r1
    42e6:	e3 cf       	rjmp	.-58     	; 0x42ae <__fp_szero>

000042e8 <__mulsf3x>:
    42e8:	bf df       	rcall	.-130    	; 0x4268 <__fp_split3>
    42ea:	a0 f3       	brcs	.-24     	; 0x42d4 <__mulsf3+0x4>

000042ec <__mulsf3_pse>:
    42ec:	95 9f       	mul	r25, r21
    42ee:	d1 f3       	breq	.-12     	; 0x42e4 <__mulsf3+0x14>
    42f0:	95 0f       	add	r25, r21
    42f2:	50 e0       	ldi	r21, 0x00	; 0
    42f4:	55 1f       	adc	r21, r21
    42f6:	62 9f       	mul	r22, r18
    42f8:	f0 01       	movw	r30, r0
    42fa:	72 9f       	mul	r23, r18
    42fc:	bb 27       	eor	r27, r27
    42fe:	f0 0d       	add	r31, r0
    4300:	b1 1d       	adc	r27, r1
    4302:	63 9f       	mul	r22, r19
    4304:	aa 27       	eor	r26, r26
    4306:	f0 0d       	add	r31, r0
    4308:	b1 1d       	adc	r27, r1
    430a:	aa 1f       	adc	r26, r26
    430c:	64 9f       	mul	r22, r20
    430e:	66 27       	eor	r22, r22
    4310:	b0 0d       	add	r27, r0
    4312:	a1 1d       	adc	r26, r1
    4314:	66 1f       	adc	r22, r22
    4316:	82 9f       	mul	r24, r18
    4318:	22 27       	eor	r18, r18
    431a:	b0 0d       	add	r27, r0
    431c:	a1 1d       	adc	r26, r1
    431e:	62 1f       	adc	r22, r18
    4320:	73 9f       	mul	r23, r19
    4322:	b0 0d       	add	r27, r0
    4324:	a1 1d       	adc	r26, r1
    4326:	62 1f       	adc	r22, r18
    4328:	83 9f       	mul	r24, r19
    432a:	a0 0d       	add	r26, r0
    432c:	61 1d       	adc	r22, r1
    432e:	22 1f       	adc	r18, r18
    4330:	74 9f       	mul	r23, r20
    4332:	33 27       	eor	r19, r19
    4334:	a0 0d       	add	r26, r0
    4336:	61 1d       	adc	r22, r1
    4338:	23 1f       	adc	r18, r19
    433a:	84 9f       	mul	r24, r20
    433c:	60 0d       	add	r22, r0
    433e:	21 1d       	adc	r18, r1
    4340:	82 2f       	mov	r24, r18
    4342:	76 2f       	mov	r23, r22
    4344:	6a 2f       	mov	r22, r26
    4346:	11 24       	eor	r1, r1
    4348:	9f 57       	subi	r25, 0x7F	; 127
    434a:	50 40       	sbci	r21, 0x00	; 0
    434c:	8a f0       	brmi	.+34     	; 0x4370 <__mulsf3_pse+0x84>
    434e:	e1 f0       	breq	.+56     	; 0x4388 <__mulsf3_pse+0x9c>
    4350:	88 23       	and	r24, r24
    4352:	4a f0       	brmi	.+18     	; 0x4366 <__mulsf3_pse+0x7a>
    4354:	ee 0f       	add	r30, r30
    4356:	ff 1f       	adc	r31, r31
    4358:	bb 1f       	adc	r27, r27
    435a:	66 1f       	adc	r22, r22
    435c:	77 1f       	adc	r23, r23
    435e:	88 1f       	adc	r24, r24
    4360:	91 50       	subi	r25, 0x01	; 1
    4362:	50 40       	sbci	r21, 0x00	; 0
    4364:	a9 f7       	brne	.-22     	; 0x4350 <__mulsf3_pse+0x64>
    4366:	9e 3f       	cpi	r25, 0xFE	; 254
    4368:	51 05       	cpc	r21, r1
    436a:	70 f0       	brcs	.+28     	; 0x4388 <__mulsf3_pse+0x9c>
    436c:	f7 ce       	rjmp	.-530    	; 0x415c <__fp_inf>
    436e:	9f cf       	rjmp	.-194    	; 0x42ae <__fp_szero>
    4370:	5f 3f       	cpi	r21, 0xFF	; 255
    4372:	ec f3       	brlt	.-6      	; 0x436e <__mulsf3_pse+0x82>
    4374:	98 3e       	cpi	r25, 0xE8	; 232
    4376:	dc f3       	brlt	.-10     	; 0x436e <__mulsf3_pse+0x82>
    4378:	86 95       	lsr	r24
    437a:	77 95       	ror	r23
    437c:	67 95       	ror	r22
    437e:	b7 95       	ror	r27
    4380:	f7 95       	ror	r31
    4382:	e7 95       	ror	r30
    4384:	9f 5f       	subi	r25, 0xFF	; 255
    4386:	c1 f7       	brne	.-16     	; 0x4378 <__mulsf3_pse+0x8c>
    4388:	fe 2b       	or	r31, r30
    438a:	88 0f       	add	r24, r24
    438c:	91 1d       	adc	r25, r1
    438e:	96 95       	lsr	r25
    4390:	87 95       	ror	r24
    4392:	97 f9       	bld	r25, 7
    4394:	08 95       	ret

00004396 <sin>:
    4396:	9f 93       	push	r25
    4398:	1e df       	rcall	.-452    	; 0x41d6 <__fp_rempio2>
    439a:	0f 90       	pop	r0
    439c:	07 fc       	sbrc	r0, 7
    439e:	ee 5f       	subi	r30, 0xFE	; 254
    43a0:	52 cf       	rjmp	.-348    	; 0x4246 <__fp_sinus>
    43a2:	11 f4       	brne	.+4      	; 0x43a8 <sin+0x12>
    43a4:	0e f4       	brtc	.+2      	; 0x43a8 <sin+0x12>
    43a6:	e0 ce       	rjmp	.-576    	; 0x4168 <__fp_nan>
    43a8:	41 c0       	rjmp	.+130    	; 0x442c <__fp_mpack>

000043aa <sqrt>:
    43aa:	66 df       	rcall	.-308    	; 0x4278 <__fp_splitA>
    43ac:	d0 f3       	brcs	.-12     	; 0x43a2 <sin+0xc>
    43ae:	99 23       	and	r25, r25
    43b0:	d9 f3       	breq	.-10     	; 0x43a8 <sin+0x12>
    43b2:	ce f3       	brts	.-14     	; 0x43a6 <sin+0x10>
    43b4:	9f 57       	subi	r25, 0x7F	; 127
    43b6:	55 0b       	sbc	r21, r21
    43b8:	87 ff       	sbrs	r24, 7
    43ba:	46 d0       	rcall	.+140    	; 0x4448 <__fp_norm2>
    43bc:	00 24       	eor	r0, r0
    43be:	a0 e6       	ldi	r26, 0x60	; 96
    43c0:	40 ea       	ldi	r20, 0xA0	; 160
    43c2:	90 01       	movw	r18, r0
    43c4:	80 58       	subi	r24, 0x80	; 128
    43c6:	56 95       	lsr	r21
    43c8:	97 95       	ror	r25
    43ca:	28 f4       	brcc	.+10     	; 0x43d6 <sqrt+0x2c>
    43cc:	80 5c       	subi	r24, 0xC0	; 192
    43ce:	66 0f       	add	r22, r22
    43d0:	77 1f       	adc	r23, r23
    43d2:	88 1f       	adc	r24, r24
    43d4:	20 f0       	brcs	.+8      	; 0x43de <sqrt+0x34>
    43d6:	26 17       	cp	r18, r22
    43d8:	37 07       	cpc	r19, r23
    43da:	48 07       	cpc	r20, r24
    43dc:	30 f4       	brcc	.+12     	; 0x43ea <sqrt+0x40>
    43de:	62 1b       	sub	r22, r18
    43e0:	73 0b       	sbc	r23, r19
    43e2:	84 0b       	sbc	r24, r20
    43e4:	20 29       	or	r18, r0
    43e6:	31 29       	or	r19, r1
    43e8:	4a 2b       	or	r20, r26
    43ea:	a6 95       	lsr	r26
    43ec:	17 94       	ror	r1
    43ee:	07 94       	ror	r0
    43f0:	20 25       	eor	r18, r0
    43f2:	31 25       	eor	r19, r1
    43f4:	4a 27       	eor	r20, r26
    43f6:	58 f7       	brcc	.-42     	; 0x43ce <sqrt+0x24>
    43f8:	66 0f       	add	r22, r22
    43fa:	77 1f       	adc	r23, r23
    43fc:	88 1f       	adc	r24, r24
    43fe:	20 f0       	brcs	.+8      	; 0x4408 <sqrt+0x5e>
    4400:	26 17       	cp	r18, r22
    4402:	37 07       	cpc	r19, r23
    4404:	48 07       	cpc	r20, r24
    4406:	30 f4       	brcc	.+12     	; 0x4414 <sqrt+0x6a>
    4408:	62 0b       	sbc	r22, r18
    440a:	73 0b       	sbc	r23, r19
    440c:	84 0b       	sbc	r24, r20
    440e:	20 0d       	add	r18, r0
    4410:	31 1d       	adc	r19, r1
    4412:	41 1d       	adc	r20, r1
    4414:	a0 95       	com	r26
    4416:	81 f7       	brne	.-32     	; 0x43f8 <sqrt+0x4e>
    4418:	b9 01       	movw	r22, r18
    441a:	84 2f       	mov	r24, r20
    441c:	91 58       	subi	r25, 0x81	; 129
    441e:	88 0f       	add	r24, r24
    4420:	96 95       	lsr	r25
    4422:	87 95       	ror	r24
    4424:	08 95       	ret

00004426 <square>:
    4426:	9b 01       	movw	r18, r22
    4428:	ac 01       	movw	r20, r24
    442a:	52 cf       	rjmp	.-348    	; 0x42d0 <__mulsf3>

0000442c <__fp_mpack>:
    442c:	9f 3f       	cpi	r25, 0xFF	; 255
    442e:	31 f0       	breq	.+12     	; 0x443c <__fp_mpack_finite+0xc>

00004430 <__fp_mpack_finite>:
    4430:	91 50       	subi	r25, 0x01	; 1
    4432:	20 f4       	brcc	.+8      	; 0x443c <__fp_mpack_finite+0xc>
    4434:	87 95       	ror	r24
    4436:	77 95       	ror	r23
    4438:	67 95       	ror	r22
    443a:	b7 95       	ror	r27
    443c:	88 0f       	add	r24, r24
    443e:	91 1d       	adc	r25, r1
    4440:	96 95       	lsr	r25
    4442:	87 95       	ror	r24
    4444:	97 f9       	bld	r25, 7
    4446:	08 95       	ret

00004448 <__fp_norm2>:
    4448:	91 50       	subi	r25, 0x01	; 1
    444a:	50 40       	sbci	r21, 0x00	; 0
    444c:	66 0f       	add	r22, r22
    444e:	77 1f       	adc	r23, r23
    4450:	88 1f       	adc	r24, r24
    4452:	d2 f7       	brpl	.-12     	; 0x4448 <__fp_norm2>
    4454:	08 95       	ret

00004456 <__fp_powsodd>:
    4456:	9f 93       	push	r25
    4458:	8f 93       	push	r24
    445a:	7f 93       	push	r23
    445c:	6f 93       	push	r22
    445e:	ff 93       	push	r31
    4460:	ef 93       	push	r30
    4462:	9b 01       	movw	r18, r22
    4464:	ac 01       	movw	r20, r24
    4466:	34 df       	rcall	.-408    	; 0x42d0 <__mulsf3>
    4468:	ef 91       	pop	r30
    446a:	ff 91       	pop	r31
    446c:	80 de       	rcall	.-768    	; 0x416e <__fp_powser>
    446e:	2f 91       	pop	r18
    4470:	3f 91       	pop	r19
    4472:	4f 91       	pop	r20
    4474:	5f 91       	pop	r21
    4476:	2c cf       	rjmp	.-424    	; 0x42d0 <__mulsf3>

00004478 <__divmodhi4>:
    4478:	97 fb       	bst	r25, 7
    447a:	07 2e       	mov	r0, r23
    447c:	16 f4       	brtc	.+4      	; 0x4482 <__divmodhi4+0xa>
    447e:	00 94       	com	r0
    4480:	06 d0       	rcall	.+12     	; 0x448e <__divmodhi4_neg1>
    4482:	77 fd       	sbrc	r23, 7
    4484:	08 d0       	rcall	.+16     	; 0x4496 <__divmodhi4_neg2>
    4486:	0b d0       	rcall	.+22     	; 0x449e <__udivmodhi4>
    4488:	07 fc       	sbrc	r0, 7
    448a:	05 d0       	rcall	.+10     	; 0x4496 <__divmodhi4_neg2>
    448c:	3e f4       	brtc	.+14     	; 0x449c <__divmodhi4_exit>

0000448e <__divmodhi4_neg1>:
    448e:	90 95       	com	r25
    4490:	81 95       	neg	r24
    4492:	9f 4f       	sbci	r25, 0xFF	; 255
    4494:	08 95       	ret

00004496 <__divmodhi4_neg2>:
    4496:	70 95       	com	r23
    4498:	61 95       	neg	r22
    449a:	7f 4f       	sbci	r23, 0xFF	; 255

0000449c <__divmodhi4_exit>:
    449c:	08 95       	ret

0000449e <__udivmodhi4>:
    449e:	aa 1b       	sub	r26, r26
    44a0:	bb 1b       	sub	r27, r27
    44a2:	51 e1       	ldi	r21, 0x11	; 17
    44a4:	07 c0       	rjmp	.+14     	; 0x44b4 <__udivmodhi4_ep>

000044a6 <__udivmodhi4_loop>:
    44a6:	aa 1f       	adc	r26, r26
    44a8:	bb 1f       	adc	r27, r27
    44aa:	a6 17       	cp	r26, r22
    44ac:	b7 07       	cpc	r27, r23
    44ae:	10 f0       	brcs	.+4      	; 0x44b4 <__udivmodhi4_ep>
    44b0:	a6 1b       	sub	r26, r22
    44b2:	b7 0b       	sbc	r27, r23

000044b4 <__udivmodhi4_ep>:
    44b4:	88 1f       	adc	r24, r24
    44b6:	99 1f       	adc	r25, r25
    44b8:	5a 95       	dec	r21
    44ba:	a9 f7       	brne	.-22     	; 0x44a6 <__udivmodhi4_loop>
    44bc:	80 95       	com	r24
    44be:	90 95       	com	r25
    44c0:	bc 01       	movw	r22, r24
    44c2:	cd 01       	movw	r24, r26
    44c4:	08 95       	ret

000044c6 <__tablejump2__>:
    44c6:	ee 0f       	add	r30, r30
    44c8:	ff 1f       	adc	r31, r31
    44ca:	88 1f       	adc	r24, r24
    44cc:	8b bf       	out	0x3b, r24	; 59
    44ce:	07 90       	elpm	r0, Z+
    44d0:	f6 91       	elpm	r31, Z
    44d2:	e0 2d       	mov	r30, r0
    44d4:	19 94       	eijmp

000044d6 <_exit>:
    44d6:	f8 94       	cli

000044d8 <__stop_program>:
    44d8:	ff cf       	rjmp	.-2      	; 0x44d8 <__stop_program>
