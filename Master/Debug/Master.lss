
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800200  00004500  00004594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004500  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002fb  008002be  008002be  00004652  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004652  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004684  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000428  00000000  00000000  000046c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000054e4  00000000  00000000  00004aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ec7  00000000  00000000  00009fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003345  00000000  00000000  0000ae97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001128  00000000  00000000  0000e1dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e82  00000000  00000000  0000f304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003d21  00000000  00000000  00011186  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000440  00000000  00000000  00014ea7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	98 c0       	rjmp	.+304    	; 0x132 <__ctors_end>
       2:	00 00       	nop
       4:	c7 c0       	rjmp	.+398    	; 0x194 <__bad_interrupt>
       6:	00 00       	nop
       8:	c5 c0       	rjmp	.+394    	; 0x194 <__bad_interrupt>
       a:	00 00       	nop
       c:	f5 c0       	rjmp	.+490    	; 0x1f8 <__vector_3>
       e:	00 00       	nop
      10:	c1 c0       	rjmp	.+386    	; 0x194 <__bad_interrupt>
      12:	00 00       	nop
      14:	bf c0       	rjmp	.+382    	; 0x194 <__bad_interrupt>
      16:	00 00       	nop
      18:	16 c1       	rjmp	.+556    	; 0x246 <__vector_6>
      1a:	00 00       	nop
      1c:	bb c0       	rjmp	.+374    	; 0x194 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b9 c0       	rjmp	.+370    	; 0x194 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <__vector_9>
      28:	b5 c0       	rjmp	.+362    	; 0x194 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 44 17 	jmp	0x2e88	; 0x2e88 <__vector_11>
      30:	b1 c0       	rjmp	.+354    	; 0x194 <__bad_interrupt>
      32:	00 00       	nop
      34:	af c0       	rjmp	.+350    	; 0x194 <__bad_interrupt>
      36:	00 00       	nop
      38:	ad c0       	rjmp	.+346    	; 0x194 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c0 c1       	rjmp	.+896    	; 0x3be <__vector_15>
      3e:	00 00       	nop
      40:	a9 c0       	rjmp	.+338    	; 0x194 <__bad_interrupt>
      42:	00 00       	nop
      44:	a7 c0       	rjmp	.+334    	; 0x194 <__bad_interrupt>
      46:	00 00       	nop
      48:	a5 c0       	rjmp	.+330    	; 0x194 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a3 c0       	rjmp	.+326    	; 0x194 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a1 c0       	rjmp	.+322    	; 0x194 <__bad_interrupt>
      52:	00 00       	nop
      54:	9f c0       	rjmp	.+318    	; 0x194 <__bad_interrupt>
      56:	00 00       	nop
      58:	9d c0       	rjmp	.+314    	; 0x194 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1b c1       	rjmp	.+566    	; 0x294 <__vector_23>
      5e:	00 00       	nop
      60:	99 c0       	rjmp	.+306    	; 0x194 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 ed 1c 	jmp	0x39da	; 0x39da <__vector_25>
      68:	0c 94 1c 1d 	jmp	0x3a38	; 0x3a38 <__vector_26>
      6c:	93 c0       	rjmp	.+294    	; 0x194 <__bad_interrupt>
      6e:	00 00       	nop
      70:	91 c0       	rjmp	.+290    	; 0x194 <__bad_interrupt>
      72:	00 00       	nop
      74:	8f c0       	rjmp	.+286    	; 0x194 <__bad_interrupt>
      76:	00 00       	nop
      78:	8d c0       	rjmp	.+282    	; 0x194 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8b c0       	rjmp	.+278    	; 0x194 <__bad_interrupt>
      7e:	00 00       	nop
      80:	89 c0       	rjmp	.+274    	; 0x194 <__bad_interrupt>
      82:	00 00       	nop
      84:	87 c0       	rjmp	.+270    	; 0x194 <__bad_interrupt>
      86:	00 00       	nop
      88:	85 c0       	rjmp	.+266    	; 0x194 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	83 c0       	rjmp	.+262    	; 0x194 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <__vector_36>
      94:	0c 94 b5 1d 	jmp	0x3b6a	; 0x3b6a <__vector_37>
      98:	7d c0       	rjmp	.+250    	; 0x194 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	7b c0       	rjmp	.+246    	; 0x194 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	79 c0       	rjmp	.+242    	; 0x194 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	77 c0       	rjmp	.+238    	; 0x194 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	75 c0       	rjmp	.+234    	; 0x194 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	73 c0       	rjmp	.+230    	; 0x194 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	71 c0       	rjmp	.+226    	; 0x194 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	6f c0       	rjmp	.+222    	; 0x194 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	6d c0       	rjmp	.+218    	; 0x194 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	6b c0       	rjmp	.+214    	; 0x194 <__bad_interrupt>
      be:	00 00       	nop
      c0:	69 c0       	rjmp	.+210    	; 0x194 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	67 c0       	rjmp	.+206    	; 0x194 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	65 c0       	rjmp	.+202    	; 0x194 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 e3 1d 	jmp	0x3bc6	; 0x3bc6 <__vector_51>
      d0:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <__vector_52>
      d4:	5f c0       	rjmp	.+190    	; 0x194 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 53 1e 	jmp	0x3ca6	; 0x3ca6 <__vector_54>
      dc:	0c 94 82 1e 	jmp	0x3d04	; 0x3d04 <__vector_55>
      e0:	59 c0       	rjmp	.+178    	; 0x194 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 00       	.word	0x003f	; ????

00000130 <__ctors_start>:
     130:	f1 17       	cp	r31, r17

00000132 <__ctors_end>:
     132:	11 24       	eor	r1, r1
     134:	1f be       	out	0x3f, r1	; 63
     136:	cf ef       	ldi	r28, 0xFF	; 255
     138:	d1 e2       	ldi	r29, 0x21	; 33
     13a:	de bf       	out	0x3e, r29	; 62
     13c:	cd bf       	out	0x3d, r28	; 61
     13e:	00 e0       	ldi	r16, 0x00	; 0
     140:	0c bf       	out	0x3c, r16	; 60

00000142 <__do_copy_data>:
     142:	12 e0       	ldi	r17, 0x02	; 2
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b2 e0       	ldi	r27, 0x02	; 2
     148:	e0 e0       	ldi	r30, 0x00	; 0
     14a:	f5 e4       	ldi	r31, 0x45	; 69
     14c:	00 e0       	ldi	r16, 0x00	; 0
     14e:	0b bf       	out	0x3b, r16	; 59
     150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x14>
     152:	07 90       	elpm	r0, Z+
     154:	0d 92       	st	X+, r0
     156:	ae 3b       	cpi	r26, 0xBE	; 190
     158:	b1 07       	cpc	r27, r17
     15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0x10>

0000015c <__do_clear_bss>:
     15c:	25 e0       	ldi	r18, 0x05	; 5
     15e:	ae eb       	ldi	r26, 0xBE	; 190
     160:	b2 e0       	ldi	r27, 0x02	; 2
     162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
     164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
     166:	a9 3b       	cpi	r26, 0xB9	; 185
     168:	b2 07       	cpc	r27, r18
     16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>

0000016c <__do_global_ctors>:
     16c:	10 e0       	ldi	r17, 0x00	; 0
     16e:	c9 e9       	ldi	r28, 0x99	; 153
     170:	d0 e0       	ldi	r29, 0x00	; 0
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	06 c0       	rjmp	.+12     	; 0x182 <__do_global_ctors+0x16>
     176:	21 97       	sbiw	r28, 0x01	; 1
     178:	01 09       	sbc	r16, r1
     17a:	80 2f       	mov	r24, r16
     17c:	fe 01       	movw	r30, r28
     17e:	0e 94 76 22 	call	0x44ec	; 0x44ec <__tablejump2__>
     182:	c8 39       	cpi	r28, 0x98	; 152
     184:	d1 07       	cpc	r29, r17
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	08 07       	cpc	r16, r24
     18a:	a9 f7       	brne	.-22     	; 0x176 <__do_global_ctors+0xa>
     18c:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <main>
     190:	0c 94 7e 22 	jmp	0x44fc	; 0x44fc <_exit>

00000194 <__bad_interrupt>:
     194:	35 cf       	rjmp	.-406    	; 0x0 <__vectors>

00000196 <_ZN7encoder22Init_encoder_interruptEv>:
volatile bool PidUpdateFlagDriveY = true;


void encoder::Init_encoder_interrupt()
{
	sei();
     196:	78 94       	sei
	EICRA = 0b00110000;
     198:	80 e3       	ldi	r24, 0x30	; 48
     19a:	80 93 69 00 	sts	0x0069, r24
	EICRB = 0b00001100;
     19e:	8c e0       	ldi	r24, 0x0C	; 12
     1a0:	80 93 6a 00 	sts	0x006A, r24
	EIMSK |=  (1<<INT2) |(1<<INT5);
     1a4:	8d b3       	in	r24, 0x1d	; 29
     1a6:	84 62       	ori	r24, 0x24	; 36
     1a8:	8d bb       	out	0x1d, r24	; 29
     1aa:	08 95       	ret

000001ac <_ZN7encoder10Init_timerEv>:
}

void encoder::Init_timer()	//FOR SPEED TUNING OF 4 MOTORS
{
	sei();
     1ac:	78 94       	sei
	TCCR0B |= (1<<CS02) | (1<<CS00);
     1ae:	85 b5       	in	r24, 0x25	; 37
     1b0:	85 60       	ori	r24, 0x05	; 5
     1b2:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<TOIE0);
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	80 93 6e 00 	sts	0x006E, r24
     1ba:	08 95       	ret

000001bc <_ZN7encoder11getdistanceEv>:
}
float encoder::getdistance()
	{
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	ec 01       	movw	r28, r24
	distance = (3.1415 * encoderdiameter * count_encoder)/(encoderPPR) ; 
     1c2:	68 81       	ld	r22, Y
     1c4:	79 81       	ldd	r23, Y+1	; 0x01
     1c6:	07 2e       	mov	r0, r23
     1c8:	00 0c       	add	r0, r0
     1ca:	88 0b       	sbc	r24, r24
     1cc:	99 0b       	sbc	r25, r25
     1ce:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__floatsisf>
     1d2:	2e ef       	ldi	r18, 0xFE	; 254
     1d4:	34 e3       	ldi	r19, 0x34	; 52
     1d6:	46 e3       	ldi	r20, 0x36	; 54
     1d8:	53 e4       	ldi	r21, 0x43	; 67
     1da:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	48 e4       	ldi	r20, 0x48	; 72
     1e4:	53 e4       	ldi	r21, 0x43	; 67
     1e6:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <__divsf3>
     1ea:	6c 83       	std	Y+4, r22	; 0x04
     1ec:	7d 83       	std	Y+5, r23	; 0x05
     1ee:	8e 83       	std	Y+6, r24	; 0x06
     1f0:	9f 83       	std	Y+7, r25	; 0x07
	return distance;
}
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <__vector_3>:

ISR(INT2_vect)	//for x -axis encoder
{
     1f8:	1f 92       	push	r1
     1fa:	0f 92       	push	r0
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	0f 92       	push	r0
     200:	11 24       	eor	r1, r1
     202:	0b b6       	in	r0, 0x3b	; 59
     204:	0f 92       	push	r0
     206:	8f 93       	push	r24
     208:	9f 93       	push	r25
     20a:	ef 93       	push	r30
     20c:	ff 93       	push	r31
	if((bit_is_set(PINA,PA0)))
     20e:	00 9b       	sbis	0x00, 0	; 0
     210:	08 c0       	rjmp	.+16     	; 0x222 <__vector_3+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     212:	e6 ec       	ldi	r30, 0xC6	; 198
     214:	f2 e0       	ldi	r31, 0x02	; 2
     216:	80 81       	ld	r24, Z
     218:	91 81       	ldd	r25, Z+1	; 0x01
     21a:	01 96       	adiw	r24, 0x01	; 1
     21c:	91 83       	std	Z+1, r25	; 0x01
     21e:	80 83       	st	Z, r24
     220:	07 c0       	rjmp	.+14     	; 0x230 <__vector_3+0x38>
		inline void dcr_count(){count_encoder--;};
     222:	e6 ec       	ldi	r30, 0xC6	; 198
     224:	f2 e0       	ldi	r31, 0x02	; 2
     226:	80 81       	ld	r24, Z
     228:	91 81       	ldd	r25, Z+1	; 0x01
     22a:	01 97       	sbiw	r24, 0x01	; 1
     22c:	91 83       	std	Z+1, r25	; 0x01
     22e:	80 83       	st	Z, r24
	{
		encoderX.inc_count();
	}
	else
		encoderX.dcr_count();
}
     230:	ff 91       	pop	r31
     232:	ef 91       	pop	r30
     234:	9f 91       	pop	r25
     236:	8f 91       	pop	r24
     238:	0f 90       	pop	r0
     23a:	0b be       	out	0x3b, r0	; 59
     23c:	0f 90       	pop	r0
     23e:	0f be       	out	0x3f, r0	; 63
     240:	0f 90       	pop	r0
     242:	1f 90       	pop	r1
     244:	18 95       	reti

00000246 <__vector_6>:

ISR(INT5_vect)	//for y-axis encoder
{
     246:	1f 92       	push	r1
     248:	0f 92       	push	r0
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	0f 92       	push	r0
     24e:	11 24       	eor	r1, r1
     250:	0b b6       	in	r0, 0x3b	; 59
     252:	0f 92       	push	r0
     254:	8f 93       	push	r24
     256:	9f 93       	push	r25
     258:	ef 93       	push	r30
     25a:	ff 93       	push	r31
	if((bit_is_set(PINA,PA5)))
     25c:	05 9b       	sbis	0x00, 5	; 0
     25e:	08 c0       	rjmp	.+16     	; 0x270 <__vector_6+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     260:	ee eb       	ldi	r30, 0xBE	; 190
     262:	f2 e0       	ldi	r31, 0x02	; 2
     264:	80 81       	ld	r24, Z
     266:	91 81       	ldd	r25, Z+1	; 0x01
     268:	01 96       	adiw	r24, 0x01	; 1
     26a:	91 83       	std	Z+1, r25	; 0x01
     26c:	80 83       	st	Z, r24
     26e:	07 c0       	rjmp	.+14     	; 0x27e <__vector_6+0x38>
		inline void dcr_count(){count_encoder--;};
     270:	ee eb       	ldi	r30, 0xBE	; 190
     272:	f2 e0       	ldi	r31, 0x02	; 2
     274:	80 81       	ld	r24, Z
     276:	91 81       	ldd	r25, Z+1	; 0x01
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
	{
		encoderY.inc_count();
	}
	else
		encoderY.dcr_count();
}
     27e:	ff 91       	pop	r31
     280:	ef 91       	pop	r30
     282:	9f 91       	pop	r25
     284:	8f 91       	pop	r24
     286:	0f 90       	pop	r0
     288:	0b be       	out	0x3b, r0	; 59
     28a:	0f 90       	pop	r0
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	0f 90       	pop	r0
     290:	1f 90       	pop	r1
     292:	18 95       	reti

00000294 <__vector_23>:

ISR(TIMER0_OVF_vect)
{
     294:	1f 92       	push	r1
     296:	0f 92       	push	r0
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	0f 92       	push	r0
     29c:	11 24       	eor	r1, r1
     29e:	8f 93       	push	r24
	PidUpdateFlagCompass = true;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	80 93 02 02 	sts	0x0202, r24
	PidUpdateFlagLinetrackerBack = true;
     2a6:	80 93 04 02 	sts	0x0204, r24
	PidUpdateFlagLinetrackerFront = true;
     2aa:	80 93 03 02 	sts	0x0203, r24
 
	PidUpdateFlagDriveX = true;
     2ae:	80 93 01 02 	sts	0x0201, r24
	PidUpdateFlagDriveY = true;
     2b2:	80 93 00 02 	sts	0x0200, r24
	
     2b6:	8f 91       	pop	r24
     2b8:	0f 90       	pop	r0
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	0f 90       	pop	r0
     2be:	1f 90       	pop	r1
     2c0:	18 95       	reti

000002c2 <_Z13init_HMC5883Lv>:
	}
	else
	{
		Calculate_Motor_Differential_Velocity_With_Center_Pivot(speed);
	}
}
     2c2:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <_Z8i2c_initv>
     2c6:	8c e3       	ldi	r24, 0x3C	; 60
     2c8:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_Z9i2c_starth>
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	0e 94 c5 1c 	call	0x398a	; 0x398a <_Z9i2c_writeh>
     2d2:	80 e7       	ldi	r24, 0x70	; 112
     2d4:	0e 94 c5 1c 	call	0x398a	; 0x398a <_Z9i2c_writeh>
     2d8:	0e 94 81 1c 	call	0x3902	; 0x3902 <_Z8i2c_stopv>
     2dc:	8c e3       	ldi	r24, 0x3C	; 60
     2de:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_Z9i2c_starth>
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	0e 94 c5 1c 	call	0x398a	; 0x398a <_Z9i2c_writeh>
     2e8:	80 ea       	ldi	r24, 0xA0	; 160
     2ea:	0e 94 c5 1c 	call	0x398a	; 0x398a <_Z9i2c_writeh>
     2ee:	0e 94 81 1c 	call	0x3902	; 0x3902 <_Z8i2c_stopv>
     2f2:	8c e3       	ldi	r24, 0x3C	; 60
     2f4:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_Z9i2c_starth>
     2f8:	82 e0       	ldi	r24, 0x02	; 2
     2fa:	0e 94 c5 1c 	call	0x398a	; 0x398a <_Z9i2c_writeh>
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	0e 94 c5 1c 	call	0x398a	; 0x398a <_Z9i2c_writeh>
     304:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <_Z8i2c_stopv>
     308:	08 95       	ret

0000030a <_Z12read_Compassv>:
     30a:	8c e3       	ldi	r24, 0x3C	; 60
     30c:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_Z9i2c_starth>
     310:	83 e0       	ldi	r24, 0x03	; 3
     312:	0e 94 c5 1c 	call	0x398a	; 0x398a <_Z9i2c_writeh>
     316:	0e 94 81 1c 	call	0x3902	; 0x3902 <_Z8i2c_stopv>
     31a:	8d e3       	ldi	r24, 0x3D	; 61
     31c:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <_Z13i2c_rep_starth>
     320:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <_Z11i2c_readAckv>
     324:	10 92 bc 04 	sts	0x04BC, r1
     328:	80 93 bd 04 	sts	0x04BD, r24
     32c:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <_Z11i2c_readAckv>
     330:	20 91 bc 04 	lds	r18, 0x04BC
     334:	30 91 bd 04 	lds	r19, 0x04BD
     338:	28 2b       	or	r18, r24
     33a:	30 93 bd 04 	sts	0x04BD, r19
     33e:	20 93 bc 04 	sts	0x04BC, r18
     342:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <_Z11i2c_readAckv>
     346:	10 92 b8 04 	sts	0x04B8, r1
     34a:	80 93 b9 04 	sts	0x04B9, r24
     34e:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <_Z11i2c_readAckv>
     352:	20 91 b8 04 	lds	r18, 0x04B8
     356:	30 91 b9 04 	lds	r19, 0x04B9
     35a:	28 2b       	or	r18, r24
     35c:	30 93 b9 04 	sts	0x04B9, r19
     360:	20 93 b8 04 	sts	0x04B8, r18
     364:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <_Z11i2c_readAckv>
     368:	10 92 ba 04 	sts	0x04BA, r1
     36c:	80 93 bb 04 	sts	0x04BB, r24
     370:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_Z11i2c_readNakv>
     374:	20 91 ba 04 	lds	r18, 0x04BA
     378:	30 91 bb 04 	lds	r19, 0x04BB
     37c:	28 2b       	or	r18, r24
     37e:	30 93 bb 04 	sts	0x04BB, r19
     382:	20 93 ba 04 	sts	0x04BA, r18
     386:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <_Z8i2c_stopv>
     38a:	08 95       	ret

0000038c <_Z6millisv>:
     38c:	2f b7       	in	r18, 0x3f	; 63
     38e:	f8 94       	cli
     390:	60 91 b4 04 	lds	r22, 0x04B4
     394:	70 91 b5 04 	lds	r23, 0x04B5
     398:	80 91 b6 04 	lds	r24, 0x04B6
     39c:	90 91 b7 04 	lds	r25, 0x04B7
     3a0:	2f bf       	out	0x3f, r18	; 63
     3a2:	08 95       	ret

000003a4 <_Z21initialise_timeperiodv>:
     3a4:	e1 eb       	ldi	r30, 0xB1	; 177
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	80 81       	ld	r24, Z
     3aa:	84 60       	ori	r24, 0x04	; 4
     3ac:	80 83       	st	Z, r24
     3ae:	e0 e7       	ldi	r30, 0x70	; 112
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	80 81       	ld	r24, Z
     3b4:	81 60       	ori	r24, 0x01	; 1
     3b6:	80 83       	st	Z, r24
     3b8:	10 92 b2 00 	sts	0x00B2, r1
     3bc:	08 95       	ret

000003be <__vector_15>:
     3be:	1f 92       	push	r1
     3c0:	0f 92       	push	r0
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	0f 92       	push	r0
     3c6:	11 24       	eor	r1, r1
     3c8:	8f 93       	push	r24
     3ca:	9f 93       	push	r25
     3cc:	af 93       	push	r26
     3ce:	bf 93       	push	r27
     3d0:	80 91 b4 04 	lds	r24, 0x04B4
     3d4:	90 91 b5 04 	lds	r25, 0x04B5
     3d8:	a0 91 b6 04 	lds	r26, 0x04B6
     3dc:	b0 91 b7 04 	lds	r27, 0x04B7
     3e0:	01 96       	adiw	r24, 0x01	; 1
     3e2:	a1 1d       	adc	r26, r1
     3e4:	b1 1d       	adc	r27, r1
     3e6:	80 93 b4 04 	sts	0x04B4, r24
     3ea:	90 93 b5 04 	sts	0x04B5, r25
     3ee:	a0 93 b6 04 	sts	0x04B6, r26
     3f2:	b0 93 b7 04 	sts	0x04B7, r27
     3f6:	80 91 b0 04 	lds	r24, 0x04B0
     3fa:	90 91 b1 04 	lds	r25, 0x04B1
     3fe:	a0 91 b2 04 	lds	r26, 0x04B2
     402:	b0 91 b3 04 	lds	r27, 0x04B3
     406:	03 96       	adiw	r24, 0x03	; 3
     408:	a1 1d       	adc	r26, r1
     40a:	b1 1d       	adc	r27, r1
     40c:	80 93 b0 04 	sts	0x04B0, r24
     410:	90 93 b1 04 	sts	0x04B1, r25
     414:	a0 93 b2 04 	sts	0x04B2, r26
     418:	b0 93 b3 04 	sts	0x04B3, r27
     41c:	80 91 b0 04 	lds	r24, 0x04B0
     420:	90 91 b1 04 	lds	r25, 0x04B1
     424:	a0 91 b2 04 	lds	r26, 0x04B2
     428:	b0 91 b3 04 	lds	r27, 0x04B3
     42c:	8d 37       	cpi	r24, 0x7D	; 125
     42e:	91 05       	cpc	r25, r1
     430:	a1 05       	cpc	r26, r1
     432:	b1 05       	cpc	r27, r1
     434:	38 f1       	brcs	.+78     	; 0x484 <__vector_15+0xc6>
     436:	80 91 b0 04 	lds	r24, 0x04B0
     43a:	90 91 b1 04 	lds	r25, 0x04B1
     43e:	a0 91 b2 04 	lds	r26, 0x04B2
     442:	b0 91 b3 04 	lds	r27, 0x04B3
     446:	8d 57       	subi	r24, 0x7D	; 125
     448:	91 09       	sbc	r25, r1
     44a:	a1 09       	sbc	r26, r1
     44c:	b1 09       	sbc	r27, r1
     44e:	80 93 b0 04 	sts	0x04B0, r24
     452:	90 93 b1 04 	sts	0x04B1, r25
     456:	a0 93 b2 04 	sts	0x04B2, r26
     45a:	b0 93 b3 04 	sts	0x04B3, r27
     45e:	80 91 b4 04 	lds	r24, 0x04B4
     462:	90 91 b5 04 	lds	r25, 0x04B5
     466:	a0 91 b6 04 	lds	r26, 0x04B6
     46a:	b0 91 b7 04 	lds	r27, 0x04B7
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	a1 1d       	adc	r26, r1
     472:	b1 1d       	adc	r27, r1
     474:	80 93 b4 04 	sts	0x04B4, r24
     478:	90 93 b5 04 	sts	0x04B5, r25
     47c:	a0 93 b6 04 	sts	0x04B6, r26
     480:	b0 93 b7 04 	sts	0x04B7, r27
     484:	bf 91       	pop	r27
     486:	af 91       	pop	r26
     488:	9f 91       	pop	r25
     48a:	8f 91       	pop	r24
     48c:	0f 90       	pop	r0
     48e:	0f be       	out	0x3f, r0	; 63
     490:	0f 90       	pop	r0
     492:	1f 90       	pop	r1
     494:	18 95       	reti

00000496 <_Z8initGY88v>:
     496:	15 df       	rcall	.-470    	; 0x2c2 <_Z13init_HMC5883Lv>
     498:	87 e3       	ldi	r24, 0x37	; 55
     49a:	94 e0       	ldi	r25, 0x04	; 4
     49c:	0e 94 7f 18 	call	0x30fe	; 0x30fe <_ZN7MPU60504InitEv>
     4a0:	62 e3       	ldi	r22, 0x32	; 50
     4a2:	87 e3       	ldi	r24, 0x37	; 55
     4a4:	94 e0       	ldi	r25, 0x04	; 4
     4a6:	0e 94 32 1a 	call	0x3464	; 0x3464 <_ZN7MPU605013calibrateGyroEh>
     4aa:	7c df       	rcall	.-264    	; 0x3a4 <_Z21initialise_timeperiodv>
     4ac:	6f df       	rcall	.-290    	; 0x38c <_Z6millisv>
     4ae:	60 93 1b 04 	sts	0x041B, r22
     4b2:	70 93 1c 04 	sts	0x041C, r23
     4b6:	80 93 1d 04 	sts	0x041D, r24
     4ba:	90 93 1e 04 	sts	0x041E, r25
     4be:	08 95       	ret

000004c0 <_Z25compass_tilt_compensationfffff>:
     4c0:	4f 92       	push	r4
     4c2:	5f 92       	push	r5
     4c4:	6f 92       	push	r6
     4c6:	7f 92       	push	r7
     4c8:	af 92       	push	r10
     4ca:	bf 92       	push	r11
     4cc:	cf 92       	push	r12
     4ce:	df 92       	push	r13
     4d0:	ef 92       	push	r14
     4d2:	ff 92       	push	r15
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	64 97       	sbiw	r28, 0x14	; 20
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	f8 94       	cli
     4e6:	de bf       	out	0x3e, r29	; 62
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	cd bf       	out	0x3d, r28	; 61
     4ec:	69 83       	std	Y+1, r22	; 0x01
     4ee:	7a 83       	std	Y+2, r23	; 0x02
     4f0:	8b 83       	std	Y+3, r24	; 0x03
     4f2:	9c 83       	std	Y+4, r25	; 0x04
     4f4:	29 01       	movw	r4, r18
     4f6:	3a 01       	movw	r6, r20
     4f8:	e9 8a       	std	Y+17, r14	; 0x11
     4fa:	fa 8a       	std	Y+18, r15	; 0x12
     4fc:	0b 8b       	std	Y+19, r16	; 0x13
     4fe:	1c 8b       	std	Y+20, r17	; 0x14
     500:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <cos>
     504:	6d 87       	std	Y+13, r22	; 0x0d
     506:	7e 87       	std	Y+14, r23	; 0x0e
     508:	8f 87       	std	Y+15, r24	; 0x0f
     50a:	98 8b       	std	Y+16, r25	; 0x10
     50c:	69 81       	ldd	r22, Y+1	; 0x01
     50e:	7a 81       	ldd	r23, Y+2	; 0x02
     510:	8b 81       	ldd	r24, Y+3	; 0x03
     512:	9c 81       	ldd	r25, Y+4	; 0x04
     514:	0e 94 de 21 	call	0x43bc	; 0x43bc <sin>
     518:	69 83       	std	Y+1, r22	; 0x01
     51a:	7a 83       	std	Y+2, r23	; 0x02
     51c:	8b 83       	std	Y+3, r24	; 0x03
     51e:	9c 83       	std	Y+4, r25	; 0x04
     520:	c3 01       	movw	r24, r6
     522:	b2 01       	movw	r22, r4
     524:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <cos>
     528:	69 87       	std	Y+9, r22	; 0x09
     52a:	7a 87       	std	Y+10, r23	; 0x0a
     52c:	8b 87       	std	Y+11, r24	; 0x0b
     52e:	9c 87       	std	Y+12, r25	; 0x0c
     530:	c3 01       	movw	r24, r6
     532:	b2 01       	movw	r22, r4
     534:	0e 94 de 21 	call	0x43bc	; 0x43bc <sin>
     538:	2b 01       	movw	r4, r22
     53a:	3c 01       	movw	r6, r24
     53c:	29 85       	ldd	r18, Y+9	; 0x09
     53e:	3a 85       	ldd	r19, Y+10	; 0x0a
     540:	4b 85       	ldd	r20, Y+11	; 0x0b
     542:	5c 85       	ldd	r21, Y+12	; 0x0c
     544:	c6 01       	movw	r24, r12
     546:	b5 01       	movw	r22, r10
     548:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     54c:	6d 83       	std	Y+5, r22	; 0x05
     54e:	7e 83       	std	Y+6, r23	; 0x06
     550:	8f 83       	std	Y+7, r24	; 0x07
     552:	98 87       	std	Y+8, r25	; 0x08
     554:	a3 01       	movw	r20, r6
     556:	92 01       	movw	r18, r4
     558:	6e a1       	ldd	r22, Y+38	; 0x26
     55a:	7f a1       	ldd	r23, Y+39	; 0x27
     55c:	88 a5       	ldd	r24, Y+40	; 0x28
     55e:	99 a5       	ldd	r25, Y+41	; 0x29
     560:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     564:	9b 01       	movw	r18, r22
     566:	ac 01       	movw	r20, r24
     568:	6d 81       	ldd	r22, Y+5	; 0x05
     56a:	7e 81       	ldd	r23, Y+6	; 0x06
     56c:	8f 81       	ldd	r24, Y+7	; 0x07
     56e:	98 85       	ldd	r25, Y+8	; 0x08
     570:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <__subsf3>
     574:	6d 83       	std	Y+5, r22	; 0x05
     576:	7e 83       	std	Y+6, r23	; 0x06
     578:	8f 83       	std	Y+7, r24	; 0x07
     57a:	98 87       	std	Y+8, r25	; 0x08
     57c:	29 81       	ldd	r18, Y+1	; 0x01
     57e:	3a 81       	ldd	r19, Y+2	; 0x02
     580:	4b 81       	ldd	r20, Y+3	; 0x03
     582:	5c 81       	ldd	r21, Y+4	; 0x04
     584:	c6 01       	movw	r24, r12
     586:	b5 01       	movw	r22, r10
     588:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     58c:	a3 01       	movw	r20, r6
     58e:	92 01       	movw	r18, r4
     590:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     594:	2b 01       	movw	r4, r22
     596:	3c 01       	movw	r6, r24
     598:	2d 85       	ldd	r18, Y+13	; 0x0d
     59a:	3e 85       	ldd	r19, Y+14	; 0x0e
     59c:	4f 85       	ldd	r20, Y+15	; 0x0f
     59e:	58 89       	ldd	r21, Y+16	; 0x10
     5a0:	c8 01       	movw	r24, r16
     5a2:	b7 01       	movw	r22, r14
     5a4:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     5a8:	9b 01       	movw	r18, r22
     5aa:	ac 01       	movw	r20, r24
     5ac:	c3 01       	movw	r24, r6
     5ae:	b2 01       	movw	r22, r4
     5b0:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <__subsf3>
     5b4:	2b 01       	movw	r4, r22
     5b6:	3c 01       	movw	r6, r24
     5b8:	29 81       	ldd	r18, Y+1	; 0x01
     5ba:	3a 81       	ldd	r19, Y+2	; 0x02
     5bc:	4b 81       	ldd	r20, Y+3	; 0x03
     5be:	5c 81       	ldd	r21, Y+4	; 0x04
     5c0:	6e a1       	ldd	r22, Y+38	; 0x26
     5c2:	7f a1       	ldd	r23, Y+39	; 0x27
     5c4:	88 a5       	ldd	r24, Y+40	; 0x28
     5c6:	99 a5       	ldd	r25, Y+41	; 0x29
     5c8:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     5cc:	29 85       	ldd	r18, Y+9	; 0x09
     5ce:	3a 85       	ldd	r19, Y+10	; 0x0a
     5d0:	4b 85       	ldd	r20, Y+11	; 0x0b
     5d2:	5c 85       	ldd	r21, Y+12	; 0x0c
     5d4:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     5d8:	9b 01       	movw	r18, r22
     5da:	ac 01       	movw	r20, r24
     5dc:	c3 01       	movw	r24, r6
     5de:	b2 01       	movw	r22, r4
     5e0:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
     5e4:	90 58       	subi	r25, 0x80	; 128
     5e6:	2d 81       	ldd	r18, Y+5	; 0x05
     5e8:	3e 81       	ldd	r19, Y+6	; 0x06
     5ea:	4f 81       	ldd	r20, Y+7	; 0x07
     5ec:	58 85       	ldd	r21, Y+8	; 0x08
     5ee:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <atan2>
     5f2:	21 ee       	ldi	r18, 0xE1	; 225
     5f4:	3e e2       	ldi	r19, 0x2E	; 46
     5f6:	45 e6       	ldi	r20, 0x65	; 101
     5f8:	52 e4       	ldi	r21, 0x42	; 66
     5fa:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     5fe:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
     602:	9b 01       	movw	r18, r22
     604:	77 23       	and	r23, r23
     606:	14 f4       	brge	.+4      	; 0x60c <_Z25compass_tilt_compensationfffff+0x14c>
     608:	28 59       	subi	r18, 0x98	; 152
     60a:	3e 4f       	sbci	r19, 0xFE	; 254
     60c:	c9 01       	movw	r24, r18
     60e:	64 96       	adiw	r28, 0x14	; 20
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	ff 90       	pop	r15
     624:	ef 90       	pop	r14
     626:	df 90       	pop	r13
     628:	cf 90       	pop	r12
     62a:	bf 90       	pop	r11
     62c:	af 90       	pop	r10
     62e:	7f 90       	pop	r7
     630:	6f 90       	pop	r6
     632:	5f 90       	pop	r5
     634:	4f 90       	pop	r4
     636:	08 95       	ret

00000638 <_Z24getAverageCompensatedYawv>:
     638:	4f 92       	push	r4
     63a:	5f 92       	push	r5
     63c:	6f 92       	push	r6
     63e:	7f 92       	push	r7
     640:	af 92       	push	r10
     642:	bf 92       	push	r11
     644:	cf 92       	push	r12
     646:	df 92       	push	r13
     648:	ef 92       	push	r14
     64a:	ff 92       	push	r15
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	28 97       	sbiw	r28, 0x08	; 8
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	de bf       	out	0x3e, r29	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	cd bf       	out	0x3d, r28	; 61
     664:	60 91 ba 04 	lds	r22, 0x04BA
     668:	70 91 bb 04 	lds	r23, 0x04BB
     66c:	07 2e       	mov	r0, r23
     66e:	00 0c       	add	r0, r0
     670:	88 0b       	sbc	r24, r24
     672:	99 0b       	sbc	r25, r25
     674:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__floatsisf>
     678:	5b 01       	movw	r10, r22
     67a:	6c 01       	movw	r12, r24
     67c:	60 91 bc 04 	lds	r22, 0x04BC
     680:	70 91 bd 04 	lds	r23, 0x04BD
     684:	07 2e       	mov	r0, r23
     686:	00 0c       	add	r0, r0
     688:	88 0b       	sbc	r24, r24
     68a:	99 0b       	sbc	r25, r25
     68c:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__floatsisf>
     690:	69 83       	std	Y+1, r22	; 0x01
     692:	7a 83       	std	Y+2, r23	; 0x02
     694:	8b 83       	std	Y+3, r24	; 0x03
     696:	9c 83       	std	Y+4, r25	; 0x04
     698:	25 e3       	ldi	r18, 0x35	; 53
     69a:	3a ef       	ldi	r19, 0xFA	; 250
     69c:	4e e8       	ldi	r20, 0x8E	; 142
     69e:	5c e3       	ldi	r21, 0x3C	; 60
     6a0:	60 91 23 04 	lds	r22, 0x0423
     6a4:	70 91 24 04 	lds	r23, 0x0424
     6a8:	80 91 25 04 	lds	r24, 0x0425
     6ac:	90 91 26 04 	lds	r25, 0x0426
     6b0:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     6b4:	6d 83       	std	Y+5, r22	; 0x05
     6b6:	7e 83       	std	Y+6, r23	; 0x06
     6b8:	8f 83       	std	Y+7, r24	; 0x07
     6ba:	98 87       	std	Y+8, r25	; 0x08
     6bc:	25 e3       	ldi	r18, 0x35	; 53
     6be:	3a ef       	ldi	r19, 0xFA	; 250
     6c0:	4e e8       	ldi	r20, 0x8E	; 142
     6c2:	5c e3       	ldi	r21, 0x3C	; 60
     6c4:	60 91 27 04 	lds	r22, 0x0427
     6c8:	70 91 28 04 	lds	r23, 0x0428
     6cc:	80 91 29 04 	lds	r24, 0x0429
     6d0:	90 91 2a 04 	lds	r25, 0x042A
     6d4:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     6d8:	2b 01       	movw	r4, r22
     6da:	3c 01       	movw	r6, r24
     6dc:	60 91 b8 04 	lds	r22, 0x04B8
     6e0:	70 91 b9 04 	lds	r23, 0x04B9
     6e4:	07 2e       	mov	r0, r23
     6e6:	00 0c       	add	r0, r0
     6e8:	88 0b       	sbc	r24, r24
     6ea:	99 0b       	sbc	r25, r25
     6ec:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__floatsisf>
     6f0:	9f 93       	push	r25
     6f2:	8f 93       	push	r24
     6f4:	7f 93       	push	r23
     6f6:	6f 93       	push	r22
     6f8:	e9 80       	ldd	r14, Y+1	; 0x01
     6fa:	fa 80       	ldd	r15, Y+2	; 0x02
     6fc:	0b 81       	ldd	r16, Y+3	; 0x03
     6fe:	1c 81       	ldd	r17, Y+4	; 0x04
     700:	2d 81       	ldd	r18, Y+5	; 0x05
     702:	3e 81       	ldd	r19, Y+6	; 0x06
     704:	4f 81       	ldd	r20, Y+7	; 0x07
     706:	58 85       	ldd	r21, Y+8	; 0x08
     708:	c3 01       	movw	r24, r6
     70a:	b2 01       	movw	r22, r4
     70c:	d9 de       	rcall	.-590    	; 0x4c0 <_Z25compass_tilt_compensationfffff>
     70e:	0f 90       	pop	r0
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	bc 01       	movw	r22, r24
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 60 20 	call	0x40c0	; 0x40c0 <__floatunsisf>
     720:	2b 01       	movw	r4, r22
     722:	3c 01       	movw	r6, r24
     724:	1a e0       	ldi	r17, 0x0A	; 10
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	cb 01       	movw	r24, r22
     72c:	a3 01       	movw	r20, r6
     72e:	92 01       	movw	r18, r4
     730:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
     734:	11 50       	subi	r17, 0x01	; 1
     736:	d1 f7       	brne	.-12     	; 0x72c <_Z24getAverageCompensatedYawv+0xf4>
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e2       	ldi	r20, 0x20	; 32
     73e:	51 e4       	ldi	r21, 0x41	; 65
     740:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <__divsf3>
     744:	28 96       	adiw	r28, 0x08	; 8
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	f8 94       	cli
     74a:	de bf       	out	0x3e, r29	; 62
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	cd bf       	out	0x3d, r28	; 61
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	ff 90       	pop	r15
     75a:	ef 90       	pop	r14
     75c:	df 90       	pop	r13
     75e:	cf 90       	pop	r12
     760:	bf 90       	pop	r11
     762:	af 90       	pop	r10
     764:	7f 90       	pop	r7
     766:	6f 90       	pop	r6
     768:	5f 90       	pop	r5
     76a:	4f 90       	pop	r4
     76c:	08 95       	ret

0000076e <_Z10getYawGY88v>:
     76e:	cf 92       	push	r12
     770:	df 92       	push	r13
     772:	ef 92       	push	r14
     774:	ff 92       	push	r15
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	2c 97       	sbiw	r28, 0x0c	; 12
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	de bf       	out	0x3e, r29	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	cd bf       	out	0x3d, r28	; 61
     78e:	67 e3       	ldi	r22, 0x37	; 55
     790:	74 e0       	ldi	r23, 0x04	; 4
     792:	ce 01       	movw	r24, r28
     794:	01 96       	adiw	r24, 0x01	; 1
     796:	0e 94 20 19 	call	0x3240	; 0x3240 <_ZN7MPU605018readNormalizeAccelEv>
     79a:	8c e0       	ldi	r24, 0x0C	; 12
     79c:	fe 01       	movw	r30, r28
     79e:	31 96       	adiw	r30, 0x01	; 1
     7a0:	af e0       	ldi	r26, 0x0F	; 15
     7a2:	b4 e0       	ldi	r27, 0x04	; 4
     7a4:	01 90       	ld	r0, Z+
     7a6:	0d 92       	st	X+, r0
     7a8:	8a 95       	dec	r24
     7aa:	e1 f7       	brne	.-8      	; 0x7a4 <_Z10getYawGY88v+0x36>
     7ac:	87 e3       	ldi	r24, 0x37	; 55
     7ae:	94 e0       	ldi	r25, 0x04	; 4
     7b0:	0e 94 bd 1b 	call	0x377a	; 0x377a <_ZN7MPU60508rateGyroEv>
     7b4:	0f e0       	ldi	r16, 0x0F	; 15
     7b6:	14 e0       	ldi	r17, 0x04	; 4
     7b8:	f8 01       	movw	r30, r16
     7ba:	c0 84       	ldd	r12, Z+8	; 0x08
     7bc:	d1 84       	ldd	r13, Z+9	; 0x09
     7be:	e2 84       	ldd	r14, Z+10	; 0x0a
     7c0:	f3 84       	ldd	r15, Z+11	; 0x0b
     7c2:	60 81       	ld	r22, Z
     7c4:	71 81       	ldd	r23, Z+1	; 0x01
     7c6:	82 81       	ldd	r24, Z+2	; 0x02
     7c8:	93 81       	ldd	r25, Z+3	; 0x03
     7ca:	a7 01       	movw	r20, r14
     7cc:	96 01       	movw	r18, r12
     7ce:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <atan2>
     7d2:	21 ee       	ldi	r18, 0xE1	; 225
     7d4:	3e e2       	ldi	r19, 0x2E	; 46
     7d6:	45 e6       	ldi	r20, 0x65	; 101
     7d8:	52 e4       	ldi	r21, 0x42	; 66
     7da:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     7de:	60 93 33 04 	sts	0x0433, r22
     7e2:	70 93 34 04 	sts	0x0434, r23
     7e6:	80 93 35 04 	sts	0x0435, r24
     7ea:	90 93 36 04 	sts	0x0436, r25
     7ee:	f8 01       	movw	r30, r16
     7f0:	64 81       	ldd	r22, Z+4	; 0x04
     7f2:	75 81       	ldd	r23, Z+5	; 0x05
     7f4:	86 81       	ldd	r24, Z+6	; 0x06
     7f6:	97 81       	ldd	r25, Z+7	; 0x07
     7f8:	a7 01       	movw	r20, r14
     7fa:	96 01       	movw	r18, r12
     7fc:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <atan2>
     800:	21 ee       	ldi	r18, 0xE1	; 225
     802:	3e e2       	ldi	r19, 0x2E	; 46
     804:	45 e6       	ldi	r20, 0x65	; 101
     806:	52 e4       	ldi	r21, 0x42	; 66
     808:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     80c:	60 93 2f 04 	sts	0x042F, r22
     810:	70 93 30 04 	sts	0x0430, r23
     814:	80 93 31 04 	sts	0x0431, r24
     818:	90 93 32 04 	sts	0x0432, r25
     81c:	76 dd       	rcall	.-1300   	; 0x30a <_Z12read_Compassv>
     81e:	b6 dd       	rcall	.-1172   	; 0x38c <_Z6millisv>
     820:	00 91 1b 04 	lds	r16, 0x041B
     824:	10 91 1c 04 	lds	r17, 0x041C
     828:	20 91 1d 04 	lds	r18, 0x041D
     82c:	30 91 1e 04 	lds	r19, 0x041E
     830:	60 17       	cp	r22, r16
     832:	71 07       	cpc	r23, r17
     834:	82 07       	cpc	r24, r18
     836:	93 07       	cpc	r25, r19
     838:	09 f4       	brne	.+2      	; 0x83c <_Z10getYawGY88v+0xce>
     83a:	f0 c0       	rjmp	.+480    	; 0xa1c <_Z10getYawGY88v+0x2ae>
     83c:	a7 dd       	rcall	.-1202   	; 0x38c <_Z6millisv>
     83e:	60 93 1b 04 	sts	0x041B, r22
     842:	70 93 1c 04 	sts	0x041C, r23
     846:	80 93 1d 04 	sts	0x041D, r24
     84a:	90 93 1e 04 	sts	0x041E, r25
     84e:	80 91 54 02 	lds	r24, 0x0254
     852:	88 23       	and	r24, r24
     854:	91 f1       	breq	.+100    	; 0x8ba <_Z10getYawGY88v+0x14c>
     856:	80 91 33 04 	lds	r24, 0x0433
     85a:	90 91 34 04 	lds	r25, 0x0434
     85e:	a0 91 35 04 	lds	r26, 0x0435
     862:	b0 91 36 04 	lds	r27, 0x0436
     866:	80 93 27 04 	sts	0x0427, r24
     86a:	90 93 28 04 	sts	0x0428, r25
     86e:	a0 93 29 04 	sts	0x0429, r26
     872:	b0 93 2a 04 	sts	0x042A, r27
     876:	80 91 2f 04 	lds	r24, 0x042F
     87a:	90 91 30 04 	lds	r25, 0x0430
     87e:	a0 91 31 04 	lds	r26, 0x0431
     882:	b0 91 32 04 	lds	r27, 0x0432
     886:	80 93 23 04 	sts	0x0423, r24
     88a:	90 93 24 04 	sts	0x0424, r25
     88e:	a0 93 25 04 	sts	0x0425, r26
     892:	b0 93 26 04 	sts	0x0426, r27
     896:	80 91 2b 04 	lds	r24, 0x042B
     89a:	90 91 2c 04 	lds	r25, 0x042C
     89e:	a0 91 2d 04 	lds	r26, 0x042D
     8a2:	b0 91 2e 04 	lds	r27, 0x042E
     8a6:	80 93 1f 04 	sts	0x041F, r24
     8aa:	90 93 20 04 	sts	0x0420, r25
     8ae:	a0 93 21 04 	sts	0x0421, r26
     8b2:	b0 93 22 04 	sts	0x0422, r27
     8b6:	10 92 54 02 	sts	0x0254, r1
     8ba:	87 e3       	ldi	r24, 0x37	; 55
     8bc:	94 e0       	ldi	r25, 0x04	; 4
     8be:	0e 94 16 1c 	call	0x382c	; 0x382c <_ZN7MPU605012getGyroRateXEv>
     8c2:	2f e6       	ldi	r18, 0x6F	; 111
     8c4:	32 e1       	ldi	r19, 0x12	; 18
     8c6:	43 e8       	ldi	r20, 0x83	; 131
     8c8:	5a e3       	ldi	r21, 0x3A	; 58
     8ca:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     8ce:	20 91 27 04 	lds	r18, 0x0427
     8d2:	30 91 28 04 	lds	r19, 0x0428
     8d6:	40 91 29 04 	lds	r20, 0x0429
     8da:	50 91 2a 04 	lds	r21, 0x042A
     8de:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
     8e2:	2b e7       	ldi	r18, 0x7B	; 123
     8e4:	34 e1       	ldi	r19, 0x14	; 20
     8e6:	4e e6       	ldi	r20, 0x6E	; 110
     8e8:	5f e3       	ldi	r21, 0x3F	; 63
     8ea:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     8ee:	6b 01       	movw	r12, r22
     8f0:	7c 01       	movw	r14, r24
     8f2:	29 e2       	ldi	r18, 0x29	; 41
     8f4:	3c e5       	ldi	r19, 0x5C	; 92
     8f6:	4f e8       	ldi	r20, 0x8F	; 143
     8f8:	5d e3       	ldi	r21, 0x3D	; 61
     8fa:	60 91 33 04 	lds	r22, 0x0433
     8fe:	70 91 34 04 	lds	r23, 0x0434
     902:	80 91 35 04 	lds	r24, 0x0435
     906:	90 91 36 04 	lds	r25, 0x0436
     90a:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     90e:	9b 01       	movw	r18, r22
     910:	ac 01       	movw	r20, r24
     912:	c7 01       	movw	r24, r14
     914:	b6 01       	movw	r22, r12
     916:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
     91a:	60 93 27 04 	sts	0x0427, r22
     91e:	70 93 28 04 	sts	0x0428, r23
     922:	80 93 29 04 	sts	0x0429, r24
     926:	90 93 2a 04 	sts	0x042A, r25
     92a:	87 e3       	ldi	r24, 0x37	; 55
     92c:	94 e0       	ldi	r25, 0x04	; 4
     92e:	0e 94 1e 1c 	call	0x383c	; 0x383c <_ZN7MPU605012getGyroRateYEv>
     932:	2f e6       	ldi	r18, 0x6F	; 111
     934:	32 e1       	ldi	r19, 0x12	; 18
     936:	43 e8       	ldi	r20, 0x83	; 131
     938:	5a e3       	ldi	r21, 0x3A	; 58
     93a:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     93e:	20 91 23 04 	lds	r18, 0x0423
     942:	30 91 24 04 	lds	r19, 0x0424
     946:	40 91 25 04 	lds	r20, 0x0425
     94a:	50 91 26 04 	lds	r21, 0x0426
     94e:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
     952:	2b e7       	ldi	r18, 0x7B	; 123
     954:	34 e1       	ldi	r19, 0x14	; 20
     956:	4e e6       	ldi	r20, 0x6E	; 110
     958:	5f e3       	ldi	r21, 0x3F	; 63
     95a:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     95e:	6b 01       	movw	r12, r22
     960:	7c 01       	movw	r14, r24
     962:	29 e2       	ldi	r18, 0x29	; 41
     964:	3c e5       	ldi	r19, 0x5C	; 92
     966:	4f e8       	ldi	r20, 0x8F	; 143
     968:	5d e3       	ldi	r21, 0x3D	; 61
     96a:	60 91 2f 04 	lds	r22, 0x042F
     96e:	70 91 30 04 	lds	r23, 0x0430
     972:	80 91 31 04 	lds	r24, 0x0431
     976:	90 91 32 04 	lds	r25, 0x0432
     97a:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     97e:	9b 01       	movw	r18, r22
     980:	ac 01       	movw	r20, r24
     982:	c7 01       	movw	r24, r14
     984:	b6 01       	movw	r22, r12
     986:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
     98a:	60 93 23 04 	sts	0x0423, r22
     98e:	70 93 24 04 	sts	0x0424, r23
     992:	80 93 25 04 	sts	0x0425, r24
     996:	90 93 26 04 	sts	0x0426, r25
     99a:	4e de       	rcall	.-868    	; 0x638 <_Z24getAverageCompensatedYawv>
     99c:	60 93 2b 04 	sts	0x042B, r22
     9a0:	70 93 2c 04 	sts	0x042C, r23
     9a4:	80 93 2d 04 	sts	0x042D, r24
     9a8:	90 93 2e 04 	sts	0x042E, r25
     9ac:	87 e3       	ldi	r24, 0x37	; 55
     9ae:	94 e0       	ldi	r25, 0x04	; 4
     9b0:	0e 94 26 1c 	call	0x384c	; 0x384c <_ZN7MPU605012getGyroRateZEv>
     9b4:	2f e6       	ldi	r18, 0x6F	; 111
     9b6:	32 e1       	ldi	r19, 0x12	; 18
     9b8:	43 e8       	ldi	r20, 0x83	; 131
     9ba:	5a e3       	ldi	r21, 0x3A	; 58
     9bc:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     9c0:	20 91 1f 04 	lds	r18, 0x041F
     9c4:	30 91 20 04 	lds	r19, 0x0420
     9c8:	40 91 21 04 	lds	r20, 0x0421
     9cc:	50 91 22 04 	lds	r21, 0x0422
     9d0:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
     9d4:	2d ec       	ldi	r18, 0xCD	; 205
     9d6:	3c ec       	ldi	r19, 0xCC	; 204
     9d8:	4c ec       	ldi	r20, 0xCC	; 204
     9da:	5d e3       	ldi	r21, 0x3D	; 61
     9dc:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     9e0:	6b 01       	movw	r12, r22
     9e2:	7c 01       	movw	r14, r24
     9e4:	26 e6       	ldi	r18, 0x66	; 102
     9e6:	36 e6       	ldi	r19, 0x66	; 102
     9e8:	46 e6       	ldi	r20, 0x66	; 102
     9ea:	5f e3       	ldi	r21, 0x3F	; 63
     9ec:	60 91 2b 04 	lds	r22, 0x042B
     9f0:	70 91 2c 04 	lds	r23, 0x042C
     9f4:	80 91 2d 04 	lds	r24, 0x042D
     9f8:	90 91 2e 04 	lds	r25, 0x042E
     9fc:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     a00:	9b 01       	movw	r18, r22
     a02:	ac 01       	movw	r20, r24
     a04:	c7 01       	movw	r24, r14
     a06:	b6 01       	movw	r22, r12
     a08:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
     a0c:	60 93 1f 04 	sts	0x041F, r22
     a10:	70 93 20 04 	sts	0x0420, r23
     a14:	80 93 21 04 	sts	0x0421, r24
     a18:	90 93 22 04 	sts	0x0422, r25
     a1c:	60 91 1f 04 	lds	r22, 0x041F
     a20:	70 91 20 04 	lds	r23, 0x0420
     a24:	80 91 21 04 	lds	r24, 0x0421
     a28:	90 91 22 04 	lds	r25, 0x0422
     a2c:	0e 94 34 20 	call	0x4068	; 0x4068 <__fixunssfsi>
     a30:	cb 01       	movw	r24, r22
     a32:	2c 96       	adiw	r28, 0x0c	; 12
     a34:	0f b6       	in	r0, 0x3f	; 63
     a36:	f8 94       	cli
     a38:	de bf       	out	0x3e, r29	; 62
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	cd bf       	out	0x3d, r28	; 61
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	df 90       	pop	r13
     a4c:	cf 90       	pop	r12
     a4e:	08 95       	ret

00000a50 <_Z13initializeAllv>:
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	ed e6       	ldi	r30, 0x6D	; 109
     a5a:	f3 e0       	ldi	r31, 0x03	; 3
     a5c:	88 e2       	ldi	r24, 0x28	; 40
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	92 8b       	std	Z+18, r25	; 0x12
     a62:	81 8b       	std	Z+17, r24	; 0x11
     a64:	14 8a       	std	Z+20, r1	; 0x14
     a66:	13 8a       	std	Z+19, r1	; 0x13
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 eb       	ldi	r26, 0xB0	; 176
     a6e:	b0 e4       	ldi	r27, 0x40	; 64
     a70:	85 8b       	std	Z+21, r24	; 0x15
     a72:	96 8b       	std	Z+22, r25	; 0x16
     a74:	a7 8b       	std	Z+23, r26	; 0x17
     a76:	b0 8f       	std	Z+24, r27	; 0x18
     a78:	11 8e       	std	Z+25, r1	; 0x19
     a7a:	12 8e       	std	Z+26, r1	; 0x1a
     a7c:	13 8e       	std	Z+27, r1	; 0x1b
     a7e:	14 8e       	std	Z+28, r1	; 0x1c
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	aa ef       	ldi	r26, 0xFA	; 250
     a86:	b3 e4       	ldi	r27, 0x43	; 67
     a88:	85 8f       	std	Z+29, r24	; 0x1d
     a8a:	96 8f       	std	Z+30, r25	; 0x1e
     a8c:	a7 8f       	std	Z+31, r26	; 0x1f
     a8e:	b0 a3       	std	Z+32, r27	; 0x20
     a90:	ec e4       	ldi	r30, 0x4C	; 76
     a92:	f3 e0       	ldi	r31, 0x03	; 3
     a94:	8a e9       	ldi	r24, 0x9A	; 154
     a96:	99 e9       	ldi	r25, 0x99	; 153
     a98:	a9 e1       	ldi	r26, 0x19	; 25
     a9a:	be e3       	ldi	r27, 0x3E	; 62
     a9c:	85 8b       	std	Z+21, r24	; 0x15
     a9e:	96 8b       	std	Z+22, r25	; 0x16
     aa0:	a7 8b       	std	Z+23, r26	; 0x17
     aa2:	b0 8f       	std	Z+24, r27	; 0x18
     aa4:	11 8e       	std	Z+25, r1	; 0x19
     aa6:	12 8e       	std	Z+26, r1	; 0x1a
     aa8:	13 8e       	std	Z+27, r1	; 0x1b
     aaa:	14 8e       	std	Z+28, r1	; 0x1c
     aac:	46 e6       	ldi	r20, 0x66	; 102
     aae:	56 e6       	ldi	r21, 0x66	; 102
     ab0:	66 e6       	ldi	r22, 0x66	; 102
     ab2:	7f e3       	ldi	r23, 0x3F	; 63
     ab4:	45 8f       	std	Z+29, r20	; 0x1d
     ab6:	56 8f       	std	Z+30, r21	; 0x1e
     ab8:	67 8f       	std	Z+31, r22	; 0x1f
     aba:	70 a3       	std	Z+32, r23	; 0x20
     abc:	eb e2       	ldi	r30, 0x2B	; 43
     abe:	f3 e0       	ldi	r31, 0x03	; 3
     ac0:	85 8b       	std	Z+21, r24	; 0x15
     ac2:	96 8b       	std	Z+22, r25	; 0x16
     ac4:	a7 8b       	std	Z+23, r26	; 0x17
     ac6:	b0 8f       	std	Z+24, r27	; 0x18
     ac8:	11 8e       	std	Z+25, r1	; 0x19
     aca:	12 8e       	std	Z+26, r1	; 0x1a
     acc:	13 8e       	std	Z+27, r1	; 0x1b
     ace:	14 8e       	std	Z+28, r1	; 0x1c
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e8       	ldi	r26, 0x80	; 128
     ad6:	bf e3       	ldi	r27, 0x3F	; 63
     ad8:	85 8f       	std	Z+29, r24	; 0x1d
     ada:	96 8f       	std	Z+30, r25	; 0x1e
     adc:	a7 8f       	std	Z+31, r26	; 0x1f
     ade:	b0 a3       	std	Z+32, r27	; 0x20
     ae0:	a6 e0       	ldi	r26, 0x06	; 6
     ae2:	b3 e0       	ldi	r27, 0x03	; 3
     ae4:	8d e2       	ldi	r24, 0x2D	; 45
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	1f 96       	adiw	r26, 0x0f	; 15
     aea:	9c 93       	st	X, r25
     aec:	8e 93       	st	-X, r24
     aee:	1e 97       	sbiw	r26, 0x0e	; 14
     af0:	e5 ee       	ldi	r30, 0xE5	; 229
     af2:	f2 e0       	ldi	r31, 0x02	; 2
     af4:	97 87       	std	Z+15, r25	; 0x0f
     af6:	86 87       	std	Z+14, r24	; 0x0e
     af8:	0a e9       	ldi	r16, 0x9A	; 154
     afa:	19 e9       	ldi	r17, 0x99	; 153
     afc:	29 e9       	ldi	r18, 0x99	; 153
     afe:	3f e3       	ldi	r19, 0x3F	; 63
     b00:	55 96       	adiw	r26, 0x15	; 21
     b02:	0d 93       	st	X+, r16
     b04:	1d 93       	st	X+, r17
     b06:	2d 93       	st	X+, r18
     b08:	3c 93       	st	X, r19
     b0a:	58 97       	sbiw	r26, 0x18	; 24
     b0c:	59 96       	adiw	r26, 0x19	; 25
     b0e:	1d 92       	st	X+, r1
     b10:	1d 92       	st	X+, r1
     b12:	1d 92       	st	X+, r1
     b14:	1c 92       	st	X, r1
     b16:	5c 97       	sbiw	r26, 0x1c	; 28
     b18:	40 e0       	ldi	r20, 0x00	; 0
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	60 e8       	ldi	r22, 0x80	; 128
     b1e:	71 e4       	ldi	r23, 0x41	; 65
     b20:	5d 96       	adiw	r26, 0x1d	; 29
     b22:	4d 93       	st	X+, r20
     b24:	5d 93       	st	X+, r21
     b26:	6d 93       	st	X+, r22
     b28:	7c 93       	st	X, r23
     b2a:	90 97       	sbiw	r26, 0x20	; 32
     b2c:	05 8b       	std	Z+21, r16	; 0x15
     b2e:	16 8b       	std	Z+22, r17	; 0x16
     b30:	27 8b       	std	Z+23, r18	; 0x17
     b32:	30 8f       	std	Z+24, r19	; 0x18
     b34:	11 8e       	std	Z+25, r1	; 0x19
     b36:	12 8e       	std	Z+26, r1	; 0x1a
     b38:	13 8e       	std	Z+27, r1	; 0x1b
     b3a:	14 8e       	std	Z+28, r1	; 0x1c
     b3c:	45 8f       	std	Z+29, r20	; 0x1d
     b3e:	56 8f       	std	Z+30, r21	; 0x1e
     b40:	67 8f       	std	Z+31, r22	; 0x1f
     b42:	70 a3       	std	Z+32, r23	; 0x20
     b44:	a8 dc       	rcall	.-1712   	; 0x496 <_Z8initGY88v>
     b46:	22 dc       	rcall	.-1980   	; 0x38c <_Z6millisv>
     b48:	60 93 0b 04 	sts	0x040B, r22
     b4c:	70 93 0c 04 	sts	0x040C, r23
     b50:	80 93 0d 04 	sts	0x040D, r24
     b54:	90 93 0e 04 	sts	0x040E, r25
     b58:	cd e6       	ldi	r28, 0x6D	; 109
     b5a:	d3 e0       	ldi	r29, 0x03	; 3
     b5c:	08 c0       	rjmp	.+16     	; 0xb6e <_Z13initializeAllv+0x11e>
     b5e:	07 de       	rcall	.-1010   	; 0x76e <_Z10getYawGY88v>
     b60:	90 93 f0 03 	sts	0x03F0, r25
     b64:	80 93 ef 03 	sts	0x03EF, r24
     b68:	18 8a       	std	Y+16, r1	; 0x10
     b6a:	9f 87       	std	Y+15, r25	; 0x0f
     b6c:	8e 87       	std	Y+14, r24	; 0x0e
     b6e:	0e dc       	rcall	.-2020   	; 0x38c <_Z6millisv>
     b70:	00 91 0b 04 	lds	r16, 0x040B
     b74:	10 91 0c 04 	lds	r17, 0x040C
     b78:	20 91 0d 04 	lds	r18, 0x040D
     b7c:	30 91 0e 04 	lds	r19, 0x040E
     b80:	dc 01       	movw	r26, r24
     b82:	cb 01       	movw	r24, r22
     b84:	80 1b       	sub	r24, r16
     b86:	91 0b       	sbc	r25, r17
     b88:	a2 0b       	sbc	r26, r18
     b8a:	b3 0b       	sbc	r27, r19
     b8c:	84 3f       	cpi	r24, 0xF4	; 244
     b8e:	91 40       	sbci	r25, 0x01	; 1
     b90:	a1 05       	cpc	r26, r1
     b92:	b1 05       	cpc	r27, r1
     b94:	20 f3       	brcs	.-56     	; 0xb5e <_Z13initializeAllv+0x10e>
     b96:	0e 94 2e 1c 	call	0x385c	; 0x385c <_Z16checkRobotMotionv>
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	0f 91       	pop	r16
     ba2:	08 95       	ret

00000ba4 <_Z10BrakeMotorv>:
     ba4:	e8 e0       	ldi	r30, 0x08	; 8
     ba6:	f1 e0       	ldi	r31, 0x01	; 1
     ba8:	90 81       	ld	r25, Z
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	89 27       	eor	r24, r25
     bae:	80 83       	st	Z, r24
     bb0:	10 92 ed 03 	sts	0x03ED, r1
     bb4:	10 92 ec 03 	sts	0x03EC, r1
     bb8:	10 92 eb 03 	sts	0x03EB, r1
     bbc:	10 92 ea 03 	sts	0x03EA, r1
     bc0:	08 95       	ret

00000bc2 <_Z15sendDataToSlavev>:
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	8f e7       	ldi	r24, 0x7F	; 127
     bc8:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <_Z10uart2_putch>
     bcc:	c3 e0       	ldi	r28, 0x03	; 3
     bce:	d4 e0       	ldi	r29, 0x04	; 4
     bd0:	88 81       	ld	r24, Y
     bd2:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <_Z10uart2_putch>
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <_Z10uart2_putch>
     bdc:	8a 81       	ldd	r24, Y+2	; 0x02
     bde:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <_Z10uart2_putch>
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <_Z10uart2_putch>
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	08 95       	ret

00000bee <_Z21Goto_Fence_And_Detectv>:
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
     bf2:	10 92 eb 03 	sts	0x03EB, r1
     bf6:	80 91 00 01 	lds	r24, 0x0100
     bfa:	83 ff       	sbrs	r24, 3
     bfc:	57 c0       	rjmp	.+174    	; 0xcac <_Z21Goto_Fence_And_Detectv+0xbe>
     bfe:	63 9b       	sbis	0x0c, 3	; 12
     c00:	58 c0       	rjmp	.+176    	; 0xcb2 <_Z21Goto_Fence_And_Detectv+0xc4>
     c02:	54 c0       	rjmp	.+168    	; 0xcac <_Z21Goto_Fence_And_Detectv+0xbe>
     c04:	80 91 00 01 	lds	r24, 0x0100
     c08:	83 ff       	sbrs	r24, 3
     c0a:	6f c0       	rjmp	.+222    	; 0xcea <_Z21Goto_Fence_And_Detectv+0xfc>
     c0c:	8a c0       	rjmp	.+276    	; 0xd22 <_Z21Goto_Fence_And_Detectv+0x134>
     c0e:	80 91 00 01 	lds	r24, 0x0100
     c12:	83 fd       	sbrc	r24, 3
     c14:	89 c0       	rjmp	.+274    	; 0xd28 <_Z21Goto_Fence_And_Detectv+0x13a>
     c16:	63 99       	sbic	0x0c, 3	; 12
     c18:	47 c0       	rjmp	.+142    	; 0xca8 <_Z21Goto_Fence_And_Detectv+0xba>
     c1a:	80 91 00 01 	lds	r24, 0x0100
     c1e:	83 ff       	sbrs	r24, 3
     c20:	9b c0       	rjmp	.+310    	; 0xd58 <_Z21Goto_Fence_And_Detectv+0x16a>
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	a0 c0       	rjmp	.+320    	; 0xd66 <_Z21Goto_Fence_And_Detectv+0x178>
     c26:	eb ef       	ldi	r30, 0xFB	; 251
     c28:	f3 e0       	ldi	r31, 0x03	; 3
     c2a:	11 82       	std	Z+1, r1	; 0x01
     c2c:	10 82       	st	Z, r1
     c2e:	13 82       	std	Z+3, r1	; 0x03
     c30:	12 82       	std	Z+2, r1	; 0x02
     c32:	15 82       	std	Z+5, r1	; 0x05
     c34:	14 82       	std	Z+4, r1	; 0x04
     c36:	17 82       	std	Z+7, r1	; 0x07
     c38:	16 82       	std	Z+6, r1	; 0x06
     c3a:	80 91 53 02 	lds	r24, 0x0253
     c3e:	88 23       	and	r24, r24
     c40:	59 f0       	breq	.+22     	; 0xc58 <_Z21Goto_Fence_And_Detectv+0x6a>
     c42:	a4 db       	rcall	.-2232   	; 0x38c <_Z6millisv>
     c44:	60 93 07 04 	sts	0x0407, r22
     c48:	70 93 08 04 	sts	0x0408, r23
     c4c:	80 93 09 04 	sts	0x0409, r24
     c50:	90 93 0a 04 	sts	0x040A, r25
     c54:	10 92 53 02 	sts	0x0253, r1
     c58:	99 db       	rcall	.-2254   	; 0x38c <_Z6millisv>
     c5a:	00 91 07 04 	lds	r16, 0x0407
     c5e:	10 91 08 04 	lds	r17, 0x0408
     c62:	20 91 09 04 	lds	r18, 0x0409
     c66:	30 91 0a 04 	lds	r19, 0x040A
     c6a:	ab 01       	movw	r20, r22
     c6c:	bc 01       	movw	r22, r24
     c6e:	40 1b       	sub	r20, r16
     c70:	51 0b       	sbc	r21, r17
     c72:	62 0b       	sbc	r22, r18
     c74:	73 0b       	sbc	r23, r19
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	42 30       	cpi	r20, 0x02	; 2
     c7a:	51 05       	cpc	r21, r1
     c7c:	61 05       	cpc	r22, r1
     c7e:	71 05       	cpc	r23, r1
     c80:	08 f0       	brcs	.+2      	; 0xc84 <_Z21Goto_Fence_And_Detectv+0x96>
     c82:	71 c0       	rjmp	.+226    	; 0xd66 <_Z21Goto_Fence_And_Detectv+0x178>
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	6f c0       	rjmp	.+222    	; 0xd66 <_Z21Goto_Fence_And_Detectv+0x178>
     c88:	eb ef       	ldi	r30, 0xFB	; 251
     c8a:	f3 e0       	ldi	r31, 0x03	; 3
     c8c:	8f e0       	ldi	r24, 0x0F	; 15
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	91 83       	std	Z+1, r25	; 0x01
     c92:	80 83       	st	Z, r24
     c94:	13 82       	std	Z+3, r1	; 0x03
     c96:	12 82       	std	Z+2, r1	; 0x02
     c98:	15 82       	std	Z+5, r1	; 0x05
     c9a:	14 82       	std	Z+4, r1	; 0x04
     c9c:	81 ef       	ldi	r24, 0xF1	; 241
     c9e:	9f ef       	ldi	r25, 0xFF	; 255
     ca0:	97 83       	std	Z+7, r25	; 0x07
     ca2:	86 83       	std	Z+6, r24	; 0x06
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	5f c0       	rjmp	.+190    	; 0xd66 <_Z21Goto_Fence_And_Detectv+0x178>
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	5d c0       	rjmp	.+186    	; 0xd66 <_Z21Goto_Fence_And_Detectv+0x178>
     cac:	63 99       	sbic	0x0c, 3	; 12
     cae:	aa cf       	rjmp	.-172    	; 0xc04 <_Z21Goto_Fence_And_Detectv+0x16>
     cb0:	38 c0       	rjmp	.+112    	; 0xd22 <_Z21Goto_Fence_And_Detectv+0x134>
     cb2:	10 92 21 02 	sts	0x0221, r1
     cb6:	eb ef       	ldi	r30, 0xFB	; 251
     cb8:	f3 e0       	ldi	r31, 0x03	; 3
     cba:	8e e1       	ldi	r24, 0x1E	; 30
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	91 83       	std	Z+1, r25	; 0x01
     cc0:	80 83       	st	Z, r24
     cc2:	13 82       	std	Z+3, r1	; 0x03
     cc4:	12 82       	std	Z+2, r1	; 0x02
     cc6:	15 82       	std	Z+5, r1	; 0x05
     cc8:	14 82       	std	Z+4, r1	; 0x04
     cca:	8c ee       	ldi	r24, 0xEC	; 236
     ccc:	9f ef       	ldi	r25, 0xFF	; 255
     cce:	97 83       	std	Z+7, r25	; 0x07
     cd0:	86 83       	std	Z+6, r24	; 0x06
     cd2:	10 92 07 04 	sts	0x0407, r1
     cd6:	10 92 08 04 	sts	0x0408, r1
     cda:	10 92 09 04 	sts	0x0409, r1
     cde:	10 92 0a 04 	sts	0x040A, r1
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	80 93 53 02 	sts	0x0253, r24
     ce8:	96 cf       	rjmp	.-212    	; 0xc16 <_Z21Goto_Fence_And_Detectv+0x28>
     cea:	10 92 21 02 	sts	0x0221, r1
     cee:	eb ef       	ldi	r30, 0xFB	; 251
     cf0:	f3 e0       	ldi	r31, 0x03	; 3
     cf2:	84 e1       	ldi	r24, 0x14	; 20
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	91 83       	std	Z+1, r25	; 0x01
     cf8:	80 83       	st	Z, r24
     cfa:	13 82       	std	Z+3, r1	; 0x03
     cfc:	12 82       	std	Z+2, r1	; 0x02
     cfe:	15 82       	std	Z+5, r1	; 0x05
     d00:	14 82       	std	Z+4, r1	; 0x04
     d02:	82 ee       	ldi	r24, 0xE2	; 226
     d04:	9f ef       	ldi	r25, 0xFF	; 255
     d06:	97 83       	std	Z+7, r25	; 0x07
     d08:	86 83       	std	Z+6, r24	; 0x06
     d0a:	10 92 07 04 	sts	0x0407, r1
     d0e:	10 92 08 04 	sts	0x0408, r1
     d12:	10 92 09 04 	sts	0x0409, r1
     d16:	10 92 0a 04 	sts	0x040A, r1
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	80 93 53 02 	sts	0x0253, r24
     d20:	7a cf       	rjmp	.-268    	; 0xc16 <_Z21Goto_Fence_And_Detectv+0x28>
     d22:	63 99       	sbic	0x0c, 3	; 12
     d24:	74 cf       	rjmp	.-280    	; 0xc0e <_Z21Goto_Fence_And_Detectv+0x20>
     d26:	77 cf       	rjmp	.-274    	; 0xc16 <_Z21Goto_Fence_And_Detectv+0x28>
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	80 93 21 02 	sts	0x0221, r24
     d2e:	e5 ef       	ldi	r30, 0xF5	; 245
     d30:	f3 e0       	ldi	r31, 0x03	; 3
     d32:	28 ed       	ldi	r18, 0xD8	; 216
     d34:	3f ef       	ldi	r19, 0xFF	; 255
     d36:	31 83       	std	Z+1, r19	; 0x01
     d38:	20 83       	st	Z, r18
     d3a:	13 82       	std	Z+3, r1	; 0x03
     d3c:	12 82       	std	Z+2, r1	; 0x02
     d3e:	15 82       	std	Z+5, r1	; 0x05
     d40:	14 82       	std	Z+4, r1	; 0x04
     d42:	10 92 07 04 	sts	0x0407, r1
     d46:	10 92 08 04 	sts	0x0408, r1
     d4a:	10 92 09 04 	sts	0x0409, r1
     d4e:	10 92 0a 04 	sts	0x040A, r1
     d52:	80 93 53 02 	sts	0x0253, r24
     d56:	5f cf       	rjmp	.-322    	; 0xc16 <_Z21Goto_Fence_And_Detectv+0x28>
     d58:	10 92 21 02 	sts	0x0221, r1
     d5c:	80 91 ee 03 	lds	r24, 0x03EE
     d60:	81 11       	cpse	r24, r1
     d62:	92 cf       	rjmp	.-220    	; 0xc88 <_Z21Goto_Fence_And_Detectv+0x9a>
     d64:	60 cf       	rjmp	.-320    	; 0xc26 <_Z21Goto_Fence_And_Detectv+0x38>
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	08 95       	ret

00000d6c <_Z19calculateCompassPIDv>:
     d6c:	2f 92       	push	r2
     d6e:	3f 92       	push	r3
     d70:	4f 92       	push	r4
     d72:	5f 92       	push	r5
     d74:	6f 92       	push	r6
     d76:	7f 92       	push	r7
     d78:	8f 92       	push	r8
     d7a:	9f 92       	push	r9
     d7c:	af 92       	push	r10
     d7e:	bf 92       	push	r11
     d80:	cf 92       	push	r12
     d82:	df 92       	push	r13
     d84:	ef 92       	push	r14
     d86:	ff 92       	push	r15
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	00 d0       	rcall	.+0      	; 0xd92 <_Z19calculateCompassPIDv+0x26>
     d92:	1f 92       	push	r1
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	80 91 02 02 	lds	r24, 0x0202
     d9c:	88 23       	and	r24, r24
     d9e:	09 f4       	brne	.+2      	; 0xda2 <_Z19calculateCompassPIDv+0x36>
     da0:	0d c1       	rjmp	.+538    	; 0xfbc <_Z19calculateCompassPIDv+0x250>
     da2:	80 91 56 02 	lds	r24, 0x0256
     da6:	88 23       	and	r24, r24
     da8:	09 f4       	brne	.+2      	; 0xdac <_Z19calculateCompassPIDv+0x40>
     daa:	0c c1       	rjmp	.+536    	; 0xfc4 <_Z19calculateCompassPIDv+0x258>
     dac:	e0 dc       	rcall	.-1600   	; 0x76e <_Z10getYawGY88v>
     dae:	8c 01       	movw	r16, r24
     db0:	ed e6       	ldi	r30, 0x6D	; 109
     db2:	f3 e0       	ldi	r31, 0x03	; 3
     db4:	91 83       	std	Z+1, r25	; 0x01
     db6:	80 83       	st	Z, r24
     db8:	86 85       	ldd	r24, Z+14	; 0x0e
     dba:	97 85       	ldd	r25, Z+15	; 0x0f
     dbc:	80 1b       	sub	r24, r16
     dbe:	91 0b       	sbc	r25, r17
     dc0:	85 3b       	cpi	r24, 0xB5	; 181
     dc2:	91 05       	cpc	r25, r1
     dc4:	3c f0       	brlt	.+14     	; 0xdd4 <_Z19calculateCompassPIDv+0x68>
     dc6:	88 56       	subi	r24, 0x68	; 104
     dc8:	91 40       	sbci	r25, 0x01	; 1
     dca:	90 93 70 03 	sts	0x0370, r25
     dce:	80 93 6f 03 	sts	0x036F, r24
     dd2:	0f c0       	rjmp	.+30     	; 0xdf2 <_Z19calculateCompassPIDv+0x86>
     dd4:	8c 34       	cpi	r24, 0x4C	; 76
     dd6:	2f ef       	ldi	r18, 0xFF	; 255
     dd8:	92 07       	cpc	r25, r18
     dda:	2c f0       	brlt	.+10     	; 0xde6 <_Z19calculateCompassPIDv+0x7a>
     ddc:	90 93 70 03 	sts	0x0370, r25
     de0:	80 93 6f 03 	sts	0x036F, r24
     de4:	06 c0       	rjmp	.+12     	; 0xdf2 <_Z19calculateCompassPIDv+0x86>
     de6:	88 59       	subi	r24, 0x98	; 152
     de8:	9e 4f       	sbci	r25, 0xFE	; 254
     dea:	90 93 70 03 	sts	0x0370, r25
     dee:	80 93 6f 03 	sts	0x036F, r24
     df2:	0f 2e       	mov	r0, r31
     df4:	fd e6       	ldi	r31, 0x6D	; 109
     df6:	6f 2e       	mov	r6, r31
     df8:	f3 e0       	ldi	r31, 0x03	; 3
     dfa:	7f 2e       	mov	r7, r31
     dfc:	f0 2d       	mov	r31, r0
     dfe:	f3 01       	movw	r30, r6
     e00:	22 80       	ldd	r2, Z+2	; 0x02
     e02:	33 80       	ldd	r3, Z+3	; 0x03
     e04:	b1 01       	movw	r22, r2
     e06:	03 2c       	mov	r0, r3
     e08:	00 0c       	add	r0, r0
     e0a:	88 0b       	sbc	r24, r24
     e0c:	99 0b       	sbc	r25, r25
     e0e:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__floatsisf>
     e12:	4b 01       	movw	r8, r22
     e14:	5c 01       	movw	r10, r24
     e16:	f3 01       	movw	r30, r6
     e18:	21 8d       	ldd	r18, Z+25	; 0x19
     e1a:	32 8d       	ldd	r19, Z+26	; 0x1a
     e1c:	43 8d       	ldd	r20, Z+27	; 0x1b
     e1e:	54 8d       	ldd	r21, Z+28	; 0x1c
     e20:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     e24:	f3 01       	movw	r30, r6
     e26:	22 85       	ldd	r18, Z+10	; 0x0a
     e28:	33 85       	ldd	r19, Z+11	; 0x0b
     e2a:	44 85       	ldd	r20, Z+12	; 0x0c
     e2c:	55 85       	ldd	r21, Z+13	; 0x0d
     e2e:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
     e32:	6b 01       	movw	r12, r22
     e34:	7c 01       	movw	r14, r24
     e36:	f3 01       	movw	r30, r6
     e38:	62 87       	std	Z+10, r22	; 0x0a
     e3a:	73 87       	std	Z+11, r23	; 0x0b
     e3c:	84 87       	std	Z+12, r24	; 0x0c
     e3e:	95 87       	std	Z+13, r25	; 0x0d
     e40:	61 89       	ldd	r22, Z+17	; 0x11
     e42:	72 89       	ldd	r23, Z+18	; 0x12
     e44:	07 2e       	mov	r0, r23
     e46:	00 0c       	add	r0, r0
     e48:	88 0b       	sbc	r24, r24
     e4a:	99 0b       	sbc	r25, r25
     e4c:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__floatsisf>
     e50:	69 83       	std	Y+1, r22	; 0x01
     e52:	7a 83       	std	Y+2, r23	; 0x02
     e54:	8b 83       	std	Y+3, r24	; 0x03
     e56:	9c 83       	std	Y+4, r25	; 0x04
     e58:	2d ec       	ldi	r18, 0xCD	; 205
     e5a:	3c ec       	ldi	r19, 0xCC	; 204
     e5c:	4c ec       	ldi	r20, 0xCC	; 204
     e5e:	5d e3       	ldi	r21, 0x3D	; 61
     e60:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     e64:	2b 01       	movw	r4, r22
     e66:	3c 01       	movw	r6, r24
     e68:	c7 01       	movw	r24, r14
     e6a:	b6 01       	movw	r22, r12
     e6c:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
     e70:	9b 01       	movw	r18, r22
     e72:	77 23       	and	r23, r23
     e74:	24 f4       	brge	.+8      	; 0xe7e <_Z19calculateCompassPIDv+0x112>
     e76:	22 27       	eor	r18, r18
     e78:	33 27       	eor	r19, r19
     e7a:	26 1b       	sub	r18, r22
     e7c:	37 0b       	sbc	r19, r23
     e7e:	b9 01       	movw	r22, r18
     e80:	33 0f       	add	r19, r19
     e82:	88 0b       	sbc	r24, r24
     e84:	99 0b       	sbc	r25, r25
     e86:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__floatsisf>
     e8a:	a3 01       	movw	r20, r6
     e8c:	92 01       	movw	r18, r4
     e8e:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__gesf2>
     e92:	18 16       	cp	r1, r24
     e94:	24 f5       	brge	.+72     	; 0xede <_Z19calculateCompassPIDv+0x172>
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	a9 01       	movw	r20, r18
     e9c:	c7 01       	movw	r24, r14
     e9e:	b6 01       	movw	r22, r12
     ea0:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__gesf2>
     ea4:	18 16       	cp	r1, r24
     ea6:	4c f4       	brge	.+18     	; 0xeba <_Z19calculateCompassPIDv+0x14e>
     ea8:	40 92 77 03 	sts	0x0377, r4
     eac:	50 92 78 03 	sts	0x0378, r5
     eb0:	60 92 79 03 	sts	0x0379, r6
     eb4:	70 92 7a 03 	sts	0x037A, r7
     eb8:	12 c0       	rjmp	.+36     	; 0xede <_Z19calculateCompassPIDv+0x172>
     eba:	2d ec       	ldi	r18, 0xCD	; 205
     ebc:	3c ec       	ldi	r19, 0xCC	; 204
     ebe:	4c ec       	ldi	r20, 0xCC	; 204
     ec0:	5d eb       	ldi	r21, 0xBD	; 189
     ec2:	69 81       	ldd	r22, Y+1	; 0x01
     ec4:	7a 81       	ldd	r23, Y+2	; 0x02
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	9c 81       	ldd	r25, Y+4	; 0x04
     eca:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     ece:	60 93 77 03 	sts	0x0377, r22
     ed2:	70 93 78 03 	sts	0x0378, r23
     ed6:	80 93 79 03 	sts	0x0379, r24
     eda:	90 93 7a 03 	sts	0x037A, r25
     ede:	c1 01       	movw	r24, r2
     ee0:	99 23       	and	r25, r25
     ee2:	24 f4       	brge	.+8      	; 0xeec <_Z19calculateCompassPIDv+0x180>
     ee4:	88 27       	eor	r24, r24
     ee6:	99 27       	eor	r25, r25
     ee8:	82 19       	sub	r24, r2
     eea:	93 09       	sbc	r25, r3
     eec:	02 97       	sbiw	r24, 0x02	; 2
     eee:	b4 f1       	brlt	.+108    	; 0xf5c <_Z19calculateCompassPIDv+0x1f0>
     ef0:	0f 2e       	mov	r0, r31
     ef2:	fd e6       	ldi	r31, 0x6D	; 109
     ef4:	6f 2e       	mov	r6, r31
     ef6:	f3 e0       	ldi	r31, 0x03	; 3
     ef8:	7f 2e       	mov	r7, r31
     efa:	f0 2d       	mov	r31, r0
     efc:	f3 01       	movw	r30, r6
     efe:	25 89       	ldd	r18, Z+21	; 0x15
     f00:	36 89       	ldd	r19, Z+22	; 0x16
     f02:	47 89       	ldd	r20, Z+23	; 0x17
     f04:	50 8d       	ldd	r21, Z+24	; 0x18
     f06:	c5 01       	movw	r24, r10
     f08:	b4 01       	movw	r22, r8
     f0a:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     f0e:	6b 01       	movw	r12, r22
     f10:	7c 01       	movw	r14, r24
     f12:	f3 01       	movw	r30, r6
     f14:	84 81       	ldd	r24, Z+4	; 0x04
     f16:	95 81       	ldd	r25, Z+5	; 0x05
     f18:	08 1b       	sub	r16, r24
     f1a:	19 0b       	sbc	r17, r25
     f1c:	b8 01       	movw	r22, r16
     f1e:	11 0f       	add	r17, r17
     f20:	88 0b       	sbc	r24, r24
     f22:	99 0b       	sbc	r25, r25
     f24:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__floatsisf>
     f28:	f3 01       	movw	r30, r6
     f2a:	25 8d       	ldd	r18, Z+29	; 0x1d
     f2c:	36 8d       	ldd	r19, Z+30	; 0x1e
     f2e:	47 8d       	ldd	r20, Z+31	; 0x1f
     f30:	50 a1       	ldd	r21, Z+32	; 0x20
     f32:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
     f36:	9b 01       	movw	r18, r22
     f38:	ac 01       	movw	r20, r24
     f3a:	c7 01       	movw	r24, r14
     f3c:	b6 01       	movw	r22, r12
     f3e:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <__subsf3>
     f42:	f3 01       	movw	r30, r6
     f44:	22 85       	ldd	r18, Z+10	; 0x0a
     f46:	33 85       	ldd	r19, Z+11	; 0x0b
     f48:	44 85       	ldd	r20, Z+12	; 0x0c
     f4a:	55 85       	ldd	r21, Z+13	; 0x0d
     f4c:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
     f50:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
     f54:	f3 01       	movw	r30, r6
     f56:	77 83       	std	Z+7, r23	; 0x07
     f58:	66 83       	std	Z+6, r22	; 0x06
     f5a:	08 c0       	rjmp	.+16     	; 0xf6c <_Z19calculateCompassPIDv+0x200>
     f5c:	ed e6       	ldi	r30, 0x6D	; 109
     f5e:	f3 e0       	ldi	r31, 0x03	; 3
     f60:	12 86       	std	Z+10, r1	; 0x0a
     f62:	13 86       	std	Z+11, r1	; 0x0b
     f64:	14 86       	std	Z+12, r1	; 0x0c
     f66:	15 86       	std	Z+13, r1	; 0x0d
     f68:	17 82       	std	Z+7, r1	; 0x07
     f6a:	16 82       	std	Z+6, r1	; 0x06
     f6c:	ed e6       	ldi	r30, 0x6D	; 109
     f6e:	f3 e0       	ldi	r31, 0x03	; 3
     f70:	80 81       	ld	r24, Z
     f72:	91 81       	ldd	r25, Z+1	; 0x01
     f74:	95 83       	std	Z+5, r25	; 0x05
     f76:	84 83       	std	Z+4, r24	; 0x04
     f78:	86 81       	ldd	r24, Z+6	; 0x06
     f7a:	97 81       	ldd	r25, Z+7	; 0x07
     f7c:	21 89       	ldd	r18, Z+17	; 0x11
     f7e:	32 89       	ldd	r19, Z+18	; 0x12
     f80:	ac 01       	movw	r20, r24
     f82:	99 23       	and	r25, r25
     f84:	24 f4       	brge	.+8      	; 0xf8e <_Z19calculateCompassPIDv+0x222>
     f86:	44 27       	eor	r20, r20
     f88:	55 27       	eor	r21, r21
     f8a:	48 1b       	sub	r20, r24
     f8c:	59 0b       	sbc	r21, r25
     f8e:	24 17       	cp	r18, r20
     f90:	35 07       	cpc	r19, r21
     f92:	54 f4       	brge	.+20     	; 0xfa8 <_Z19calculateCompassPIDv+0x23c>
     f94:	28 17       	cp	r18, r24
     f96:	39 07       	cpc	r19, r25
     f98:	1c f0       	brlt	.+6      	; 0xfa0 <_Z19calculateCompassPIDv+0x234>
     f9a:	31 95       	neg	r19
     f9c:	21 95       	neg	r18
     f9e:	31 09       	sbc	r19, r1
     fa0:	30 93 74 03 	sts	0x0374, r19
     fa4:	20 93 73 03 	sts	0x0373, r18
     fa8:	80 91 73 03 	lds	r24, 0x0373
     fac:	90 91 74 03 	lds	r25, 0x0374
     fb0:	90 93 fa 03 	sts	0x03FA, r25
     fb4:	80 93 f9 03 	sts	0x03F9, r24
     fb8:	10 92 02 02 	sts	0x0202, r1
     fbc:	80 91 56 02 	lds	r24, 0x0256
     fc0:	81 11       	cpse	r24, r1
     fc2:	04 c0       	rjmp	.+8      	; 0xfcc <_Z19calculateCompassPIDv+0x260>
     fc4:	10 92 fa 03 	sts	0x03FA, r1
     fc8:	10 92 f9 03 	sts	0x03F9, r1
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	ff 90       	pop	r15
     fde:	ef 90       	pop	r14
     fe0:	df 90       	pop	r13
     fe2:	cf 90       	pop	r12
     fe4:	bf 90       	pop	r11
     fe6:	af 90       	pop	r10
     fe8:	9f 90       	pop	r9
     fea:	8f 90       	pop	r8
     fec:	7f 90       	pop	r7
     fee:	6f 90       	pop	r6
     ff0:	5f 90       	pop	r5
     ff2:	4f 90       	pop	r4
     ff4:	3f 90       	pop	r3
     ff6:	2f 90       	pop	r2
     ff8:	08 95       	ret

00000ffa <_Z12calculatevelv>:
     ffa:	2f 92       	push	r2
     ffc:	3f 92       	push	r3
     ffe:	4f 92       	push	r4
    1000:	5f 92       	push	r5
    1002:	6f 92       	push	r6
    1004:	7f 92       	push	r7
    1006:	8f 92       	push	r8
    1008:	9f 92       	push	r9
    100a:	af 92       	push	r10
    100c:	bf 92       	push	r11
    100e:	cf 92       	push	r12
    1010:	df 92       	push	r13
    1012:	ef 92       	push	r14
    1014:	ff 92       	push	r15
    1016:	0f 93       	push	r16
    1018:	1f 93       	push	r17
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	00 d0       	rcall	.+0      	; 0x1020 <_Z12calculatevelv+0x26>
    1020:	00 d0       	rcall	.+0      	; 0x1022 <_Z12calculatevelv+0x28>
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	80 91 21 02 	lds	r24, 0x0221
    102a:	88 23       	and	r24, r24
    102c:	09 f4       	brne	.+2      	; 0x1030 <_Z12calculatevelv+0x36>
    102e:	56 c0       	rjmp	.+172    	; 0x10dc <_Z12calculatevelv+0xe2>
    1030:	0f 2e       	mov	r0, r31
    1032:	fb ef       	ldi	r31, 0xFB	; 251
    1034:	6f 2e       	mov	r6, r31
    1036:	f3 e0       	ldi	r31, 0x03	; 3
    1038:	7f 2e       	mov	r7, r31
    103a:	f0 2d       	mov	r31, r0
    103c:	0f 2e       	mov	r0, r31
    103e:	f3 e2       	ldi	r31, 0x23	; 35
    1040:	cf 2e       	mov	r12, r31
    1042:	f2 e0       	ldi	r31, 0x02	; 2
    1044:	df 2e       	mov	r13, r31
    1046:	f0 2d       	mov	r31, r0
    1048:	0f 2e       	mov	r0, r31
    104a:	fb ef       	ldi	r31, 0xFB	; 251
    104c:	2f 2e       	mov	r2, r31
    104e:	f3 e0       	ldi	r31, 0x03	; 3
    1050:	3f 2e       	mov	r3, r31
    1052:	f0 2d       	mov	r31, r0
    1054:	23 01       	movw	r4, r6
    1056:	05 ef       	ldi	r16, 0xF5	; 245
    1058:	13 e0       	ldi	r17, 0x03	; 3
    105a:	76 01       	movw	r14, r12
    105c:	60 e0       	ldi	r22, 0x00	; 0
    105e:	70 e0       	ldi	r23, 0x00	; 0
    1060:	d8 01       	movw	r26, r16
    1062:	ed 91       	ld	r30, X+
    1064:	fd 91       	ld	r31, X+
    1066:	8d 01       	movw	r16, r26
    1068:	fe 83       	std	Y+6, r31	; 0x06
    106a:	ed 83       	std	Y+5, r30	; 0x05
    106c:	d7 01       	movw	r26, r14
    106e:	8d 90       	ld	r8, X+
    1070:	9d 90       	ld	r9, X+
    1072:	ad 90       	ld	r10, X+
    1074:	bd 90       	ld	r11, X+
    1076:	7d 01       	movw	r14, r26
    1078:	07 2e       	mov	r0, r23
    107a:	00 0c       	add	r0, r0
    107c:	88 0b       	sbc	r24, r24
    107e:	99 0b       	sbc	r25, r25
    1080:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__floatsisf>
    1084:	69 83       	std	Y+1, r22	; 0x01
    1086:	7a 83       	std	Y+2, r23	; 0x02
    1088:	8b 83       	std	Y+3, r24	; 0x03
    108a:	9c 83       	std	Y+4, r25	; 0x04
    108c:	ed 81       	ldd	r30, Y+5	; 0x05
    108e:	fe 81       	ldd	r31, Y+6	; 0x06
    1090:	bf 01       	movw	r22, r30
    1092:	ff 0f       	add	r31, r31
    1094:	88 0b       	sbc	r24, r24
    1096:	99 0b       	sbc	r25, r25
    1098:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__floatsisf>
    109c:	a5 01       	movw	r20, r10
    109e:	94 01       	movw	r18, r8
    10a0:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
    10a4:	9b 01       	movw	r18, r22
    10a6:	ac 01       	movw	r20, r24
    10a8:	69 81       	ldd	r22, Y+1	; 0x01
    10aa:	7a 81       	ldd	r23, Y+2	; 0x02
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	9c 81       	ldd	r25, Y+4	; 0x04
    10b0:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
    10b4:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
    10b8:	02 15       	cp	r16, r2
    10ba:	13 05       	cpc	r17, r3
    10bc:	89 f6       	brne	.-94     	; 0x1060 <_Z12calculatevelv+0x66>
    10be:	d2 01       	movw	r26, r4
    10c0:	6d 93       	st	X+, r22
    10c2:	7c 93       	st	X, r23
    10c4:	b2 e0       	ldi	r27, 0x02	; 2
    10c6:	6b 0e       	add	r6, r27
    10c8:	71 1c       	adc	r7, r1
    10ca:	ec e0       	ldi	r30, 0x0C	; 12
    10cc:	ce 0e       	add	r12, r30
    10ce:	d1 1c       	adc	r13, r1
    10d0:	f3 e5       	ldi	r31, 0x53	; 83
    10d2:	cf 16       	cp	r12, r31
    10d4:	f2 e0       	ldi	r31, 0x02	; 2
    10d6:	df 06       	cpc	r13, r31
    10d8:	09 f0       	breq	.+2      	; 0x10dc <_Z12calculatevelv+0xe2>
    10da:	bc cf       	rjmp	.-136    	; 0x1054 <_Z12calculatevelv+0x5a>
    10dc:	e3 e0       	ldi	r30, 0x03	; 3
    10de:	f4 e0       	ldi	r31, 0x04	; 4
    10e0:	0b ef       	ldi	r16, 0xFB	; 251
    10e2:	13 e0       	ldi	r17, 0x03	; 3
    10e4:	d8 01       	movw	r26, r16
    10e6:	2d 91       	ld	r18, X+
    10e8:	3c 91       	ld	r19, X
    10ea:	47 e1       	ldi	r20, 0x17	; 23
    10ec:	42 9f       	mul	r20, r18
    10ee:	c0 01       	movw	r24, r0
    10f0:	43 9f       	mul	r20, r19
    10f2:	90 0d       	add	r25, r0
    10f4:	11 24       	eor	r1, r1
    10f6:	29 ef       	ldi	r18, 0xF9	; 249
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	b9 01       	movw	r22, r18
    10fc:	0e 94 4f 22 	call	0x449e	; 0x449e <__divmodhi4>
    1100:	60 83       	st	Z, r22
    1102:	d8 01       	movw	r26, r16
    1104:	12 96       	adiw	r26, 0x02	; 2
    1106:	6d 91       	ld	r22, X+
    1108:	7c 91       	ld	r23, X
    110a:	13 97       	sbiw	r26, 0x03	; 3
    110c:	46 9f       	mul	r20, r22
    110e:	c0 01       	movw	r24, r0
    1110:	47 9f       	mul	r20, r23
    1112:	90 0d       	add	r25, r0
    1114:	11 24       	eor	r1, r1
    1116:	b9 01       	movw	r22, r18
    1118:	0e 94 4f 22 	call	0x449e	; 0x449e <__divmodhi4>
    111c:	61 83       	std	Z+1, r22	; 0x01
    111e:	d8 01       	movw	r26, r16
    1120:	14 96       	adiw	r26, 0x04	; 4
    1122:	6d 91       	ld	r22, X+
    1124:	7c 91       	ld	r23, X
    1126:	15 97       	sbiw	r26, 0x05	; 5
    1128:	46 9f       	mul	r20, r22
    112a:	c0 01       	movw	r24, r0
    112c:	47 9f       	mul	r20, r23
    112e:	90 0d       	add	r25, r0
    1130:	11 24       	eor	r1, r1
    1132:	b9 01       	movw	r22, r18
    1134:	0e 94 4f 22 	call	0x449e	; 0x449e <__divmodhi4>
    1138:	62 83       	std	Z+2, r22	; 0x02
    113a:	d8 01       	movw	r26, r16
    113c:	16 96       	adiw	r26, 0x06	; 6
    113e:	6d 91       	ld	r22, X+
    1140:	7c 91       	ld	r23, X
    1142:	17 97       	sbiw	r26, 0x07	; 7
    1144:	46 9f       	mul	r20, r22
    1146:	c0 01       	movw	r24, r0
    1148:	47 9f       	mul	r20, r23
    114a:	90 0d       	add	r25, r0
    114c:	11 24       	eor	r1, r1
    114e:	b9 01       	movw	r22, r18
    1150:	0e 94 4f 22 	call	0x449e	; 0x449e <__divmodhi4>
    1154:	63 83       	std	Z+3, r22	; 0x03
    1156:	35 dd       	rcall	.-1430   	; 0xbc2 <_Z15sendDataToSlavev>
    1158:	26 96       	adiw	r28, 0x06	; 6
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	ff 90       	pop	r15
    116e:	ef 90       	pop	r14
    1170:	df 90       	pop	r13
    1172:	cf 90       	pop	r12
    1174:	bf 90       	pop	r11
    1176:	af 90       	pop	r10
    1178:	9f 90       	pop	r9
    117a:	8f 90       	pop	r8
    117c:	7f 90       	pop	r7
    117e:	6f 90       	pop	r6
    1180:	5f 90       	pop	r5
    1182:	4f 90       	pop	r4
    1184:	3f 90       	pop	r3
    1186:	2f 90       	pop	r2
    1188:	08 95       	ret

0000118a <_Z4movxiij>:
    118a:	2f 92       	push	r2
    118c:	3f 92       	push	r3
    118e:	4f 92       	push	r4
    1190:	5f 92       	push	r5
    1192:	6f 92       	push	r6
    1194:	7f 92       	push	r7
    1196:	8f 92       	push	r8
    1198:	9f 92       	push	r9
    119a:	af 92       	push	r10
    119c:	bf 92       	push	r11
    119e:	cf 92       	push	r12
    11a0:	df 92       	push	r13
    11a2:	ef 92       	push	r14
    11a4:	ff 92       	push	r15
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	1c 01       	movw	r2, r24
    11b0:	8b 01       	movw	r16, r22
    11b2:	7a 01       	movw	r14, r20
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	80 93 21 02 	sts	0x0221, r24
    11ba:	86 ec       	ldi	r24, 0xC6	; 198
    11bc:	92 e0       	ldi	r25, 0x02	; 2
    11be:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    11c2:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
    11c6:	9b 01       	movw	r18, r22
    11c8:	77 23       	and	r23, r23
    11ca:	24 f4       	brge	.+8      	; 0x11d4 <_Z4movxiij+0x4a>
    11cc:	22 27       	eor	r18, r18
    11ce:	33 27       	eor	r19, r19
    11d0:	26 1b       	sub	r18, r22
    11d2:	37 0b       	sbc	r19, r23
    11d4:	e9 01       	movw	r28, r18
    11d6:	30 93 f4 03 	sts	0x03F4, r19
    11da:	20 93 f3 03 	sts	0x03F3, r18
    11de:	30 92 5b 03 	sts	0x035B, r3
    11e2:	20 92 5a 03 	sts	0x035A, r2
    11e6:	80 91 01 02 	lds	r24, 0x0201
    11ea:	88 23       	and	r24, r24
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <_Z4movxiij+0x66>
    11ee:	5b c1       	rjmp	.+694    	; 0x14a6 <_Z4movxiij+0x31c>
    11f0:	10 92 eb 03 	sts	0x03EB, r1
    11f4:	10 92 ea 03 	sts	0x03EA, r1
    11f8:	30 93 4d 03 	sts	0x034D, r19
    11fc:	20 93 4c 03 	sts	0x034C, r18
    1200:	10 92 01 02 	sts	0x0201, r1
    1204:	28 3e       	cpi	r18, 0xE8	; 232
    1206:	83 e0       	ldi	r24, 0x03	; 3
    1208:	38 07       	cpc	r19, r24
    120a:	0c f4       	brge	.+2      	; 0x120e <_Z4movxiij+0x84>
    120c:	f0 c0       	rjmp	.+480    	; 0x13ee <_Z4movxiij+0x264>
    120e:	22 1a       	sub	r2, r18
    1210:	33 0a       	sbc	r3, r19
    1212:	0f 2e       	mov	r0, r31
    1214:	fc e4       	ldi	r31, 0x4C	; 76
    1216:	cf 2e       	mov	r12, r31
    1218:	f3 e0       	ldi	r31, 0x03	; 3
    121a:	df 2e       	mov	r13, r31
    121c:	f0 2d       	mov	r31, r0
    121e:	f6 01       	movw	r30, r12
    1220:	33 82       	std	Z+3, r3	; 0x03
    1222:	22 82       	std	Z+2, r2	; 0x02
    1224:	b1 01       	movw	r22, r2
    1226:	03 2c       	mov	r0, r3
    1228:	00 0c       	add	r0, r0
    122a:	88 0b       	sbc	r24, r24
    122c:	99 0b       	sbc	r25, r25
    122e:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__floatsisf>
    1232:	2b 01       	movw	r4, r22
    1234:	3c 01       	movw	r6, r24
    1236:	f6 01       	movw	r30, r12
    1238:	21 8d       	ldd	r18, Z+25	; 0x19
    123a:	32 8d       	ldd	r19, Z+26	; 0x1a
    123c:	43 8d       	ldd	r20, Z+27	; 0x1b
    123e:	54 8d       	ldd	r21, Z+28	; 0x1c
    1240:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
    1244:	f6 01       	movw	r30, r12
    1246:	22 85       	ldd	r18, Z+10	; 0x0a
    1248:	33 85       	ldd	r19, Z+11	; 0x0b
    124a:	44 85       	ldd	r20, Z+12	; 0x0c
    124c:	55 85       	ldd	r21, Z+13	; 0x0d
    124e:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
    1252:	4b 01       	movw	r8, r22
    1254:	5c 01       	movw	r10, r24
    1256:	f6 01       	movw	r30, r12
    1258:	62 87       	std	Z+10, r22	; 0x0a
    125a:	73 87       	std	Z+11, r23	; 0x0b
    125c:	84 87       	std	Z+12, r24	; 0x0c
    125e:	95 87       	std	Z+13, r25	; 0x0d
    1260:	80 89       	ldd	r24, Z+16	; 0x10
    1262:	88 23       	and	r24, r24
    1264:	19 f0       	breq	.+6      	; 0x126c <_Z4movxiij+0xe2>
    1266:	d5 83       	std	Z+5, r29	; 0x05
    1268:	c4 83       	std	Z+4, r28	; 0x04
    126a:	10 8a       	std	Z+16, r1	; 0x10
    126c:	c5 01       	movw	r24, r10
    126e:	b4 01       	movw	r22, r8
    1270:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
    1274:	9b 01       	movw	r18, r22
    1276:	77 23       	and	r23, r23
    1278:	24 f4       	brge	.+8      	; 0x1282 <_Z4movxiij+0xf8>
    127a:	22 27       	eor	r18, r18
    127c:	33 27       	eor	r19, r19
    127e:	26 1b       	sub	r18, r22
    1280:	37 0b       	sbc	r19, r23
    1282:	2b 30       	cpi	r18, 0x0B	; 11
    1284:	31 05       	cpc	r19, r1
    1286:	8c f1       	brlt	.+98     	; 0x12ea <_Z4movxiij+0x160>
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	a9 01       	movw	r20, r18
    128e:	c5 01       	movw	r24, r10
    1290:	b4 01       	movw	r22, r8
    1292:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__gesf2>
    1296:	18 16       	cp	r1, r24
    1298:	6c f4       	brge	.+26     	; 0x12b4 <_Z4movxiij+0x12a>
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	a0 e2       	ldi	r26, 0x20	; 32
    12a0:	b1 e4       	ldi	r27, 0x41	; 65
    12a2:	80 93 56 03 	sts	0x0356, r24
    12a6:	90 93 57 03 	sts	0x0357, r25
    12aa:	a0 93 58 03 	sts	0x0358, r26
    12ae:	b0 93 59 03 	sts	0x0359, r27
    12b2:	1b c0       	rjmp	.+54     	; 0x12ea <_Z4movxiij+0x160>
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	a9 01       	movw	r20, r18
    12ba:	60 91 56 03 	lds	r22, 0x0356
    12be:	70 91 57 03 	lds	r23, 0x0357
    12c2:	80 91 58 03 	lds	r24, 0x0358
    12c6:	90 91 59 03 	lds	r25, 0x0359
    12ca:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <__cmpsf2>
    12ce:	88 23       	and	r24, r24
    12d0:	64 f4       	brge	.+24     	; 0x12ea <_Z4movxiij+0x160>
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	a0 e2       	ldi	r26, 0x20	; 32
    12d8:	b1 ec       	ldi	r27, 0xC1	; 193
    12da:	80 93 56 03 	sts	0x0356, r24
    12de:	90 93 57 03 	sts	0x0357, r25
    12e2:	a0 93 58 03 	sts	0x0358, r26
    12e6:	b0 93 59 03 	sts	0x0359, r27
    12ea:	12 14       	cp	r1, r2
    12ec:	13 04       	cpc	r1, r3
    12ee:	bc f5       	brge	.+110    	; 0x135e <_Z4movxiij+0x1d4>
    12f0:	0f 2e       	mov	r0, r31
    12f2:	fc e4       	ldi	r31, 0x4C	; 76
    12f4:	cf 2e       	mov	r12, r31
    12f6:	f3 e0       	ldi	r31, 0x03	; 3
    12f8:	df 2e       	mov	r13, r31
    12fa:	f0 2d       	mov	r31, r0
    12fc:	f6 01       	movw	r30, r12
    12fe:	25 89       	ldd	r18, Z+21	; 0x15
    1300:	36 89       	ldd	r19, Z+22	; 0x16
    1302:	47 89       	ldd	r20, Z+23	; 0x17
    1304:	50 8d       	ldd	r21, Z+24	; 0x18
    1306:	c3 01       	movw	r24, r6
    1308:	b2 01       	movw	r22, r4
    130a:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
    130e:	f6 01       	movw	r30, r12
    1310:	22 85       	ldd	r18, Z+10	; 0x0a
    1312:	33 85       	ldd	r19, Z+11	; 0x0b
    1314:	44 85       	ldd	r20, Z+12	; 0x0c
    1316:	55 85       	ldd	r21, Z+13	; 0x0d
    1318:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
    131c:	4b 01       	movw	r8, r22
    131e:	5c 01       	movw	r10, r24
    1320:	f6 01       	movw	r30, r12
    1322:	84 81       	ldd	r24, Z+4	; 0x04
    1324:	95 81       	ldd	r25, Z+5	; 0x05
    1326:	be 01       	movw	r22, r28
    1328:	68 1b       	sub	r22, r24
    132a:	79 0b       	sbc	r23, r25
    132c:	07 2e       	mov	r0, r23
    132e:	00 0c       	add	r0, r0
    1330:	88 0b       	sbc	r24, r24
    1332:	99 0b       	sbc	r25, r25
    1334:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__floatsisf>
    1338:	f6 01       	movw	r30, r12
    133a:	25 8d       	ldd	r18, Z+29	; 0x1d
    133c:	36 8d       	ldd	r19, Z+30	; 0x1e
    133e:	47 8d       	ldd	r20, Z+31	; 0x1f
    1340:	50 a1       	ldd	r21, Z+32	; 0x20
    1342:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
    1346:	9b 01       	movw	r18, r22
    1348:	ac 01       	movw	r20, r24
    134a:	c5 01       	movw	r24, r10
    134c:	b4 01       	movw	r22, r8
    134e:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <__subsf3>
    1352:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
    1356:	f6 01       	movw	r30, r12
    1358:	77 83       	std	Z+7, r23	; 0x07
    135a:	66 83       	std	Z+6, r22	; 0x06
    135c:	04 c0       	rjmp	.+8      	; 0x1366 <_Z4movxiij+0x1dc>
    135e:	10 92 53 03 	sts	0x0353, r1
    1362:	10 92 52 03 	sts	0x0352, r1
    1366:	ec e4       	ldi	r30, 0x4C	; 76
    1368:	f3 e0       	ldi	r31, 0x03	; 3
    136a:	d5 83       	std	Z+5, r29	; 0x05
    136c:	c4 83       	std	Z+4, r28	; 0x04
    136e:	86 81       	ldd	r24, Z+6	; 0x06
    1370:	97 81       	ldd	r25, Z+7	; 0x07
    1372:	9c 01       	movw	r18, r24
    1374:	99 23       	and	r25, r25
    1376:	24 f4       	brge	.+8      	; 0x1380 <_Z4movxiij+0x1f6>
    1378:	22 27       	eor	r18, r18
    137a:	33 27       	eor	r19, r19
    137c:	28 1b       	sub	r18, r24
    137e:	39 0b       	sbc	r19, r25
    1380:	e2 16       	cp	r14, r18
    1382:	f3 06       	cpc	r15, r19
    1384:	78 f4       	brcc	.+30     	; 0x13a4 <_Z4movxiij+0x21a>
    1386:	18 16       	cp	r1, r24
    1388:	19 06       	cpc	r1, r25
    138a:	2c f4       	brge	.+10     	; 0x1396 <_Z4movxiij+0x20c>
    138c:	f0 92 53 03 	sts	0x0353, r15
    1390:	e0 92 52 03 	sts	0x0352, r14
    1394:	07 c0       	rjmp	.+14     	; 0x13a4 <_Z4movxiij+0x21a>
    1396:	f1 94       	neg	r15
    1398:	e1 94       	neg	r14
    139a:	f1 08       	sbc	r15, r1
    139c:	f0 92 53 03 	sts	0x0353, r15
    13a0:	e0 92 52 03 	sts	0x0352, r14
    13a4:	80 91 52 03 	lds	r24, 0x0352
    13a8:	90 91 53 03 	lds	r25, 0x0353
    13ac:	43 96       	adiw	r24, 0x13	; 19
    13ae:	87 97       	sbiw	r24, 0x27	; 39
    13b0:	a8 f4       	brcc	.+42     	; 0x13dc <_Z4movxiij+0x252>
    13b2:	80 91 ed 03 	lds	r24, 0x03ED
    13b6:	88 23       	and	r24, r24
    13b8:	39 f0       	breq	.+14     	; 0x13c8 <_Z4movxiij+0x23e>
    13ba:	84 e1       	ldi	r24, 0x14	; 20
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	90 93 53 03 	sts	0x0353, r25
    13c2:	80 93 52 03 	sts	0x0352, r24
    13c6:	0a c0       	rjmp	.+20     	; 0x13dc <_Z4movxiij+0x252>
    13c8:	80 91 ec 03 	lds	r24, 0x03EC
    13cc:	88 23       	and	r24, r24
    13ce:	31 f0       	breq	.+12     	; 0x13dc <_Z4movxiij+0x252>
    13d0:	8c ee       	ldi	r24, 0xEC	; 236
    13d2:	9f ef       	ldi	r25, 0xFF	; 255
    13d4:	90 93 53 03 	sts	0x0353, r25
    13d8:	80 93 52 03 	sts	0x0352, r24
    13dc:	80 91 52 03 	lds	r24, 0x0352
    13e0:	90 91 53 03 	lds	r25, 0x0353
    13e4:	90 93 f6 03 	sts	0x03F6, r25
    13e8:	80 93 f5 03 	sts	0x03F5, r24
    13ec:	35 c0       	rjmp	.+106    	; 0x1458 <_Z4movxiij+0x2ce>
    13ee:	80 91 22 02 	lds	r24, 0x0222
    13f2:	88 23       	and	r24, r24
    13f4:	c9 f0       	breq	.+50     	; 0x1428 <_Z4movxiij+0x29e>
    13f6:	b9 01       	movw	r22, r18
    13f8:	33 0f       	add	r19, r19
    13fa:	88 0b       	sbc	r24, r24
    13fc:	99 0b       	sbc	r25, r25
    13fe:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__floatsisf>
    1402:	2d ec       	ldi	r18, 0xCD	; 205
    1404:	3c ec       	ldi	r19, 0xCC	; 204
    1406:	4c ec       	ldi	r20, 0xCC	; 204
    1408:	5d e3       	ldi	r21, 0x3D	; 61
    140a:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	40 e7       	ldi	r20, 0x70	; 112
    1414:	52 e4       	ldi	r21, 0x42	; 66
    1416:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
    141a:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
    141e:	70 93 f6 03 	sts	0x03F6, r23
    1422:	60 93 f5 03 	sts	0x03F5, r22
    1426:	18 c0       	rjmp	.+48     	; 0x1458 <_Z4movxiij+0x2ce>
    1428:	b9 01       	movw	r22, r18
    142a:	33 0f       	add	r19, r19
    142c:	88 0b       	sbc	r24, r24
    142e:	99 0b       	sbc	r25, r25
    1430:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__floatsisf>
    1434:	2a e0       	ldi	r18, 0x0A	; 10
    1436:	37 ed       	ldi	r19, 0xD7	; 215
    1438:	43 e2       	ldi	r20, 0x23	; 35
    143a:	5d e3       	ldi	r21, 0x3D	; 61
    143c:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	40 e7       	ldi	r20, 0x70	; 112
    1446:	52 e4       	ldi	r21, 0x42	; 66
    1448:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
    144c:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
    1450:	70 93 f6 03 	sts	0x03F6, r23
    1454:	60 93 f5 03 	sts	0x03F5, r22
    1458:	02 30       	cpi	r16, 0x02	; 2
    145a:	11 05       	cpc	r17, r1
    145c:	51 f4       	brne	.+20     	; 0x1472 <_Z4movxiij+0x2e8>
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	80 93 ed 03 	sts	0x03ED, r24
    1464:	10 92 ec 03 	sts	0x03EC, r1
    1468:	10 92 ea 03 	sts	0x03EA, r1
    146c:	10 92 eb 03 	sts	0x03EB, r1
    1470:	1a c0       	rjmp	.+52     	; 0x14a6 <_Z4movxiij+0x31c>
    1472:	03 30       	cpi	r16, 0x03	; 3
    1474:	11 05       	cpc	r17, r1
    1476:	b9 f4       	brne	.+46     	; 0x14a6 <_Z4movxiij+0x31c>
    1478:	e5 ef       	ldi	r30, 0xF5	; 245
    147a:	f3 e0       	ldi	r31, 0x03	; 3
    147c:	80 81       	ld	r24, Z
    147e:	91 81       	ldd	r25, Z+1	; 0x01
    1480:	99 23       	and	r25, r25
    1482:	1c f4       	brge	.+6      	; 0x148a <_Z4movxiij+0x300>
    1484:	91 95       	neg	r25
    1486:	81 95       	neg	r24
    1488:	91 09       	sbc	r25, r1
    148a:	91 95       	neg	r25
    148c:	81 95       	neg	r24
    148e:	91 09       	sbc	r25, r1
    1490:	91 83       	std	Z+1, r25	; 0x01
    1492:	80 83       	st	Z, r24
    1494:	10 92 ed 03 	sts	0x03ED, r1
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	80 93 ec 03 	sts	0x03EC, r24
    149e:	10 92 eb 03 	sts	0x03EB, r1
    14a2:	10 92 ea 03 	sts	0x03EA, r1
    14a6:	80 91 22 02 	lds	r24, 0x0222
    14aa:	88 23       	and	r24, r24
    14ac:	49 f0       	breq	.+18     	; 0x14c0 <_Z4movxiij+0x336>
    14ae:	e5 ef       	ldi	r30, 0xF5	; 245
    14b0:	f3 e0       	ldi	r31, 0x03	; 3
    14b2:	8c ee       	ldi	r24, 0xEC	; 236
    14b4:	9f ef       	ldi	r25, 0xFF	; 255
    14b6:	93 83       	std	Z+3, r25	; 0x03
    14b8:	82 83       	std	Z+2, r24	; 0x02
    14ba:	15 82       	std	Z+5, r1	; 0x05
    14bc:	14 82       	std	Z+4, r1	; 0x04
    14be:	05 c0       	rjmp	.+10     	; 0x14ca <_Z4movxiij+0x340>
    14c0:	10 92 f8 03 	sts	0x03F8, r1
    14c4:	10 92 f7 03 	sts	0x03F7, r1
    14c8:	51 dc       	rcall	.-1886   	; 0xd6c <_Z19calculateCompassPIDv>
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	ff 90       	pop	r15
    14d4:	ef 90       	pop	r14
    14d6:	df 90       	pop	r13
    14d8:	cf 90       	pop	r12
    14da:	bf 90       	pop	r11
    14dc:	af 90       	pop	r10
    14de:	9f 90       	pop	r9
    14e0:	8f 90       	pop	r8
    14e2:	7f 90       	pop	r7
    14e4:	6f 90       	pop	r6
    14e6:	5f 90       	pop	r5
    14e8:	4f 90       	pop	r4
    14ea:	3f 90       	pop	r3
    14ec:	2f 90       	pop	r2
    14ee:	08 95       	ret

000014f0 <_Z27Get_Front_LinetrackerY_Datav>:
    14f0:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <_Z10uart2_getcv>
    14f4:	85 36       	cpi	r24, 0x65	; 101
    14f6:	38 f0       	brcs	.+14     	; 0x1506 <_Z27Get_Front_LinetrackerY_Datav+0x16>
    14f8:	90 91 0a 02 	lds	r25, 0x020A
    14fc:	90 35       	cpi	r25, 0x50	; 80
    14fe:	61 f0       	breq	.+24     	; 0x1518 <_Z27Get_Front_LinetrackerY_Datav+0x28>
    1500:	9a 30       	cpi	r25, 0x0A	; 10
    1502:	d9 f5       	brne	.+118    	; 0x157a <_Z27Get_Front_LinetrackerY_Datav+0x8a>
    1504:	04 c0       	rjmp	.+8      	; 0x150e <_Z27Get_Front_LinetrackerY_Datav+0x1e>
    1506:	90 91 0a 02 	lds	r25, 0x020A
    150a:	9a 30       	cpi	r25, 0x0A	; 10
    150c:	81 f5       	brne	.+96     	; 0x156e <_Z27Get_Front_LinetrackerY_Datav+0x7e>
    150e:	81 11       	cpse	r24, r1
    1510:	31 c0       	rjmp	.+98     	; 0x1574 <_Z27Get_Front_LinetrackerY_Datav+0x84>
    1512:	10 92 2a 03 	sts	0x032A, r1
    1516:	2e c0       	rjmp	.+92     	; 0x1574 <_Z27Get_Front_LinetrackerY_Datav+0x84>
    1518:	86 34       	cpi	r24, 0x46	; 70
    151a:	79 f4       	brne	.+30     	; 0x153a <_Z27Get_Front_LinetrackerY_Datav+0x4a>
    151c:	10 92 29 03 	sts	0x0329, r1
    1520:	90 91 2a 03 	lds	r25, 0x032A
    1524:	91 11       	cpse	r25, r1
    1526:	20 c0       	rjmp	.+64     	; 0x1568 <_Z27Get_Front_LinetrackerY_Datav+0x78>
    1528:	1a c0       	rjmp	.+52     	; 0x155e <_Z27Get_Front_LinetrackerY_Datav+0x6e>
    152a:	8a e0       	ldi	r24, 0x0A	; 10
    152c:	80 93 0a 02 	sts	0x020A, r24
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	80 93 2a 03 	sts	0x032A, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	20 c0       	rjmp	.+64     	; 0x157a <_Z27Get_Front_LinetrackerY_Datav+0x8a>
    153a:	85 36       	cpi	r24, 0x65	; 101
    153c:	40 f0       	brcs	.+16     	; 0x154e <_Z27Get_Front_LinetrackerY_Datav+0x5e>
    153e:	80 e5       	ldi	r24, 0x50	; 80
    1540:	80 93 0a 02 	sts	0x020A, r24
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	80 93 29 03 	sts	0x0329, r24
    154a:	9a e5       	ldi	r25, 0x5A	; 90
    154c:	16 c0       	rjmp	.+44     	; 0x157a <_Z27Get_Front_LinetrackerY_Datav+0x8a>
    154e:	90 91 2a 03 	lds	r25, 0x032A
    1552:	91 11       	cpse	r25, r1
    1554:	09 c0       	rjmp	.+18     	; 0x1568 <_Z27Get_Front_LinetrackerY_Datav+0x78>
    1556:	90 91 29 03 	lds	r25, 0x0329
    155a:	91 11       	cpse	r25, r1
    155c:	05 c0       	rjmp	.+10     	; 0x1568 <_Z27Get_Front_LinetrackerY_Datav+0x78>
    155e:	9a e0       	ldi	r25, 0x0A	; 10
    1560:	98 0f       	add	r25, r24
    1562:	90 93 0a 02 	sts	0x020A, r25
    1566:	09 c0       	rjmp	.+18     	; 0x157a <_Z27Get_Front_LinetrackerY_Datav+0x8a>
    1568:	9a e0       	ldi	r25, 0x0A	; 10
    156a:	98 0f       	add	r25, r24
    156c:	06 c0       	rjmp	.+12     	; 0x157a <_Z27Get_Front_LinetrackerY_Datav+0x8a>
    156e:	90 35       	cpi	r25, 0x50	; 80
    1570:	71 f7       	brne	.-36     	; 0x154e <_Z27Get_Front_LinetrackerY_Datav+0x5e>
    1572:	d2 cf       	rjmp	.-92     	; 0x1518 <_Z27Get_Front_LinetrackerY_Datav+0x28>
    1574:	85 36       	cpi	r24, 0x65	; 101
    1576:	58 f3       	brcs	.-42     	; 0x154e <_Z27Get_Front_LinetrackerY_Datav+0x5e>
    1578:	d8 cf       	rjmp	.-80     	; 0x152a <_Z27Get_Front_LinetrackerY_Datav+0x3a>
    157a:	89 2f       	mov	r24, r25
    157c:	08 95       	ret

0000157e <_Z26Get_Back_LinetrackerY_Datav>:
    157e:	af 92       	push	r10
    1580:	bf 92       	push	r11
    1582:	cf 92       	push	r12
    1584:	df 92       	push	r13
    1586:	ef 92       	push	r14
    1588:	ff 92       	push	r15
    158a:	0f 93       	push	r16
    158c:	1f 93       	push	r17
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
    1592:	0f 2e       	mov	r0, r31
    1594:	fd ea       	ldi	r31, 0xAD	; 173
    1596:	ef 2e       	mov	r14, r31
    1598:	f2 e0       	ldi	r31, 0x02	; 2
    159a:	ff 2e       	mov	r15, r31
    159c:	f0 2d       	mov	r31, r0
    159e:	00 ed       	ldi	r16, 0xD0	; 208
    15a0:	13 e0       	ldi	r17, 0x03	; 3
    15a2:	c0 e0       	ldi	r28, 0x00	; 0
    15a4:	d0 e0       	ldi	r29, 0x00	; 0
    15a6:	cc 24       	eor	r12, r12
    15a8:	c3 94       	inc	r12
    15aa:	d1 2c       	mov	r13, r1
    15ac:	86 b1       	in	r24, 0x06	; 6
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	0c 2e       	mov	r0, r28
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <_Z26Get_Back_LinetrackerY_Datav+0x3a>
    15b4:	95 95       	asr	r25
    15b6:	87 95       	ror	r24
    15b8:	0a 94       	dec	r0
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <_Z26Get_Back_LinetrackerY_Datav+0x36>
    15bc:	80 ff       	sbrs	r24, 0
    15be:	10 c0       	rjmp	.+32     	; 0x15e0 <_Z26Get_Back_LinetrackerY_Datav+0x62>
    15c0:	f8 01       	movw	r30, r16
    15c2:	d1 82       	std	Z+1, r13	; 0x01
    15c4:	c0 82       	st	Z, r12
    15c6:	20 91 e9 03 	lds	r18, 0x03E9
    15ca:	c6 01       	movw	r24, r12
    15cc:	0c 2e       	mov	r0, r28
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <_Z26Get_Back_LinetrackerY_Datav+0x56>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <_Z26Get_Back_LinetrackerY_Datav+0x52>
    15d8:	82 2b       	or	r24, r18
    15da:	80 93 e9 03 	sts	0x03E9, r24
    15de:	03 c0       	rjmp	.+6      	; 0x15e6 <_Z26Get_Back_LinetrackerY_Datav+0x68>
    15e0:	f8 01       	movw	r30, r16
    15e2:	11 82       	std	Z+1, r1	; 0x01
    15e4:	10 82       	st	Z, r1
    15e6:	f7 01       	movw	r30, r14
    15e8:	81 91       	ld	r24, Z+
    15ea:	91 91       	ld	r25, Z+
    15ec:	7f 01       	movw	r14, r30
    15ee:	f8 01       	movw	r30, r16
    15f0:	a1 90       	ld	r10, Z+
    15f2:	b1 90       	ld	r11, Z+
    15f4:	8f 01       	movw	r16, r30
    15f6:	8a 9d       	mul	r24, r10
    15f8:	b0 01       	movw	r22, r0
    15fa:	8b 9d       	mul	r24, r11
    15fc:	70 0d       	add	r23, r0
    15fe:	9a 9d       	mul	r25, r10
    1600:	70 0d       	add	r23, r0
    1602:	11 24       	eor	r1, r1
    1604:	07 2e       	mov	r0, r23
    1606:	00 0c       	add	r0, r0
    1608:	88 0b       	sbc	r24, r24
    160a:	99 0b       	sbc	r25, r25
    160c:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__floatsisf>
    1610:	9b 01       	movw	r18, r22
    1612:	ac 01       	movw	r20, r24
    1614:	60 91 e4 03 	lds	r22, 0x03E4
    1618:	70 91 e5 03 	lds	r23, 0x03E5
    161c:	80 91 e6 03 	lds	r24, 0x03E6
    1620:	90 91 e7 03 	lds	r25, 0x03E7
    1624:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
    1628:	60 93 e4 03 	sts	0x03E4, r22
    162c:	70 93 e5 03 	sts	0x03E5, r23
    1630:	80 93 e6 03 	sts	0x03E6, r24
    1634:	90 93 e7 03 	sts	0x03E7, r25
    1638:	b5 01       	movw	r22, r10
    163a:	bb 0c       	add	r11, r11
    163c:	88 0b       	sbc	r24, r24
    163e:	99 0b       	sbc	r25, r25
    1640:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__floatsisf>
    1644:	20 91 e0 03 	lds	r18, 0x03E0
    1648:	30 91 e1 03 	lds	r19, 0x03E1
    164c:	40 91 e2 03 	lds	r20, 0x03E2
    1650:	50 91 e3 03 	lds	r21, 0x03E3
    1654:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
    1658:	60 93 e0 03 	sts	0x03E0, r22
    165c:	70 93 e1 03 	sts	0x03E1, r23
    1660:	80 93 e2 03 	sts	0x03E2, r24
    1664:	90 93 e3 03 	sts	0x03E3, r25
    1668:	21 96       	adiw	r28, 0x01	; 1
    166a:	c8 30       	cpi	r28, 0x08	; 8
    166c:	d1 05       	cpc	r29, r1
    166e:	09 f0       	breq	.+2      	; 0x1672 <_Z26Get_Back_LinetrackerY_Datav+0xf4>
    1670:	9d cf       	rjmp	.-198    	; 0x15ac <_Z26Get_Back_LinetrackerY_Datav+0x2e>
    1672:	9b 01       	movw	r18, r22
    1674:	ac 01       	movw	r20, r24
    1676:	60 91 e4 03 	lds	r22, 0x03E4
    167a:	70 91 e5 03 	lds	r23, 0x03E5
    167e:	80 91 e6 03 	lds	r24, 0x03E6
    1682:	90 91 e7 03 	lds	r25, 0x03E7
    1686:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <__divsf3>
    168a:	0e 94 34 20 	call	0x4068	; 0x4068 <__fixunssfsi>
    168e:	60 93 e8 03 	sts	0x03E8, r22
    1692:	10 92 e4 03 	sts	0x03E4, r1
    1696:	10 92 e5 03 	sts	0x03E5, r1
    169a:	10 92 e6 03 	sts	0x03E6, r1
    169e:	10 92 e7 03 	sts	0x03E7, r1
    16a2:	10 92 e0 03 	sts	0x03E0, r1
    16a6:	10 92 e1 03 	sts	0x03E1, r1
    16aa:	10 92 e2 03 	sts	0x03E2, r1
    16ae:	10 92 e3 03 	sts	0x03E3, r1
    16b2:	80 91 09 02 	lds	r24, 0x0209
    16b6:	8a 30       	cpi	r24, 0x0A	; 10
    16b8:	29 f4       	brne	.+10     	; 0x16c4 <_Z26Get_Back_LinetrackerY_Datav+0x146>
    16ba:	6a 30       	cpi	r22, 0x0A	; 10
    16bc:	81 f5       	brne	.+96     	; 0x171e <_Z26Get_Back_LinetrackerY_Datav+0x1a0>
    16be:	10 92 28 03 	sts	0x0328, r1
    16c2:	2d c0       	rjmp	.+90     	; 0x171e <_Z26Get_Back_LinetrackerY_Datav+0x1a0>
    16c4:	80 35       	cpi	r24, 0x50	; 80
    16c6:	f1 f4       	brne	.+60     	; 0x1704 <_Z26Get_Back_LinetrackerY_Datav+0x186>
    16c8:	60 35       	cpi	r22, 0x50	; 80
    16ca:	81 f4       	brne	.+32     	; 0x16ec <_Z26Get_Back_LinetrackerY_Datav+0x16e>
    16cc:	10 92 27 03 	sts	0x0327, r1
    16d0:	80 91 28 03 	lds	r24, 0x0328
    16d4:	88 23       	and	r24, r24
    16d6:	f1 f0       	breq	.+60     	; 0x1714 <_Z26Get_Back_LinetrackerY_Datav+0x196>
    16d8:	1f c0       	rjmp	.+62     	; 0x1718 <_Z26Get_Back_LinetrackerY_Datav+0x19a>
    16da:	10 92 e8 03 	sts	0x03E8, r1
    16de:	8a e0       	ldi	r24, 0x0A	; 10
    16e0:	80 93 09 02 	sts	0x0209, r24
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	80 93 28 03 	sts	0x0328, r24
    16ea:	16 c0       	rjmp	.+44     	; 0x1718 <_Z26Get_Back_LinetrackerY_Datav+0x19a>
    16ec:	61 11       	cpse	r22, r1
    16ee:	0a c0       	rjmp	.+20     	; 0x1704 <_Z26Get_Back_LinetrackerY_Datav+0x186>
    16f0:	8a e5       	ldi	r24, 0x5A	; 90
    16f2:	80 93 e8 03 	sts	0x03E8, r24
    16f6:	80 e5       	ldi	r24, 0x50	; 80
    16f8:	80 93 09 02 	sts	0x0209, r24
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	80 93 27 03 	sts	0x0327, r24
    1702:	0a c0       	rjmp	.+20     	; 0x1718 <_Z26Get_Back_LinetrackerY_Datav+0x19a>
    1704:	80 91 28 03 	lds	r24, 0x0328
    1708:	81 11       	cpse	r24, r1
    170a:	06 c0       	rjmp	.+12     	; 0x1718 <_Z26Get_Back_LinetrackerY_Datav+0x19a>
    170c:	80 91 27 03 	lds	r24, 0x0327
    1710:	81 11       	cpse	r24, r1
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <_Z26Get_Back_LinetrackerY_Datav+0x19a>
    1714:	60 93 09 02 	sts	0x0209, r22
    1718:	80 91 e8 03 	lds	r24, 0x03E8
    171c:	03 c0       	rjmp	.+6      	; 0x1724 <_Z26Get_Back_LinetrackerY_Datav+0x1a6>
    171e:	61 11       	cpse	r22, r1
    1720:	f1 cf       	rjmp	.-30     	; 0x1704 <_Z26Get_Back_LinetrackerY_Datav+0x186>
    1722:	db cf       	rjmp	.-74     	; 0x16da <_Z26Get_Back_LinetrackerY_Datav+0x15c>
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	1f 91       	pop	r17
    172a:	0f 91       	pop	r16
    172c:	ff 90       	pop	r15
    172e:	ef 90       	pop	r14
    1730:	df 90       	pop	r13
    1732:	cf 90       	pop	r12
    1734:	bf 90       	pop	r11
    1736:	af 90       	pop	r10
    1738:	08 95       	ret

0000173a <_Z32Calculate_Front_LinetrackerY_Pidv>:
    173a:	4f 92       	push	r4
    173c:	5f 92       	push	r5
    173e:	6f 92       	push	r6
    1740:	7f 92       	push	r7
    1742:	8f 92       	push	r8
    1744:	9f 92       	push	r9
    1746:	af 92       	push	r10
    1748:	bf 92       	push	r11
    174a:	ef 92       	push	r14
    174c:	ff 92       	push	r15
    174e:	0f 93       	push	r16
    1750:	1f 93       	push	r17
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	80 91 16 03 	lds	r24, 0x0316
    175a:	88 23       	and	r24, r24
    175c:	59 f0       	breq	.+22     	; 0x1774 <_Z32Calculate_Front_LinetrackerY_Pidv+0x3a>
    175e:	c8 de       	rcall	.-624    	; 0x14f0 <_Z27Get_Front_LinetrackerY_Datav>
    1760:	88 23       	and	r24, r24
    1762:	41 f0       	breq	.+16     	; 0x1774 <_Z32Calculate_Front_LinetrackerY_Pidv+0x3a>
    1764:	c5 de       	rcall	.-630    	; 0x14f0 <_Z27Get_Front_LinetrackerY_Datav>
    1766:	e6 e0       	ldi	r30, 0x06	; 6
    1768:	f3 e0       	ldi	r31, 0x03	; 3
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	95 83       	std	Z+5, r25	; 0x05
    176e:	84 83       	std	Z+4, r24	; 0x04
    1770:	10 8a       	std	Z+16, r1	; 0x10
    1772:	c5 c0       	rjmp	.+394    	; 0x18fe <_Z32Calculate_Front_LinetrackerY_Pidv+0x1c4>
    1774:	80 91 04 02 	lds	r24, 0x0204
    1778:	88 23       	and	r24, r24
    177a:	09 f4       	brne	.+2      	; 0x177e <_Z32Calculate_Front_LinetrackerY_Pidv+0x44>
    177c:	c0 c0       	rjmp	.+384    	; 0x18fe <_Z32Calculate_Front_LinetrackerY_Pidv+0x1c4>
    177e:	80 91 55 02 	lds	r24, 0x0255
    1782:	88 23       	and	r24, r24
    1784:	09 f4       	brne	.+2      	; 0x1788 <_Z32Calculate_Front_LinetrackerY_Pidv+0x4e>
    1786:	bf c0       	rjmp	.+382    	; 0x1906 <_Z32Calculate_Front_LinetrackerY_Pidv+0x1cc>
    1788:	b3 de       	rcall	.-666    	; 0x14f0 <_Z27Get_Front_LinetrackerY_Datav>
    178a:	e8 2e       	mov	r14, r24
    178c:	f1 2c       	mov	r15, r1
    178e:	c6 e0       	ldi	r28, 0x06	; 6
    1790:	d3 e0       	ldi	r29, 0x03	; 3
    1792:	f9 82       	std	Y+1, r15	; 0x01
    1794:	e8 82       	st	Y, r14
    1796:	0e 85       	ldd	r16, Y+14	; 0x0e
    1798:	1f 85       	ldd	r17, Y+15	; 0x0f
    179a:	0e 19       	sub	r16, r14
    179c:	1f 09       	sbc	r17, r15
    179e:	1b 83       	std	Y+3, r17	; 0x03
    17a0:	0a 83       	std	Y+2, r16	; 0x02
    17a2:	b8 01       	movw	r22, r16
    17a4:	01 2e       	mov	r0, r17
    17a6:	00 0c       	add	r0, r0
    17a8:	88 0b       	sbc	r24, r24
    17aa:	99 0b       	sbc	r25, r25
    17ac:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__floatsisf>
    17b0:	4b 01       	movw	r8, r22
    17b2:	5c 01       	movw	r10, r24
    17b4:	29 8d       	ldd	r18, Y+25	; 0x19
    17b6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    17b8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    17ba:	5c 8d       	ldd	r21, Y+28	; 0x1c
    17bc:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
    17c0:	2a 85       	ldd	r18, Y+10	; 0x0a
    17c2:	3b 85       	ldd	r19, Y+11	; 0x0b
    17c4:	4c 85       	ldd	r20, Y+12	; 0x0c
    17c6:	5d 85       	ldd	r21, Y+13	; 0x0d
    17c8:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
    17cc:	2b 01       	movw	r4, r22
    17ce:	3c 01       	movw	r6, r24
    17d0:	6a 87       	std	Y+10, r22	; 0x0a
    17d2:	7b 87       	std	Y+11, r23	; 0x0b
    17d4:	8c 87       	std	Y+12, r24	; 0x0c
    17d6:	9d 87       	std	Y+13, r25	; 0x0d
    17d8:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
    17dc:	9b 01       	movw	r18, r22
    17de:	77 23       	and	r23, r23
    17e0:	24 f4       	brge	.+8      	; 0x17ea <_Z32Calculate_Front_LinetrackerY_Pidv+0xb0>
    17e2:	22 27       	eor	r18, r18
    17e4:	33 27       	eor	r19, r19
    17e6:	26 1b       	sub	r18, r22
    17e8:	37 0b       	sbc	r19, r23
    17ea:	26 30       	cpi	r18, 0x06	; 6
    17ec:	31 05       	cpc	r19, r1
    17ee:	5c f1       	brlt	.+86     	; 0x1846 <_Z32Calculate_Front_LinetrackerY_Pidv+0x10c>
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	a9 01       	movw	r20, r18
    17f6:	c3 01       	movw	r24, r6
    17f8:	b2 01       	movw	r22, r4
    17fa:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__gesf2>
    17fe:	18 16       	cp	r1, r24
    1800:	6c f4       	brge	.+26     	; 0x181c <_Z32Calculate_Front_LinetrackerY_Pidv+0xe2>
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a0 ea       	ldi	r26, 0xA0	; 160
    1808:	b0 e4       	ldi	r27, 0x40	; 64
    180a:	80 93 10 03 	sts	0x0310, r24
    180e:	90 93 11 03 	sts	0x0311, r25
    1812:	a0 93 12 03 	sts	0x0312, r26
    1816:	b0 93 13 03 	sts	0x0313, r27
    181a:	15 c0       	rjmp	.+42     	; 0x1846 <_Z32Calculate_Front_LinetrackerY_Pidv+0x10c>
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	a9 01       	movw	r20, r18
    1822:	c3 01       	movw	r24, r6
    1824:	b2 01       	movw	r22, r4
    1826:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <__cmpsf2>
    182a:	88 23       	and	r24, r24
    182c:	64 f4       	brge	.+24     	; 0x1846 <_Z32Calculate_Front_LinetrackerY_Pidv+0x10c>
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	a0 ea       	ldi	r26, 0xA0	; 160
    1834:	b0 ec       	ldi	r27, 0xC0	; 192
    1836:	80 93 10 03 	sts	0x0310, r24
    183a:	90 93 11 03 	sts	0x0311, r25
    183e:	a0 93 12 03 	sts	0x0312, r26
    1842:	b0 93 13 03 	sts	0x0313, r27
    1846:	01 2b       	or	r16, r17
    1848:	49 f4       	brne	.+18     	; 0x185c <_Z32Calculate_Front_LinetrackerY_Pidv+0x122>
    184a:	e6 e0       	ldi	r30, 0x06	; 6
    184c:	f3 e0       	ldi	r31, 0x03	; 3
    184e:	12 86       	std	Z+10, r1	; 0x0a
    1850:	13 86       	std	Z+11, r1	; 0x0b
    1852:	14 86       	std	Z+12, r1	; 0x0c
    1854:	15 86       	std	Z+13, r1	; 0x0d
    1856:	17 82       	std	Z+7, r1	; 0x07
    1858:	16 82       	std	Z+6, r1	; 0x06
    185a:	2d c0       	rjmp	.+90     	; 0x18b6 <_Z32Calculate_Front_LinetrackerY_Pidv+0x17c>
    185c:	c6 e0       	ldi	r28, 0x06	; 6
    185e:	d3 e0       	ldi	r29, 0x03	; 3
    1860:	2d 89       	ldd	r18, Y+21	; 0x15
    1862:	3e 89       	ldd	r19, Y+22	; 0x16
    1864:	4f 89       	ldd	r20, Y+23	; 0x17
    1866:	58 8d       	ldd	r21, Y+24	; 0x18
    1868:	c5 01       	movw	r24, r10
    186a:	b4 01       	movw	r22, r8
    186c:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
    1870:	2a 85       	ldd	r18, Y+10	; 0x0a
    1872:	3b 85       	ldd	r19, Y+11	; 0x0b
    1874:	4c 85       	ldd	r20, Y+12	; 0x0c
    1876:	5d 85       	ldd	r21, Y+13	; 0x0d
    1878:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
    187c:	4b 01       	movw	r8, r22
    187e:	5c 01       	movw	r10, r24
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	9d 81       	ldd	r25, Y+5	; 0x05
    1884:	97 01       	movw	r18, r14
    1886:	28 1b       	sub	r18, r24
    1888:	39 0b       	sbc	r19, r25
    188a:	b9 01       	movw	r22, r18
    188c:	33 0f       	add	r19, r19
    188e:	88 0b       	sbc	r24, r24
    1890:	99 0b       	sbc	r25, r25
    1892:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__floatsisf>
    1896:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1898:	3e 8d       	ldd	r19, Y+30	; 0x1e
    189a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    189c:	58 a1       	ldd	r21, Y+32	; 0x20
    189e:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
    18a2:	9b 01       	movw	r18, r22
    18a4:	ac 01       	movw	r20, r24
    18a6:	c5 01       	movw	r24, r10
    18a8:	b4 01       	movw	r22, r8
    18aa:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <__subsf3>
    18ae:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
    18b2:	7f 83       	std	Y+7, r23	; 0x07
    18b4:	6e 83       	std	Y+6, r22	; 0x06
    18b6:	e6 e0       	ldi	r30, 0x06	; 6
    18b8:	f3 e0       	ldi	r31, 0x03	; 3
    18ba:	80 81       	ld	r24, Z
    18bc:	91 81       	ldd	r25, Z+1	; 0x01
    18be:	95 83       	std	Z+5, r25	; 0x05
    18c0:	84 83       	std	Z+4, r24	; 0x04
    18c2:	86 81       	ldd	r24, Z+6	; 0x06
    18c4:	97 81       	ldd	r25, Z+7	; 0x07
    18c6:	9c 01       	movw	r18, r24
    18c8:	99 23       	and	r25, r25
    18ca:	24 f4       	brge	.+8      	; 0x18d4 <_Z32Calculate_Front_LinetrackerY_Pidv+0x19a>
    18cc:	22 27       	eor	r18, r18
    18ce:	33 27       	eor	r19, r19
    18d0:	28 1b       	sub	r18, r24
    18d2:	39 0b       	sbc	r19, r25
    18d4:	21 35       	cpi	r18, 0x51	; 81
    18d6:	31 05       	cpc	r19, r1
    18d8:	84 f0       	brlt	.+32     	; 0x18fa <_Z32Calculate_Front_LinetrackerY_Pidv+0x1c0>
    18da:	18 16       	cp	r1, r24
    18dc:	19 06       	cpc	r1, r25
    18de:	3c f4       	brge	.+14     	; 0x18ee <_Z32Calculate_Front_LinetrackerY_Pidv+0x1b4>
    18e0:	80 e5       	ldi	r24, 0x50	; 80
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	90 93 0d 03 	sts	0x030D, r25
    18e8:	80 93 0c 03 	sts	0x030C, r24
    18ec:	06 c0       	rjmp	.+12     	; 0x18fa <_Z32Calculate_Front_LinetrackerY_Pidv+0x1c0>
    18ee:	80 eb       	ldi	r24, 0xB0	; 176
    18f0:	9f ef       	ldi	r25, 0xFF	; 255
    18f2:	90 93 0d 03 	sts	0x030D, r25
    18f6:	80 93 0c 03 	sts	0x030C, r24
    18fa:	10 92 03 02 	sts	0x0203, r1
    18fe:	80 91 55 02 	lds	r24, 0x0255
    1902:	81 11       	cpse	r24, r1
    1904:	04 c0       	rjmp	.+8      	; 0x190e <_Z32Calculate_Front_LinetrackerY_Pidv+0x1d4>
    1906:	10 92 0d 03 	sts	0x030D, r1
    190a:	10 92 0c 03 	sts	0x030C, r1
    190e:	df 91       	pop	r29
    1910:	cf 91       	pop	r28
    1912:	1f 91       	pop	r17
    1914:	0f 91       	pop	r16
    1916:	ff 90       	pop	r15
    1918:	ef 90       	pop	r14
    191a:	bf 90       	pop	r11
    191c:	af 90       	pop	r10
    191e:	9f 90       	pop	r9
    1920:	8f 90       	pop	r8
    1922:	7f 90       	pop	r7
    1924:	6f 90       	pop	r6
    1926:	5f 90       	pop	r5
    1928:	4f 90       	pop	r4
    192a:	08 95       	ret

0000192c <_Z31Calculate_Back_LinetrackerY_Pidv>:
    192c:	4f 92       	push	r4
    192e:	5f 92       	push	r5
    1930:	6f 92       	push	r6
    1932:	7f 92       	push	r7
    1934:	8f 92       	push	r8
    1936:	9f 92       	push	r9
    1938:	af 92       	push	r10
    193a:	bf 92       	push	r11
    193c:	ef 92       	push	r14
    193e:	ff 92       	push	r15
    1940:	0f 93       	push	r16
    1942:	1f 93       	push	r17
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	80 91 f5 02 	lds	r24, 0x02F5
    194c:	88 23       	and	r24, r24
    194e:	51 f0       	breq	.+20     	; 0x1964 <_Z31Calculate_Back_LinetrackerY_Pidv+0x38>
    1950:	16 de       	rcall	.-980    	; 0x157e <_Z26Get_Back_LinetrackerY_Datav>
    1952:	88 23       	and	r24, r24
    1954:	39 f0       	breq	.+14     	; 0x1964 <_Z31Calculate_Back_LinetrackerY_Pidv+0x38>
    1956:	13 de       	rcall	.-986    	; 0x157e <_Z26Get_Back_LinetrackerY_Datav>
    1958:	e5 ee       	ldi	r30, 0xE5	; 229
    195a:	f2 e0       	ldi	r31, 0x02	; 2
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	95 83       	std	Z+5, r25	; 0x05
    1960:	84 83       	std	Z+4, r24	; 0x04
    1962:	10 8a       	std	Z+16, r1	; 0x10
    1964:	80 91 04 02 	lds	r24, 0x0204
    1968:	88 23       	and	r24, r24
    196a:	09 f4       	brne	.+2      	; 0x196e <_Z31Calculate_Back_LinetrackerY_Pidv+0x42>
    196c:	c0 c0       	rjmp	.+384    	; 0x1aee <_Z31Calculate_Back_LinetrackerY_Pidv+0x1c2>
    196e:	80 91 55 02 	lds	r24, 0x0255
    1972:	88 23       	and	r24, r24
    1974:	09 f4       	brne	.+2      	; 0x1978 <_Z31Calculate_Back_LinetrackerY_Pidv+0x4c>
    1976:	bf c0       	rjmp	.+382    	; 0x1af6 <_Z31Calculate_Back_LinetrackerY_Pidv+0x1ca>
    1978:	02 de       	rcall	.-1020   	; 0x157e <_Z26Get_Back_LinetrackerY_Datav>
    197a:	e8 2e       	mov	r14, r24
    197c:	f1 2c       	mov	r15, r1
    197e:	c5 ee       	ldi	r28, 0xE5	; 229
    1980:	d2 e0       	ldi	r29, 0x02	; 2
    1982:	f9 82       	std	Y+1, r15	; 0x01
    1984:	e8 82       	st	Y, r14
    1986:	0e 85       	ldd	r16, Y+14	; 0x0e
    1988:	1f 85       	ldd	r17, Y+15	; 0x0f
    198a:	0e 19       	sub	r16, r14
    198c:	1f 09       	sbc	r17, r15
    198e:	1b 83       	std	Y+3, r17	; 0x03
    1990:	0a 83       	std	Y+2, r16	; 0x02
    1992:	b8 01       	movw	r22, r16
    1994:	01 2e       	mov	r0, r17
    1996:	00 0c       	add	r0, r0
    1998:	88 0b       	sbc	r24, r24
    199a:	99 0b       	sbc	r25, r25
    199c:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__floatsisf>
    19a0:	4b 01       	movw	r8, r22
    19a2:	5c 01       	movw	r10, r24
    19a4:	29 8d       	ldd	r18, Y+25	; 0x19
    19a6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    19a8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    19aa:	5c 8d       	ldd	r21, Y+28	; 0x1c
    19ac:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
    19b0:	2a 85       	ldd	r18, Y+10	; 0x0a
    19b2:	3b 85       	ldd	r19, Y+11	; 0x0b
    19b4:	4c 85       	ldd	r20, Y+12	; 0x0c
    19b6:	5d 85       	ldd	r21, Y+13	; 0x0d
    19b8:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
    19bc:	2b 01       	movw	r4, r22
    19be:	3c 01       	movw	r6, r24
    19c0:	6a 87       	std	Y+10, r22	; 0x0a
    19c2:	7b 87       	std	Y+11, r23	; 0x0b
    19c4:	8c 87       	std	Y+12, r24	; 0x0c
    19c6:	9d 87       	std	Y+13, r25	; 0x0d
    19c8:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
    19cc:	9b 01       	movw	r18, r22
    19ce:	77 23       	and	r23, r23
    19d0:	24 f4       	brge	.+8      	; 0x19da <_Z31Calculate_Back_LinetrackerY_Pidv+0xae>
    19d2:	22 27       	eor	r18, r18
    19d4:	33 27       	eor	r19, r19
    19d6:	26 1b       	sub	r18, r22
    19d8:	37 0b       	sbc	r19, r23
    19da:	26 30       	cpi	r18, 0x06	; 6
    19dc:	31 05       	cpc	r19, r1
    19de:	5c f1       	brlt	.+86     	; 0x1a36 <_Z31Calculate_Back_LinetrackerY_Pidv+0x10a>
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	a9 01       	movw	r20, r18
    19e6:	c3 01       	movw	r24, r6
    19e8:	b2 01       	movw	r22, r4
    19ea:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__gesf2>
    19ee:	18 16       	cp	r1, r24
    19f0:	6c f4       	brge	.+26     	; 0x1a0c <_Z31Calculate_Back_LinetrackerY_Pidv+0xe0>
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	a0 ea       	ldi	r26, 0xA0	; 160
    19f8:	b0 e4       	ldi	r27, 0x40	; 64
    19fa:	80 93 ef 02 	sts	0x02EF, r24
    19fe:	90 93 f0 02 	sts	0x02F0, r25
    1a02:	a0 93 f1 02 	sts	0x02F1, r26
    1a06:	b0 93 f2 02 	sts	0x02F2, r27
    1a0a:	15 c0       	rjmp	.+42     	; 0x1a36 <_Z31Calculate_Back_LinetrackerY_Pidv+0x10a>
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	a9 01       	movw	r20, r18
    1a12:	c3 01       	movw	r24, r6
    1a14:	b2 01       	movw	r22, r4
    1a16:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <__cmpsf2>
    1a1a:	88 23       	and	r24, r24
    1a1c:	64 f4       	brge	.+24     	; 0x1a36 <_Z31Calculate_Back_LinetrackerY_Pidv+0x10a>
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	a0 ea       	ldi	r26, 0xA0	; 160
    1a24:	b0 ec       	ldi	r27, 0xC0	; 192
    1a26:	80 93 ef 02 	sts	0x02EF, r24
    1a2a:	90 93 f0 02 	sts	0x02F0, r25
    1a2e:	a0 93 f1 02 	sts	0x02F1, r26
    1a32:	b0 93 f2 02 	sts	0x02F2, r27
    1a36:	01 2b       	or	r16, r17
    1a38:	49 f4       	brne	.+18     	; 0x1a4c <_Z31Calculate_Back_LinetrackerY_Pidv+0x120>
    1a3a:	e5 ee       	ldi	r30, 0xE5	; 229
    1a3c:	f2 e0       	ldi	r31, 0x02	; 2
    1a3e:	12 86       	std	Z+10, r1	; 0x0a
    1a40:	13 86       	std	Z+11, r1	; 0x0b
    1a42:	14 86       	std	Z+12, r1	; 0x0c
    1a44:	15 86       	std	Z+13, r1	; 0x0d
    1a46:	17 82       	std	Z+7, r1	; 0x07
    1a48:	16 82       	std	Z+6, r1	; 0x06
    1a4a:	2d c0       	rjmp	.+90     	; 0x1aa6 <_Z31Calculate_Back_LinetrackerY_Pidv+0x17a>
    1a4c:	c5 ee       	ldi	r28, 0xE5	; 229
    1a4e:	d2 e0       	ldi	r29, 0x02	; 2
    1a50:	2d 89       	ldd	r18, Y+21	; 0x15
    1a52:	3e 89       	ldd	r19, Y+22	; 0x16
    1a54:	4f 89       	ldd	r20, Y+23	; 0x17
    1a56:	58 8d       	ldd	r21, Y+24	; 0x18
    1a58:	c5 01       	movw	r24, r10
    1a5a:	b4 01       	movw	r22, r8
    1a5c:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
    1a60:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a62:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a64:	4c 85       	ldd	r20, Y+12	; 0x0c
    1a66:	5d 85       	ldd	r21, Y+13	; 0x0d
    1a68:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
    1a6c:	4b 01       	movw	r8, r22
    1a6e:	5c 01       	movw	r10, r24
    1a70:	8c 81       	ldd	r24, Y+4	; 0x04
    1a72:	9d 81       	ldd	r25, Y+5	; 0x05
    1a74:	97 01       	movw	r18, r14
    1a76:	28 1b       	sub	r18, r24
    1a78:	39 0b       	sbc	r19, r25
    1a7a:	b9 01       	movw	r22, r18
    1a7c:	33 0f       	add	r19, r19
    1a7e:	88 0b       	sbc	r24, r24
    1a80:	99 0b       	sbc	r25, r25
    1a82:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__floatsisf>
    1a86:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1a88:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1a8a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1a8c:	58 a1       	ldd	r21, Y+32	; 0x20
    1a8e:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
    1a92:	9b 01       	movw	r18, r22
    1a94:	ac 01       	movw	r20, r24
    1a96:	c5 01       	movw	r24, r10
    1a98:	b4 01       	movw	r22, r8
    1a9a:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <__subsf3>
    1a9e:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
    1aa2:	7f 83       	std	Y+7, r23	; 0x07
    1aa4:	6e 83       	std	Y+6, r22	; 0x06
    1aa6:	e5 ee       	ldi	r30, 0xE5	; 229
    1aa8:	f2 e0       	ldi	r31, 0x02	; 2
    1aaa:	80 81       	ld	r24, Z
    1aac:	91 81       	ldd	r25, Z+1	; 0x01
    1aae:	95 83       	std	Z+5, r25	; 0x05
    1ab0:	84 83       	std	Z+4, r24	; 0x04
    1ab2:	86 81       	ldd	r24, Z+6	; 0x06
    1ab4:	97 81       	ldd	r25, Z+7	; 0x07
    1ab6:	9c 01       	movw	r18, r24
    1ab8:	99 23       	and	r25, r25
    1aba:	24 f4       	brge	.+8      	; 0x1ac4 <_Z31Calculate_Back_LinetrackerY_Pidv+0x198>
    1abc:	22 27       	eor	r18, r18
    1abe:	33 27       	eor	r19, r19
    1ac0:	28 1b       	sub	r18, r24
    1ac2:	39 0b       	sbc	r19, r25
    1ac4:	21 35       	cpi	r18, 0x51	; 81
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	84 f0       	brlt	.+32     	; 0x1aea <_Z31Calculate_Back_LinetrackerY_Pidv+0x1be>
    1aca:	18 16       	cp	r1, r24
    1acc:	19 06       	cpc	r1, r25
    1ace:	3c f4       	brge	.+14     	; 0x1ade <_Z31Calculate_Back_LinetrackerY_Pidv+0x1b2>
    1ad0:	80 e5       	ldi	r24, 0x50	; 80
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	90 93 ec 02 	sts	0x02EC, r25
    1ad8:	80 93 eb 02 	sts	0x02EB, r24
    1adc:	06 c0       	rjmp	.+12     	; 0x1aea <_Z31Calculate_Back_LinetrackerY_Pidv+0x1be>
    1ade:	80 eb       	ldi	r24, 0xB0	; 176
    1ae0:	9f ef       	ldi	r25, 0xFF	; 255
    1ae2:	90 93 ec 02 	sts	0x02EC, r25
    1ae6:	80 93 eb 02 	sts	0x02EB, r24
    1aea:	10 92 04 02 	sts	0x0204, r1
    1aee:	80 91 55 02 	lds	r24, 0x0255
    1af2:	81 11       	cpse	r24, r1
    1af4:	04 c0       	rjmp	.+8      	; 0x1afe <_Z31Calculate_Back_LinetrackerY_Pidv+0x1d2>
    1af6:	10 92 ec 02 	sts	0x02EC, r1
    1afa:	10 92 eb 02 	sts	0x02EB, r1
    1afe:	df 91       	pop	r29
    1b00:	cf 91       	pop	r28
    1b02:	1f 91       	pop	r17
    1b04:	0f 91       	pop	r16
    1b06:	ff 90       	pop	r15
    1b08:	ef 90       	pop	r14
    1b0a:	bf 90       	pop	r11
    1b0c:	af 90       	pop	r10
    1b0e:	9f 90       	pop	r9
    1b10:	8f 90       	pop	r8
    1b12:	7f 90       	pop	r7
    1b14:	6f 90       	pop	r6
    1b16:	5f 90       	pop	r5
    1b18:	4f 90       	pop	r4
    1b1a:	08 95       	ret

00001b1c <_Z18Calculate_Velocityv>:
    1b1c:	80 91 0c 02 	lds	r24, 0x020C
    1b20:	81 11       	cpse	r24, r1
    1b22:	08 c0       	rjmp	.+16     	; 0x1b34 <_Z18Calculate_Velocityv+0x18>
    1b24:	80 91 0b 02 	lds	r24, 0x020B
    1b28:	82 30       	cpi	r24, 0x02	; 2
    1b2a:	71 f0       	breq	.+28     	; 0x1b48 <_Z18Calculate_Velocityv+0x2c>
    1b2c:	83 30       	cpi	r24, 0x03	; 3
    1b2e:	71 f4       	brne	.+28     	; 0x1b4c <_Z18Calculate_Velocityv+0x30>
    1b30:	a1 e0       	ldi	r26, 0x01	; 1
    1b32:	13 c0       	rjmp	.+38     	; 0x1b5a <_Z18Calculate_Velocityv+0x3e>
    1b34:	81 30       	cpi	r24, 0x01	; 1
    1b36:	61 f4       	brne	.+24     	; 0x1b50 <_Z18Calculate_Velocityv+0x34>
    1b38:	80 91 0b 02 	lds	r24, 0x020B
    1b3c:	82 30       	cpi	r24, 0x02	; 2
    1b3e:	51 f0       	breq	.+20     	; 0x1b54 <_Z18Calculate_Velocityv+0x38>
    1b40:	83 30       	cpi	r24, 0x03	; 3
    1b42:	51 f4       	brne	.+20     	; 0x1b58 <_Z18Calculate_Velocityv+0x3c>
    1b44:	a3 e0       	ldi	r26, 0x03	; 3
    1b46:	09 c0       	rjmp	.+18     	; 0x1b5a <_Z18Calculate_Velocityv+0x3e>
    1b48:	a0 e0       	ldi	r26, 0x00	; 0
    1b4a:	07 c0       	rjmp	.+14     	; 0x1b5a <_Z18Calculate_Velocityv+0x3e>
    1b4c:	a4 e0       	ldi	r26, 0x04	; 4
    1b4e:	05 c0       	rjmp	.+10     	; 0x1b5a <_Z18Calculate_Velocityv+0x3e>
    1b50:	a4 e0       	ldi	r26, 0x04	; 4
    1b52:	03 c0       	rjmp	.+6      	; 0x1b5a <_Z18Calculate_Velocityv+0x3e>
    1b54:	a2 e0       	ldi	r26, 0x02	; 2
    1b56:	01 c0       	rjmp	.+2      	; 0x1b5a <_Z18Calculate_Velocityv+0x3e>
    1b58:	a4 e0       	ldi	r26, 0x04	; 4
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	aa 0f       	add	r26, r26
    1b5e:	bb 1f       	adc	r27, r27
    1b60:	aa 0f       	add	r26, r26
    1b62:	bb 1f       	adc	r27, r27
    1b64:	a3 5f       	subi	r26, 0xF3	; 243
    1b66:	bd 4f       	sbci	r27, 0xFD	; 253
    1b68:	eb ef       	ldi	r30, 0xFB	; 251
    1b6a:	f3 e0       	ldi	r31, 0x03	; 3
    1b6c:	63 e0       	ldi	r22, 0x03	; 3
    1b6e:	74 e0       	ldi	r23, 0x04	; 4
    1b70:	4d 91       	ld	r20, X+
    1b72:	20 81       	ld	r18, Z
    1b74:	31 81       	ldd	r19, Z+1	; 0x01
    1b76:	42 03       	mulsu	r20, r18
    1b78:	c0 01       	movw	r24, r0
    1b7a:	43 9f       	mul	r20, r19
    1b7c:	90 0d       	add	r25, r0
    1b7e:	11 24       	eor	r1, r1
    1b80:	81 93       	st	Z+, r24
    1b82:	91 93       	st	Z+, r25
    1b84:	e6 17       	cp	r30, r22
    1b86:	f7 07       	cpc	r31, r23
    1b88:	99 f7       	brne	.-26     	; 0x1b70 <_Z18Calculate_Velocityv+0x54>
    1b8a:	08 95       	ret

00001b8c <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>:
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29
    1b90:	ec 01       	movw	r28, r24
    1b92:	10 92 21 02 	sts	0x0221, r1
    1b96:	d1 dd       	rcall	.-1118   	; 0x173a <_Z32Calculate_Front_LinetrackerY_Pidv>
    1b98:	c9 de       	rcall	.-622    	; 0x192c <_Z31Calculate_Back_LinetrackerY_Pidv>
    1b9a:	80 91 0b 02 	lds	r24, 0x020B
    1b9e:	82 30       	cpi	r24, 0x02	; 2
    1ba0:	f1 f4       	brne	.+60     	; 0x1bde <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti+0x52>
    1ba2:	80 91 0c 03 	lds	r24, 0x030C
    1ba6:	90 91 0d 03 	lds	r25, 0x030D
    1baa:	eb ef       	ldi	r30, 0xFB	; 251
    1bac:	f3 e0       	ldi	r31, 0x03	; 3
    1bae:	9c 01       	movw	r18, r24
    1bb0:	2c 0f       	add	r18, r28
    1bb2:	3d 1f       	adc	r19, r29
    1bb4:	31 83       	std	Z+1, r19	; 0x01
    1bb6:	20 83       	st	Z, r18
    1bb8:	9e 01       	movw	r18, r28
    1bba:	28 1b       	sub	r18, r24
    1bbc:	39 0b       	sbc	r19, r25
    1bbe:	33 83       	std	Z+3, r19	; 0x03
    1bc0:	22 83       	std	Z+2, r18	; 0x02
    1bc2:	80 91 eb 02 	lds	r24, 0x02EB
    1bc6:	90 91 ec 02 	lds	r25, 0x02EC
    1bca:	9c 01       	movw	r18, r24
    1bcc:	2c 0f       	add	r18, r28
    1bce:	3d 1f       	adc	r19, r29
    1bd0:	35 83       	std	Z+5, r19	; 0x05
    1bd2:	24 83       	std	Z+4, r18	; 0x04
    1bd4:	c8 1b       	sub	r28, r24
    1bd6:	d9 0b       	sbc	r29, r25
    1bd8:	d7 83       	std	Z+7, r29	; 0x07
    1bda:	c6 83       	std	Z+6, r28	; 0x06
    1bdc:	1c c0       	rjmp	.+56     	; 0x1c16 <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti+0x8a>
    1bde:	80 91 0c 03 	lds	r24, 0x030C
    1be2:	90 91 0d 03 	lds	r25, 0x030D
    1be6:	eb ef       	ldi	r30, 0xFB	; 251
    1be8:	f3 e0       	ldi	r31, 0x03	; 3
    1bea:	9e 01       	movw	r18, r28
    1bec:	28 1b       	sub	r18, r24
    1bee:	39 0b       	sbc	r19, r25
    1bf0:	31 83       	std	Z+1, r19	; 0x01
    1bf2:	20 83       	st	Z, r18
    1bf4:	8c 0f       	add	r24, r28
    1bf6:	9d 1f       	adc	r25, r29
    1bf8:	93 83       	std	Z+3, r25	; 0x03
    1bfa:	82 83       	std	Z+2, r24	; 0x02
    1bfc:	80 91 eb 02 	lds	r24, 0x02EB
    1c00:	90 91 ec 02 	lds	r25, 0x02EC
    1c04:	9e 01       	movw	r18, r28
    1c06:	28 1b       	sub	r18, r24
    1c08:	39 0b       	sbc	r19, r25
    1c0a:	35 83       	std	Z+5, r19	; 0x05
    1c0c:	24 83       	std	Z+4, r18	; 0x04
    1c0e:	c8 0f       	add	r28, r24
    1c10:	d9 1f       	adc	r29, r25
    1c12:	d7 83       	std	Z+7, r29	; 0x07
    1c14:	c6 83       	std	Z+6, r28	; 0x06
    1c16:	82 df       	rcall	.-252    	; 0x1b1c <_Z18Calculate_Velocityv>
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	08 95       	ret

00001c1e <_Z15movYForwardSlowj>:
    1c1e:	0f 93       	push	r16
    1c20:	1f 93       	push	r17
    1c22:	e6 e0       	ldi	r30, 0x06	; 6
    1c24:	f3 e0       	ldi	r31, 0x03	; 3
    1c26:	0a e9       	ldi	r16, 0x9A	; 154
    1c28:	19 e9       	ldi	r17, 0x99	; 153
    1c2a:	29 e1       	ldi	r18, 0x19	; 25
    1c2c:	3f e3       	ldi	r19, 0x3F	; 63
    1c2e:	05 8b       	std	Z+21, r16	; 0x15
    1c30:	16 8b       	std	Z+22, r17	; 0x16
    1c32:	27 8b       	std	Z+23, r18	; 0x17
    1c34:	30 8f       	std	Z+24, r19	; 0x18
    1c36:	11 8e       	std	Z+25, r1	; 0x19
    1c38:	12 8e       	std	Z+26, r1	; 0x1a
    1c3a:	13 8e       	std	Z+27, r1	; 0x1b
    1c3c:	14 8e       	std	Z+28, r1	; 0x1c
    1c3e:	40 e0       	ldi	r20, 0x00	; 0
    1c40:	50 e0       	ldi	r21, 0x00	; 0
    1c42:	60 e8       	ldi	r22, 0x80	; 128
    1c44:	71 e4       	ldi	r23, 0x41	; 65
    1c46:	45 8f       	std	Z+29, r20	; 0x1d
    1c48:	56 8f       	std	Z+30, r21	; 0x1e
    1c4a:	67 8f       	std	Z+31, r22	; 0x1f
    1c4c:	70 a3       	std	Z+32, r23	; 0x20
    1c4e:	e5 ee       	ldi	r30, 0xE5	; 229
    1c50:	f2 e0       	ldi	r31, 0x02	; 2
    1c52:	05 8b       	std	Z+21, r16	; 0x15
    1c54:	16 8b       	std	Z+22, r17	; 0x16
    1c56:	27 8b       	std	Z+23, r18	; 0x17
    1c58:	30 8f       	std	Z+24, r19	; 0x18
    1c5a:	11 8e       	std	Z+25, r1	; 0x19
    1c5c:	12 8e       	std	Z+26, r1	; 0x1a
    1c5e:	13 8e       	std	Z+27, r1	; 0x1b
    1c60:	14 8e       	std	Z+28, r1	; 0x1c
    1c62:	45 8f       	std	Z+29, r20	; 0x1d
    1c64:	56 8f       	std	Z+30, r21	; 0x1e
    1c66:	67 8f       	std	Z+31, r22	; 0x1f
    1c68:	70 a3       	std	Z+32, r23	; 0x20
    1c6a:	21 e0       	ldi	r18, 0x01	; 1
    1c6c:	20 93 0c 02 	sts	0x020C, r18
    1c70:	22 e0       	ldi	r18, 0x02	; 2
    1c72:	20 93 0b 02 	sts	0x020B, r18
    1c76:	8a df       	rcall	.-236    	; 0x1b8c <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>
    1c78:	1f 91       	pop	r17
    1c7a:	0f 91       	pop	r16
    1c7c:	08 95       	ret

00001c7e <_Z10Move_Yaxisiij>:
    1c7e:	2f 92       	push	r2
    1c80:	3f 92       	push	r3
    1c82:	4f 92       	push	r4
    1c84:	5f 92       	push	r5
    1c86:	6f 92       	push	r6
    1c88:	7f 92       	push	r7
    1c8a:	8f 92       	push	r8
    1c8c:	9f 92       	push	r9
    1c8e:	af 92       	push	r10
    1c90:	bf 92       	push	r11
    1c92:	cf 92       	push	r12
    1c94:	df 92       	push	r13
    1c96:	ef 92       	push	r14
    1c98:	ff 92       	push	r15
    1c9a:	0f 93       	push	r16
    1c9c:	1f 93       	push	r17
    1c9e:	cf 93       	push	r28
    1ca0:	df 93       	push	r29
    1ca2:	1c 01       	movw	r2, r24
    1ca4:	8b 01       	movw	r16, r22
    1ca6:	7a 01       	movw	r14, r20
    1ca8:	e6 e0       	ldi	r30, 0x06	; 6
    1caa:	f3 e0       	ldi	r31, 0x03	; 3
    1cac:	8a e9       	ldi	r24, 0x9A	; 154
    1cae:	99 e9       	ldi	r25, 0x99	; 153
    1cb0:	a9 e9       	ldi	r26, 0x99	; 153
    1cb2:	bf e3       	ldi	r27, 0x3F	; 63
    1cb4:	85 8b       	std	Z+21, r24	; 0x15
    1cb6:	96 8b       	std	Z+22, r25	; 0x16
    1cb8:	a7 8b       	std	Z+23, r26	; 0x17
    1cba:	b0 8f       	std	Z+24, r27	; 0x18
    1cbc:	11 8e       	std	Z+25, r1	; 0x19
    1cbe:	12 8e       	std	Z+26, r1	; 0x1a
    1cc0:	13 8e       	std	Z+27, r1	; 0x1b
    1cc2:	14 8e       	std	Z+28, r1	; 0x1c
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	a0 e8       	ldi	r26, 0x80	; 128
    1cca:	b1 e4       	ldi	r27, 0x41	; 65
    1ccc:	85 8f       	std	Z+29, r24	; 0x1d
    1cce:	96 8f       	std	Z+30, r25	; 0x1e
    1cd0:	a7 8f       	std	Z+31, r26	; 0x1f
    1cd2:	b0 a3       	std	Z+32, r27	; 0x20
    1cd4:	8e eb       	ldi	r24, 0xBE	; 190
    1cd6:	92 e0       	ldi	r25, 0x02	; 2
    1cd8:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    1cdc:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
    1ce0:	9b 01       	movw	r18, r22
    1ce2:	77 23       	and	r23, r23
    1ce4:	24 f4       	brge	.+8      	; 0x1cee <_Z10Move_Yaxisiij+0x70>
    1ce6:	22 27       	eor	r18, r18
    1ce8:	33 27       	eor	r19, r19
    1cea:	26 1b       	sub	r18, r22
    1cec:	37 0b       	sbc	r19, r23
    1cee:	e9 01       	movw	r28, r18
    1cf0:	30 93 f2 03 	sts	0x03F2, r19
    1cf4:	20 93 f1 03 	sts	0x03F1, r18
    1cf8:	30 92 3a 03 	sts	0x033A, r3
    1cfc:	20 92 39 03 	sts	0x0339, r2
    1d00:	80 91 00 02 	lds	r24, 0x0200
    1d04:	88 23       	and	r24, r24
    1d06:	09 f4       	brne	.+2      	; 0x1d0a <_Z10Move_Yaxisiij+0x8c>
    1d08:	10 c1       	rjmp	.+544    	; 0x1f2a <_Z10Move_Yaxisiij+0x2ac>
    1d0a:	10 92 00 02 	sts	0x0200, r1
    1d0e:	28 35       	cpi	r18, 0x58	; 88
    1d10:	82 e0       	ldi	r24, 0x02	; 2
    1d12:	38 07       	cpc	r19, r24
    1d14:	0c f4       	brge	.+2      	; 0x1d18 <_Z10Move_Yaxisiij+0x9a>
    1d16:	b3 c0       	rjmp	.+358    	; 0x1e7e <_Z10Move_Yaxisiij+0x200>
    1d18:	0f 2e       	mov	r0, r31
    1d1a:	fb e2       	ldi	r31, 0x2B	; 43
    1d1c:	cf 2e       	mov	r12, r31
    1d1e:	f3 e0       	ldi	r31, 0x03	; 3
    1d20:	df 2e       	mov	r13, r31
    1d22:	f0 2d       	mov	r31, r0
    1d24:	f6 01       	movw	r30, r12
    1d26:	31 83       	std	Z+1, r19	; 0x01
    1d28:	20 83       	st	Z, r18
    1d2a:	22 1a       	sub	r2, r18
    1d2c:	33 0a       	sbc	r3, r19
    1d2e:	33 82       	std	Z+3, r3	; 0x03
    1d30:	22 82       	std	Z+2, r2	; 0x02
    1d32:	b1 01       	movw	r22, r2
    1d34:	03 2c       	mov	r0, r3
    1d36:	00 0c       	add	r0, r0
    1d38:	88 0b       	sbc	r24, r24
    1d3a:	99 0b       	sbc	r25, r25
    1d3c:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__floatsisf>
    1d40:	2b 01       	movw	r4, r22
    1d42:	3c 01       	movw	r6, r24
    1d44:	f6 01       	movw	r30, r12
    1d46:	21 8d       	ldd	r18, Z+25	; 0x19
    1d48:	32 8d       	ldd	r19, Z+26	; 0x1a
    1d4a:	43 8d       	ldd	r20, Z+27	; 0x1b
    1d4c:	54 8d       	ldd	r21, Z+28	; 0x1c
    1d4e:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
    1d52:	f6 01       	movw	r30, r12
    1d54:	22 85       	ldd	r18, Z+10	; 0x0a
    1d56:	33 85       	ldd	r19, Z+11	; 0x0b
    1d58:	44 85       	ldd	r20, Z+12	; 0x0c
    1d5a:	55 85       	ldd	r21, Z+13	; 0x0d
    1d5c:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
    1d60:	4b 01       	movw	r8, r22
    1d62:	5c 01       	movw	r10, r24
    1d64:	f6 01       	movw	r30, r12
    1d66:	62 87       	std	Z+10, r22	; 0x0a
    1d68:	73 87       	std	Z+11, r23	; 0x0b
    1d6a:	84 87       	std	Z+12, r24	; 0x0c
    1d6c:	95 87       	std	Z+13, r25	; 0x0d
    1d6e:	80 89       	ldd	r24, Z+16	; 0x10
    1d70:	88 23       	and	r24, r24
    1d72:	19 f0       	breq	.+6      	; 0x1d7a <_Z10Move_Yaxisiij+0xfc>
    1d74:	d5 83       	std	Z+5, r29	; 0x05
    1d76:	c4 83       	std	Z+4, r28	; 0x04
    1d78:	10 8a       	std	Z+16, r1	; 0x10
    1d7a:	c5 01       	movw	r24, r10
    1d7c:	b4 01       	movw	r22, r8
    1d7e:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
    1d82:	9b 01       	movw	r18, r22
    1d84:	77 23       	and	r23, r23
    1d86:	24 f4       	brge	.+8      	; 0x1d90 <_Z10Move_Yaxisiij+0x112>
    1d88:	22 27       	eor	r18, r18
    1d8a:	33 27       	eor	r19, r19
    1d8c:	26 1b       	sub	r18, r22
    1d8e:	37 0b       	sbc	r19, r23
    1d90:	2b 30       	cpi	r18, 0x0B	; 11
    1d92:	31 05       	cpc	r19, r1
    1d94:	8c f1       	brlt	.+98     	; 0x1df8 <_Z10Move_Yaxisiij+0x17a>
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	a9 01       	movw	r20, r18
    1d9c:	c5 01       	movw	r24, r10
    1d9e:	b4 01       	movw	r22, r8
    1da0:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__gesf2>
    1da4:	18 16       	cp	r1, r24
    1da6:	6c f4       	brge	.+26     	; 0x1dc2 <_Z10Move_Yaxisiij+0x144>
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	a0 e2       	ldi	r26, 0x20	; 32
    1dae:	b1 e4       	ldi	r27, 0x41	; 65
    1db0:	80 93 35 03 	sts	0x0335, r24
    1db4:	90 93 36 03 	sts	0x0336, r25
    1db8:	a0 93 37 03 	sts	0x0337, r26
    1dbc:	b0 93 38 03 	sts	0x0338, r27
    1dc0:	1b c0       	rjmp	.+54     	; 0x1df8 <_Z10Move_Yaxisiij+0x17a>
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	a9 01       	movw	r20, r18
    1dc8:	60 91 35 03 	lds	r22, 0x0335
    1dcc:	70 91 36 03 	lds	r23, 0x0336
    1dd0:	80 91 37 03 	lds	r24, 0x0337
    1dd4:	90 91 38 03 	lds	r25, 0x0338
    1dd8:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <__cmpsf2>
    1ddc:	88 23       	and	r24, r24
    1dde:	64 f4       	brge	.+24     	; 0x1df8 <_Z10Move_Yaxisiij+0x17a>
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	a0 e2       	ldi	r26, 0x20	; 32
    1de6:	b1 ec       	ldi	r27, 0xC1	; 193
    1de8:	80 93 35 03 	sts	0x0335, r24
    1dec:	90 93 36 03 	sts	0x0336, r25
    1df0:	a0 93 37 03 	sts	0x0337, r26
    1df4:	b0 93 38 03 	sts	0x0338, r27
    1df8:	12 14       	cp	r1, r2
    1dfa:	13 04       	cpc	r1, r3
    1dfc:	bc f5       	brge	.+110    	; 0x1e6c <_Z10Move_Yaxisiij+0x1ee>
    1dfe:	0f 2e       	mov	r0, r31
    1e00:	fb e2       	ldi	r31, 0x2B	; 43
    1e02:	cf 2e       	mov	r12, r31
    1e04:	f3 e0       	ldi	r31, 0x03	; 3
    1e06:	df 2e       	mov	r13, r31
    1e08:	f0 2d       	mov	r31, r0
    1e0a:	f6 01       	movw	r30, r12
    1e0c:	25 89       	ldd	r18, Z+21	; 0x15
    1e0e:	36 89       	ldd	r19, Z+22	; 0x16
    1e10:	47 89       	ldd	r20, Z+23	; 0x17
    1e12:	50 8d       	ldd	r21, Z+24	; 0x18
    1e14:	c3 01       	movw	r24, r6
    1e16:	b2 01       	movw	r22, r4
    1e18:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
    1e1c:	f6 01       	movw	r30, r12
    1e1e:	22 85       	ldd	r18, Z+10	; 0x0a
    1e20:	33 85       	ldd	r19, Z+11	; 0x0b
    1e22:	44 85       	ldd	r20, Z+12	; 0x0c
    1e24:	55 85       	ldd	r21, Z+13	; 0x0d
    1e26:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
    1e2a:	4b 01       	movw	r8, r22
    1e2c:	5c 01       	movw	r10, r24
    1e2e:	f6 01       	movw	r30, r12
    1e30:	84 81       	ldd	r24, Z+4	; 0x04
    1e32:	95 81       	ldd	r25, Z+5	; 0x05
    1e34:	be 01       	movw	r22, r28
    1e36:	68 1b       	sub	r22, r24
    1e38:	79 0b       	sbc	r23, r25
    1e3a:	07 2e       	mov	r0, r23
    1e3c:	00 0c       	add	r0, r0
    1e3e:	88 0b       	sbc	r24, r24
    1e40:	99 0b       	sbc	r25, r25
    1e42:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__floatsisf>
    1e46:	f6 01       	movw	r30, r12
    1e48:	25 8d       	ldd	r18, Z+29	; 0x1d
    1e4a:	36 8d       	ldd	r19, Z+30	; 0x1e
    1e4c:	47 8d       	ldd	r20, Z+31	; 0x1f
    1e4e:	50 a1       	ldd	r21, Z+32	; 0x20
    1e50:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
    1e54:	9b 01       	movw	r18, r22
    1e56:	ac 01       	movw	r20, r24
    1e58:	c5 01       	movw	r24, r10
    1e5a:	b4 01       	movw	r22, r8
    1e5c:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <__subsf3>
    1e60:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
    1e64:	f6 01       	movw	r30, r12
    1e66:	77 83       	std	Z+7, r23	; 0x07
    1e68:	66 83       	std	Z+6, r22	; 0x06
    1e6a:	04 c0       	rjmp	.+8      	; 0x1e74 <_Z10Move_Yaxisiij+0x1f6>
    1e6c:	10 92 32 03 	sts	0x0332, r1
    1e70:	10 92 31 03 	sts	0x0331, r1
    1e74:	d0 93 30 03 	sts	0x0330, r29
    1e78:	c0 93 2f 03 	sts	0x032F, r28
    1e7c:	18 c0       	rjmp	.+48     	; 0x1eae <_Z10Move_Yaxisiij+0x230>
    1e7e:	b9 01       	movw	r22, r18
    1e80:	33 0f       	add	r19, r19
    1e82:	88 0b       	sbc	r24, r24
    1e84:	99 0b       	sbc	r25, r25
    1e86:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__floatsisf>
    1e8a:	2a e9       	ldi	r18, 0x9A	; 154
    1e8c:	39 e9       	ldi	r19, 0x99	; 153
    1e8e:	49 e1       	ldi	r20, 0x19	; 25
    1e90:	5e e3       	ldi	r21, 0x3E	; 62
    1e92:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e7       	ldi	r20, 0x70	; 112
    1e9c:	52 e4       	ldi	r21, 0x42	; 66
    1e9e:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__addsf3>
    1ea2:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
    1ea6:	70 93 32 03 	sts	0x0332, r23
    1eaa:	60 93 31 03 	sts	0x0331, r22
    1eae:	80 91 31 03 	lds	r24, 0x0331
    1eb2:	90 91 32 03 	lds	r25, 0x0332
    1eb6:	99 23       	and	r25, r25
    1eb8:	1c f4       	brge	.+6      	; 0x1ec0 <_Z10Move_Yaxisiij+0x242>
    1eba:	91 95       	neg	r25
    1ebc:	81 95       	neg	r24
    1ebe:	91 09       	sbc	r25, r1
    1ec0:	8e 15       	cp	r24, r14
    1ec2:	9f 05       	cpc	r25, r15
    1ec4:	20 f0       	brcs	.+8      	; 0x1ece <_Z10Move_Yaxisiij+0x250>
    1ec6:	f0 92 32 03 	sts	0x0332, r15
    1eca:	e0 92 31 03 	sts	0x0331, r14
    1ece:	80 91 31 03 	lds	r24, 0x0331
    1ed2:	90 91 32 03 	lds	r25, 0x0332
    1ed6:	43 96       	adiw	r24, 0x13	; 19
    1ed8:	87 97       	sbiw	r24, 0x27	; 39
    1eda:	30 f4       	brcc	.+12     	; 0x1ee8 <_Z10Move_Yaxisiij+0x26a>
    1edc:	84 e1       	ldi	r24, 0x14	; 20
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	90 93 32 03 	sts	0x0332, r25
    1ee4:	80 93 31 03 	sts	0x0331, r24
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	80 93 0c 02 	sts	0x020C, r24
    1eee:	02 30       	cpi	r16, 0x02	; 2
    1ef0:	11 05       	cpc	r17, r1
    1ef2:	61 f4       	brne	.+24     	; 0x1f0c <_Z10Move_Yaxisiij+0x28e>
    1ef4:	80 93 eb 03 	sts	0x03EB, r24
    1ef8:	10 92 ea 03 	sts	0x03EA, r1
    1efc:	10 92 ed 03 	sts	0x03ED, r1
    1f00:	10 92 ec 03 	sts	0x03EC, r1
    1f04:	82 e0       	ldi	r24, 0x02	; 2
    1f06:	80 93 0b 02 	sts	0x020B, r24
    1f0a:	0f c0       	rjmp	.+30     	; 0x1f2a <_Z10Move_Yaxisiij+0x2ac>
    1f0c:	03 30       	cpi	r16, 0x03	; 3
    1f0e:	11 05       	cpc	r17, r1
    1f10:	61 f4       	brne	.+24     	; 0x1f2a <_Z10Move_Yaxisiij+0x2ac>
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	80 93 ea 03 	sts	0x03EA, r24
    1f18:	10 92 eb 03 	sts	0x03EB, r1
    1f1c:	10 92 ed 03 	sts	0x03ED, r1
    1f20:	10 92 ec 03 	sts	0x03EC, r1
    1f24:	83 e0       	ldi	r24, 0x03	; 3
    1f26:	80 93 0b 02 	sts	0x020B, r24
    1f2a:	80 91 31 03 	lds	r24, 0x0331
    1f2e:	90 91 32 03 	lds	r25, 0x0332
    1f32:	2c de       	rcall	.-936    	; 0x1b8c <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	1f 91       	pop	r17
    1f3a:	0f 91       	pop	r16
    1f3c:	ff 90       	pop	r15
    1f3e:	ef 90       	pop	r14
    1f40:	df 90       	pop	r13
    1f42:	cf 90       	pop	r12
    1f44:	bf 90       	pop	r11
    1f46:	af 90       	pop	r10
    1f48:	9f 90       	pop	r9
    1f4a:	8f 90       	pop	r8
    1f4c:	7f 90       	pop	r7
    1f4e:	6f 90       	pop	r6
    1f50:	5f 90       	pop	r5
    1f52:	4f 90       	pop	r4
    1f54:	3f 90       	pop	r3
    1f56:	2f 90       	pop	r2
    1f58:	08 95       	ret

00001f5a <_Z13Hold_Positionv>:


void Hold_Position(void)
{
	_axis = Y_Axis;
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	80 93 0c 02 	sts	0x020C, r24
	_direction = Back;
    1f60:	83 e0       	ldi	r24, 0x03	; 3
    1f62:	80 93 0b 02 	sts	0x020B, r24
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    1f66:	e6 e0       	ldi	r30, 0x06	; 6
    1f68:	f3 e0       	ldi	r31, 0x03	; 3
    1f6a:	46 e6       	ldi	r20, 0x66	; 102
    1f6c:	56 e6       	ldi	r21, 0x66	; 102
    1f6e:	66 ee       	ldi	r22, 0xE6	; 230
    1f70:	7f e3       	ldi	r23, 0x3F	; 63
    1f72:	45 8b       	std	Z+21, r20	; 0x15
    1f74:	56 8b       	std	Z+22, r21	; 0x16
    1f76:	67 8b       	std	Z+23, r22	; 0x17
    1f78:	70 8f       	std	Z+24, r23	; 0x18
		ki = i;
    1f7a:	11 8e       	std	Z+25, r1	; 0x19
    1f7c:	12 8e       	std	Z+26, r1	; 0x1a
    1f7e:	13 8e       	std	Z+27, r1	; 0x1b
    1f80:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	a0 e2       	ldi	r26, 0x20	; 32
    1f88:	b1 e4       	ldi	r27, 0x41	; 65
    1f8a:	85 8f       	std	Z+29, r24	; 0x1d
    1f8c:	96 8f       	std	Z+30, r25	; 0x1e
    1f8e:	a7 8f       	std	Z+31, r26	; 0x1f
    1f90:	b0 a3       	std	Z+32, r27	; 0x20
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    1f92:	e5 ee       	ldi	r30, 0xE5	; 229
    1f94:	f2 e0       	ldi	r31, 0x02	; 2
    1f96:	45 8b       	std	Z+21, r20	; 0x15
    1f98:	56 8b       	std	Z+22, r21	; 0x16
    1f9a:	67 8b       	std	Z+23, r22	; 0x17
    1f9c:	70 8f       	std	Z+24, r23	; 0x18
		ki = i;
    1f9e:	11 8e       	std	Z+25, r1	; 0x19
    1fa0:	12 8e       	std	Z+26, r1	; 0x1a
    1fa2:	13 8e       	std	Z+27, r1	; 0x1b
    1fa4:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    1fa6:	85 8f       	std	Z+29, r24	; 0x1d
    1fa8:	96 8f       	std	Z+30, r25	; 0x1e
    1faa:	a7 8f       	std	Z+31, r26	; 0x1f
    1fac:	b0 a3       	std	Z+32, r27	; 0x20
	
	
 	FrontLinetrackerY_.setPid(1.8,0,10);
 	BackLinetrackerY_.setPid(1.8,0,10);
	
	Calculate_Motor_Differential_Velocity_With_Center_Pivot(0);
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	ec cd       	rjmp	.-1064   	; 0x1b8c <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>
    1fb4:	08 95       	ret

00001fb6 <_Z14updateZoneflagv>:
//  		if(task8)	uart0_puts("8 \n");
//  		else        uart0_puts("0 \n");

}

void updateZoneflag(void){
    1fb6:	cf 93       	push	r28
	/*if low on shuttlecock pin then shuttlecock received
	i.e if manual robot arm is extended to give shuttlecock*/
	if(!ShuttleCockGiven){
    1fb8:	80 91 e4 02 	lds	r24, 0x02E4
    1fbc:	81 11       	cpse	r24, r1
    1fbe:	1b c0       	rjmp	.+54     	; 0x1ff6 <_Z14updateZoneflagv+0x40>
		//uart0_puts("entered above \r\n");
		if(!(PINL & (1<<PL6)) &&  where == inLZ1 ){
    1fc0:	80 91 09 01 	lds	r24, 0x0109
    1fc4:	86 fd       	sbrc	r24, 6
    1fc6:	75 c0       	rjmp	.+234    	; 0x20b2 <_Z14updateZoneflagv+0xfc>
    1fc8:	80 91 d9 02 	lds	r24, 0x02D9
    1fcc:	90 91 da 02 	lds	r25, 0x02DA
    1fd0:	05 97       	sbiw	r24, 0x05	; 5
    1fd2:	09 f0       	breq	.+2      	; 0x1fd6 <_Z14updateZoneflagv+0x20>
    1fd4:	6e c0       	rjmp	.+220    	; 0x20b2 <_Z14updateZoneflagv+0xfc>
    1fd6:	5c c0       	rjmp	.+184    	; 0x2090 <_Z14updateZoneflagv+0xda>
			GoThrowingZone1 = true;
			task3 = task4 = false;
		}
		/*if low on shuttlecock pin then shuttlecock received
		i.e if manual robot arm is extended to give shuttlecock*/
		else if(!(SHUTTLECOCK_STATUSPORT & (1<<SHUTTLECOCK_STATUSPIN)) &&  where == inLZ2 && ManualInFrontOfLZ2){
    1fd8:	80 91 d9 02 	lds	r24, 0x02D9
    1fdc:	90 91 da 02 	lds	r25, 0x02DA
    1fe0:	06 97       	sbiw	r24, 0x06	; 6
    1fe2:	39 f5       	brne	.+78     	; 0x2032 <_Z14updateZoneflagv+0x7c>
    1fe4:	80 91 08 02 	lds	r24, 0x0208
    1fe8:	81 11       	cpse	r24, r1
    1fea:	68 c0       	rjmp	.+208    	; 0x20bc <_Z14updateZoneflagv+0x106>
    1fec:	22 c0       	rjmp	.+68     	; 0x2032 <_Z14updateZoneflagv+0x7c>
			ShuttleCockGiven = false;
		}
	}
	//if shuttlecock given and arm is gone send 'w' to throwing mechanism to give to gripper
	//and move robot
	if(ShuttleCockGiven && (PINL & (1<<PL6)) &&  (where == inLZ1 || where == inLZ2) ){
    1fee:	80 91 e4 02 	lds	r24, 0x02E4
    1ff2:	88 23       	and	r24, r24
    1ff4:	b1 f0       	breq	.+44     	; 0x2022 <_Z14updateZoneflagv+0x6c>
    1ff6:	80 91 09 01 	lds	r24, 0x0109
    1ffa:	86 ff       	sbrs	r24, 6
    1ffc:	12 c0       	rjmp	.+36     	; 0x2022 <_Z14updateZoneflagv+0x6c>
    1ffe:	80 91 d9 02 	lds	r24, 0x02D9
    2002:	90 91 da 02 	lds	r25, 0x02DA
    2006:	05 97       	sbiw	r24, 0x05	; 5
    2008:	31 f0       	breq	.+12     	; 0x2016 <_Z14updateZoneflagv+0x60>
    200a:	80 91 d9 02 	lds	r24, 0x02D9
    200e:	90 91 da 02 	lds	r25, 0x02DA
    2012:	06 97       	sbiw	r24, 0x06	; 6
    2014:	31 f4       	brne	.+12     	; 0x2022 <_Z14updateZoneflagv+0x6c>
		/*uart0_puts("Shuttlecock arm gone \r\n");*/
		ShuttleCockArmGone = true;
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	80 93 e2 02 	sts	0x02E2, r24
		uart3_putc('w');
    201c:	87 e7       	ldi	r24, 0x77	; 119
    201e:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <_Z10uart3_putch>
	}
	
	/*if low on golden rack pin then rack is received
	i.e if rack is received above geneva and robot is in loading zone 2*/
	if(!ShuttleCockGiven || !GoldenRackGiven){
    2022:	80 91 e4 02 	lds	r24, 0x02E4
    2026:	88 23       	and	r24, r24
    2028:	21 f0       	breq	.+8      	; 0x2032 <_Z14updateZoneflagv+0x7c>
    202a:	80 91 e3 02 	lds	r24, 0x02E3
    202e:	81 11       	cpse	r24, r1
    2030:	84 c0       	rjmp	.+264    	; 0x213a <_Z14updateZoneflagv+0x184>
		if(sendoncetorotateGeneva && !(PINL & (1<<PL6)) && !((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && !ManualInFrontOfLZ2 && where == inLZ2){
    2032:	80 91 07 02 	lds	r24, 0x0207
    2036:	88 23       	and	r24, r24
    2038:	99 f0       	breq	.+38     	; 0x2060 <_Z14updateZoneflagv+0xaa>
    203a:	80 91 09 01 	lds	r24, 0x0109
    203e:	86 fd       	sbrc	r24, 6
    2040:	0f c0       	rjmp	.+30     	; 0x2060 <_Z14updateZoneflagv+0xaa>
    2042:	80 91 09 01 	lds	r24, 0x0109
    2046:	82 fd       	sbrc	r24, 2
    2048:	0b c0       	rjmp	.+22     	; 0x2060 <_Z14updateZoneflagv+0xaa>
    204a:	80 91 08 02 	lds	r24, 0x0208
    204e:	81 11       	cpse	r24, r1
    2050:	07 c0       	rjmp	.+14     	; 0x2060 <_Z14updateZoneflagv+0xaa>
    2052:	80 91 d9 02 	lds	r24, 0x02D9
    2056:	90 91 da 02 	lds	r25, 0x02DA
    205a:	06 97       	sbiw	r24, 0x06	; 6
    205c:	09 f4       	brne	.+2      	; 0x2060 <_Z14updateZoneflagv+0xaa>
    205e:	43 c0       	rjmp	.+134    	; 0x20e6 <_Z14updateZoneflagv+0x130>
			uart3_putc('k');
			sendoncetorotateGeneva = false;
		}
		//uart0_puts("entered rack wala \r\n");
		if(((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && (where == inLZ2 ) && !ManualInFrontOfLZ2){
    2060:	80 91 09 01 	lds	r24, 0x0109
    2064:	82 ff       	sbrs	r24, 2
    2066:	62 c0       	rjmp	.+196    	; 0x212c <_Z14updateZoneflagv+0x176>
    2068:	80 91 d9 02 	lds	r24, 0x02D9
    206c:	90 91 da 02 	lds	r25, 0x02DA
    2070:	06 97       	sbiw	r24, 0x06	; 6
    2072:	09 f0       	breq	.+2      	; 0x2076 <_Z14updateZoneflagv+0xc0>
    2074:	5b c0       	rjmp	.+182    	; 0x212c <_Z14updateZoneflagv+0x176>
    2076:	80 91 08 02 	lds	r24, 0x0208
    207a:	81 11       	cpse	r24, r1
    207c:	57 c0       	rjmp	.+174    	; 0x212c <_Z14updateZoneflagv+0x176>
    207e:	39 c0       	rjmp	.+114    	; 0x20f2 <_Z14updateZoneflagv+0x13c>
			GoThrowingZone2 = false;
		}
		//if rack is not above geneva but robot is in loading zone 2
		else if(where == inLZ2){
			//uart0_puts("none \r\n");
			GoldenRackGiven = false;
    2080:	10 92 e3 02 	sts	0x02E3, r1
			GoThrowingZone2 = true;
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	80 93 df 02 	sts	0x02DF, r24
			GoThrowingZone3 = false;
    208a:	10 92 de 02 	sts	0x02DE, r1
    208e:	55 c0       	rjmp	.+170    	; 0x213a <_Z14updateZoneflagv+0x184>
	i.e if manual robot arm is extended to give shuttlecock*/
	if(!ShuttleCockGiven){
		//uart0_puts("entered above \r\n");
		if(!(PINL & (1<<PL6)) &&  where == inLZ1 ){
			//'w' is sent to throwing mechanism to grip shuttlecock
			uart0_puts("shuttlecock given \r\n");
    2090:	87 e5       	ldi	r24, 0x57	; 87
    2092:	92 e0       	ldi	r25, 0x02	; 2
    2094:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <_Z10uart0_putsPKc>
			uart3_putc('o');
    2098:	8f e6       	ldi	r24, 0x6F	; 111
    209a:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <_Z10uart3_putch>
			ShuttleCockGiven = true;
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	80 93 e4 02 	sts	0x02E4, r24
			//certain delay is needed so that robot first grabs shuttlecock and moves//
			GoThrowingZone1 = true;
    20a4:	80 93 e0 02 	sts	0x02E0, r24
			task3 = task4 = false;
    20a8:	10 92 d5 02 	sts	0x02D5, r1
    20ac:	10 92 d6 02 	sts	0x02D6, r1
    20b0:	9e cf       	rjmp	.-196    	; 0x1fee <_Z14updateZoneflagv+0x38>
		}
		/*if low on shuttlecock pin then shuttlecock received
		i.e if manual robot arm is extended to give shuttlecock*/
		else if(!(SHUTTLECOCK_STATUSPORT & (1<<SHUTTLECOCK_STATUSPIN)) &&  where == inLZ2 && ManualInFrontOfLZ2){
    20b2:	80 91 09 01 	lds	r24, 0x0109
    20b6:	86 ff       	sbrs	r24, 6
    20b8:	8f cf       	rjmp	.-226    	; 0x1fd8 <_Z14updateZoneflagv+0x22>
    20ba:	bb cf       	rjmp	.-138    	; 0x2032 <_Z14updateZoneflagv+0x7c>
		/*	uart0_puts("Shuttlecock given in loading zone 2\r\nManual robot ahead \r\n");*/
			//'o' is sent to throwing mechanism to grip shuttlecock
			uart3_putc('o');
    20bc:	8f e6       	ldi	r24, 0x6F	; 111
    20be:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <_Z10uart3_putch>
			ShuttleCockGiven = true;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	80 93 e4 02 	sts	0x02E4, r24
			//certain delay is needed so that robot first grabs shuttlecock and moves//
			GoThrowingZone1 = false;
    20c8:	10 92 e0 02 	sts	0x02E0, r1
			GoThrowingZone2 = true;
    20cc:	80 93 df 02 	sts	0x02DF, r24
			//robotState = moving;
			task3 = task4 = task5 = true;
    20d0:	80 93 d4 02 	sts	0x02D4, r24
    20d4:	80 93 d5 02 	sts	0x02D5, r24
    20d8:	80 93 d6 02 	sts	0x02D6, r24
			task6 = task7 = false;
    20dc:	10 92 d2 02 	sts	0x02D2, r1
    20e0:	10 92 d3 02 	sts	0x02D3, r1
    20e4:	84 cf       	rjmp	.-248    	; 0x1fee <_Z14updateZoneflagv+0x38>
	
	/*if low on golden rack pin then rack is received
	i.e if rack is received above geneva and robot is in loading zone 2*/
	if(!ShuttleCockGiven || !GoldenRackGiven){
		if(sendoncetorotateGeneva && !(PINL & (1<<PL6)) && !((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && !ManualInFrontOfLZ2 && where == inLZ2){
			uart3_putc('k');
    20e6:	8b e6       	ldi	r24, 0x6B	; 107
    20e8:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <_Z10uart3_putch>
			sendoncetorotateGeneva = false;
    20ec:	10 92 07 02 	sts	0x0207, r1
    20f0:	b7 cf       	rjmp	.-146    	; 0x2060 <_Z14updateZoneflagv+0xaa>
		}
		//uart0_puts("entered rack wala \r\n");
		if(((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && (where == inLZ2 ) && !ManualInFrontOfLZ2){
			//'f' is sent to throwing mechanism to tell to throwing zone 3 from golden rack
			task6 = task7 = true;
    20f2:	c1 e0       	ldi	r28, 0x01	; 1
    20f4:	c0 93 d2 02 	sts	0x02D2, r28
    20f8:	c0 93 d3 02 	sts	0x02D3, r28
			task8 = task9 = false;
    20fc:	10 92 d0 02 	sts	0x02D0, r1
    2100:	10 92 d1 02 	sts	0x02D1, r1
			/*uart0_puts("going throwing zone 3\r\n");*/
			uart3_putc('j');
    2104:	8a e6       	ldi	r24, 0x6A	; 106
    2106:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <_Z10uart3_putch>
			GoldenRackGiven = true;
    210a:	c0 93 e3 02 	sts	0x02E3, r28
			ShuttleCockArmGone = true;
    210e:	c0 93 e2 02 	sts	0x02E2, r28
			ShuttleCockGiven = true;
    2112:	c0 93 e4 02 	sts	0x02E4, r28
			GoThrowingZone3 = true;
    2116:	c0 93 de 02 	sts	0x02DE, r28
			robotState = moving;
    211a:	87 e0       	ldi	r24, 0x07	; 7
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	90 93 06 02 	sts	0x0206, r25
    2122:	80 93 05 02 	sts	0x0205, r24
			GoThrowingZone2 = false;
    2126:	10 92 df 02 	sts	0x02DF, r1
    212a:	07 c0       	rjmp	.+14     	; 0x213a <_Z14updateZoneflagv+0x184>
		}
		//if rack is not above geneva but robot is in loading zone 2
		else if(where == inLZ2){
    212c:	80 91 d9 02 	lds	r24, 0x02D9
    2130:	90 91 da 02 	lds	r25, 0x02DA
    2134:	06 97       	sbiw	r24, 0x06	; 6
    2136:	09 f4       	brne	.+2      	; 0x213a <_Z14updateZoneflagv+0x184>
    2138:	a3 cf       	rjmp	.-186    	; 0x2080 <_Z14updateZoneflagv+0xca>
			GoldenRackGiven = false;
		}
	}
	
 	
}
    213a:	cf 91       	pop	r28
    213c:	08 95       	ret

0000213e <_Z18gorockthegamefieldv>:

char receiveAck;
/////////////////////////

void gorockthegamefield(void)
{
    213e:	cf 93       	push	r28
    2140:	df 93       	push	r29
	
	if((where == inLZ1 || where == inLZ2) && robotState == notmoving){
    2142:	80 91 d9 02 	lds	r24, 0x02D9
    2146:	90 91 da 02 	lds	r25, 0x02DA
    214a:	05 97       	sbiw	r24, 0x05	; 5
    214c:	39 f0       	breq	.+14     	; 0x215c <_Z18gorockthegamefieldv+0x1e>
    214e:	80 91 d9 02 	lds	r24, 0x02D9
    2152:	90 91 da 02 	lds	r25, 0x02DA
    2156:	06 97       	sbiw	r24, 0x06	; 6
    2158:	09 f0       	breq	.+2      	; 0x215c <_Z18gorockthegamefieldv+0x1e>
    215a:	4b c0       	rjmp	.+150    	; 0x21f2 <_Z18gorockthegamefieldv+0xb4>
    215c:	80 91 05 02 	lds	r24, 0x0205
    2160:	90 91 06 02 	lds	r25, 0x0206
    2164:	08 97       	sbiw	r24, 0x08	; 8
    2166:	09 f0       	breq	.+2      	; 0x216a <_Z18gorockthegamefieldv+0x2c>
    2168:	44 c0       	rjmp	.+136    	; 0x21f2 <_Z18gorockthegamefieldv+0xb4>
    216a:	60 c4       	rjmp	.+2240   	; 0x2a2c <__stack+0x82d>
		/*if the robot is in loading zone 1 after completing task3 and task4 
		but yet to complete task5*/ 
		if(task4 && !task5){
    216c:	80 91 d4 02 	lds	r24, 0x02D4
    2170:	81 11       	cpse	r24, r1
    2172:	09 c0       	rjmp	.+18     	; 0x2186 <_Z18gorockthegamefieldv+0x48>
			/*if there is no manual robot infront of automatic robot*/
			if((ZONE_STATUSPORT & (1<<ZONE_STATUSPIN)) && !alwaysTZ1){
    2174:	80 91 09 01 	lds	r24, 0x0109
    2178:	84 ff       	sbrs	r24, 4
    217a:	5d c4       	rjmp	.+2234   	; 0x2a36 <__stack+0x837>
    217c:	80 91 c0 04 	lds	r24, 0x04C0
    2180:	81 11       	cpse	r24, r1
    2182:	59 c4       	rjmp	.+2226   	; 0x2a36 <__stack+0x837>
    2184:	61 c4       	rjmp	.+2242   	; 0x2a48 <__stack+0x849>
				GoThrowingZone1 = true;
				task3 = task4 = false;
				updateZoneflag();
			}	
		}
 		else if(task6 && task7 ){
    2186:	80 91 d3 02 	lds	r24, 0x02D3
    218a:	88 23       	and	r24, r24
    218c:	81 f1       	breq	.+96     	; 0x21ee <_Z18gorockthegamefieldv+0xb0>
    218e:	80 91 d2 02 	lds	r24, 0x02D2
    2192:	88 23       	and	r24, r24
    2194:	61 f1       	breq	.+88     	; 0x21ee <_Z18gorockthegamefieldv+0xb0>
			 //if manual robot is not ahead and not always throw from throwing zone 2
			 //or just goto throwing zone 3 from loading zone 2		
 			if( ((ZONE_STATUSPORT & (1<< ZONE_STATUSPIN)) && !alwaysTZ2) || LZ2ForTZ3){
    2196:	80 91 09 01 	lds	r24, 0x0109
    219a:	84 ff       	sbrs	r24, 4
    219c:	04 c0       	rjmp	.+8      	; 0x21a6 <_Z18gorockthegamefieldv+0x68>
    219e:	80 91 c1 04 	lds	r24, 0x04C1
    21a2:	88 23       	and	r24, r24
    21a4:	21 f0       	breq	.+8      	; 0x21ae <_Z18gorockthegamefieldv+0x70>
    21a6:	80 91 c2 04 	lds	r24, 0x04C2
    21aa:	88 23       	and	r24, r24
    21ac:	59 f0       	breq	.+22     	; 0x21c4 <_Z18gorockthegamefieldv+0x86>
			    /*uart0_puts("no manual in front\r\n");*/
 				where = inLZ2;
    21ae:	86 e0       	ldi	r24, 0x06	; 6
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	90 93 da 02 	sts	0x02DA, r25
    21b6:	80 93 d9 02 	sts	0x02D9, r24
 				ManualInFrontOfLZ2 = false;
    21ba:	10 92 08 02 	sts	0x0208, r1
 				updateZoneflag();
    21be:	fb de       	rcall	.-522    	; 0x1fb6 <_Z14updateZoneflagv>
 				Hold_Position();
    21c0:	cc de       	rcall	.-616    	; 0x1f5a <_Z13Hold_Positionv>
    21c2:	17 c0       	rjmp	.+46     	; 0x21f2 <_Z18gorockthegamefieldv+0xb4>
 			}
			//if there is manual robot ahead of automatic robot && robot is not going 
			//..directly to throwing zone 3 
 			else if (!(ZONE_STATUSPORT & (1<< ZONE_STATUSPIN)) && !LZ2ForTZ3){
    21c4:	80 91 09 01 	lds	r24, 0x0109
    21c8:	84 fd       	sbrc	r24, 4
    21ca:	4c c4       	rjmp	.+2200   	; 0x2a64 <__stack+0x865>
				/*uart0_puts("manual infront \r\n");*/
				ManualInFrontOfLZ2 = true;
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	80 93 08 02 	sts	0x0208, r24
 				xJunctionMeetFromTZ2 = false;
    21d2:	10 92 cf 02 	sts	0x02CF, r1
				updateZoneflag();
    21d6:	ef de       	rcall	.-546    	; 0x1fb6 <_Z14updateZoneflagv>
				Hold_Position();
    21d8:	c0 de       	rcall	.-640    	; 0x1f5a <_Z13Hold_Positionv>
    21da:	0b c0       	rjmp	.+22     	; 0x21f2 <_Z18gorockthegamefieldv+0xb4>
 			}
			//if always throw from throwing zone 2
			//automatic robot must force to know there is manual robot ahead.
			else if(alwaysTZ2){
				/*uart0_puts("always tz2 \r\n");*/
				ManualInFrontOfLZ2 = true;
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	80 93 08 02 	sts	0x0208, r24
				updateZoneflag();
    21e2:	e9 de       	rcall	.-558    	; 0x1fb6 <_Z14updateZoneflagv>
				Hold_Position();
    21e4:	ba de       	rcall	.-652    	; 0x1f5a <_Z13Hold_Positionv>
    21e6:	05 c0       	rjmp	.+10     	; 0x21f2 <_Z18gorockthegamefieldv+0xb4>
			}
			//otherwise updatezone flag
 			else{
 				updateZoneflag();
    21e8:	e6 de       	rcall	.-564    	; 0x1fb6 <_Z14updateZoneflagv>
 				Hold_Position();
    21ea:	b7 de       	rcall	.-658    	; 0x1f5a <_Z13Hold_Positionv>
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <_Z18gorockthegamefieldv+0xb4>
 			}
 		}
		/*if the robot is in loading zone 1 or loading zone 2  otherwise */
		else{
			updateZoneflag();
    21ee:	e3 de       	rcall	.-570    	; 0x1fb6 <_Z14updateZoneflagv>
			Hold_Position();
    21f0:	b4 de       	rcall	.-664    	; 0x1f5a <_Z13Hold_Positionv>
		}
	}
	
	
	////move from start zone to corner of loading zone
	if(!task1 && where == inStart_point && (normalGame||alwaysTZ1)){	
    21f2:	80 91 d8 02 	lds	r24, 0x02D8
    21f6:	81 11       	cpse	r24, r1
    21f8:	e5 c5       	rjmp	.+3018   	; 0x2dc4 <__stack+0xbc5>
    21fa:	20 91 d9 02 	lds	r18, 0x02D9
    21fe:	30 91 da 02 	lds	r19, 0x02DA
    2202:	23 2b       	or	r18, r19
    2204:	09 f0       	breq	.+2      	; 0x2208 <__stack+0x9>
    2206:	d9 c5       	rjmp	.+2994   	; 0x2dba <__stack+0xbbb>
    2208:	90 91 bf 04 	lds	r25, 0x04BF
    220c:	91 11       	cpse	r25, r1
    220e:	2f c4       	rjmp	.+2142   	; 0x2a6e <__stack+0x86f>
    2210:	90 91 c0 04 	lds	r25, 0x04C0
    2214:	91 11       	cpse	r25, r1
    2216:	2b c4       	rjmp	.+2134   	; 0x2a6e <__stack+0x86f>
    2218:	d0 c5       	rjmp	.+2976   	; 0x2dba <__stack+0xbbb>
	checkRobotMotion();
	
}

inline void linetrackerXjunctionWatch(void){
	sei();
    221a:	78 94       	sei
	PCICR |= (1<<PCIE0);
    221c:	e8 e6       	ldi	r30, 0x68	; 104
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	81 60       	ori	r24, 0x01	; 1
    2224:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT4);
    2226:	eb e6       	ldi	r30, 0x6B	; 107
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	80 61       	ori	r24, 0x10	; 16
    222e:	80 83       	st	Z, r24
    2230:	2e c1       	rjmp	.+604    	; 0x248e <__stack+0x28f>
			linetrackerXjunctionWatch();
			//uart0_puts("int on");
		}
		//uart0_puts("\r\n");
	}
	else if((directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && !task1){
    2232:	20 91 c3 04 	lds	r18, 0x04C3
    2236:	21 11       	cpse	r18, r1
    2238:	08 c0       	rjmp	.+16     	; 0x224a <__stack+0x4b>
    223a:	20 91 c2 04 	lds	r18, 0x04C2
    223e:	21 11       	cpse	r18, r1
    2240:	04 c0       	rjmp	.+8      	; 0x224a <__stack+0x4b>
    2242:	20 91 c1 04 	lds	r18, 0x04C1
    2246:	22 23       	and	r18, r18
    2248:	69 f1       	breq	.+90     	; 0x22a4 <__stack+0xa5>
    224a:	81 11       	cpse	r24, r1
    224c:	2e c0       	rjmp	.+92     	; 0x22aa <__stack+0xab>
		movx((Throwingzone2.x),Front,STARTZONEtoCORNER);
    224e:	48 ec       	ldi	r20, 0xC8	; 200
    2250:	50 e0       	ldi	r21, 0x00	; 0
    2252:	62 e0       	ldi	r22, 0x02	; 2
    2254:	70 e0       	ldi	r23, 0x00	; 0
    2256:	80 e9       	ldi	r24, 0x90	; 144
    2258:	9a e1       	ldi	r25, 0x1A	; 26
    225a:	0e 94 c5 08 	call	0x118a	; 0x118a <_Z4movxiij>
		robotState = moving;
    225e:	87 e0       	ldi	r24, 0x07	; 7
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	90 93 06 02 	sts	0x0206, r25
    2266:	80 93 05 02 	sts	0x0205, r24
		if(abs(encoderX.getdistance()) >= 6600){
    226a:	86 ec       	ldi	r24, 0xC6	; 198
    226c:	92 e0       	ldi	r25, 0x02	; 2
    226e:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    2272:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
    2276:	9b 01       	movw	r18, r22
    2278:	77 23       	and	r23, r23
    227a:	24 f4       	brge	.+8      	; 0x2284 <__stack+0x85>
    227c:	22 27       	eor	r18, r18
    227e:	33 27       	eor	r19, r19
    2280:	26 1b       	sub	r18, r22
    2282:	37 0b       	sbc	r19, r23
    2284:	28 3c       	cpi	r18, 0xC8	; 200
    2286:	39 41       	sbci	r19, 0x19	; 25
    2288:	0c f4       	brge	.+2      	; 0x228c <__stack+0x8d>
    228a:	01 c1       	rjmp	.+514    	; 0x248e <__stack+0x28f>
	checkRobotMotion();
	
}

inline void linetrackerXjunctionWatch(void){
	sei();
    228c:	78 94       	sei
	PCICR |= (1<<PCIE0);
    228e:	e8 e6       	ldi	r30, 0x68	; 104
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	81 60       	ori	r24, 0x01	; 1
    2296:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT4);
    2298:	eb e6       	ldi	r30, 0x6B	; 107
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	80 61       	ori	r24, 0x10	; 16
    22a0:	80 83       	st	Z, r24
    22a2:	f5 c0       	rjmp	.+490    	; 0x248e <__stack+0x28f>
			//uart0_puts("interrupt on\t");
			linetrackerXjunctionWatch();
		}
	}
	///move from corner to loading zone1 if task1 is completed and task2 not completed
	else if(task1 && !task2){	
    22a4:	88 23       	and	r24, r24
    22a6:	09 f4       	brne	.+2      	; 0x22aa <__stack+0xab>
    22a8:	7f c0       	rjmp	.+254    	; 0x23a8 <__stack+0x1a9>
    22aa:	80 91 d7 02 	lds	r24, 0x02D7
    22ae:	81 11       	cpse	r24, r1
    22b0:	3c c0       	rjmp	.+120    	; 0x232a <__stack+0x12b>
		where = inFirstloadingCorner;
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	90 93 da 02 	sts	0x02DA, r25
    22ba:	80 93 d9 02 	sts	0x02D9, r24
		startingAtFront = false;
    22be:	10 92 22 02 	sts	0x0222, r1
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    22c2:	ed e6       	ldi	r30, 0x6D	; 109
    22c4:	f3 e0       	ldi	r31, 0x03	; 3
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	a0 e0       	ldi	r26, 0x00	; 0
    22cc:	b0 e4       	ldi	r27, 0x40	; 64
    22ce:	85 8b       	std	Z+21, r24	; 0x15
    22d0:	96 8b       	std	Z+22, r25	; 0x16
    22d2:	a7 8b       	std	Z+23, r26	; 0x17
    22d4:	b0 8f       	std	Z+24, r27	; 0x18
		ki = i;
    22d6:	11 8e       	std	Z+25, r1	; 0x19
    22d8:	12 8e       	std	Z+26, r1	; 0x1a
    22da:	13 8e       	std	Z+27, r1	; 0x1b
    22dc:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	a0 ef       	ldi	r26, 0xF0	; 240
    22e4:	b1 e4       	ldi	r27, 0x41	; 65
    22e6:	85 8f       	std	Z+29, r24	; 0x1d
    22e8:	96 8f       	std	Z+30, r25	; 0x1e
    22ea:	a7 8f       	std	Z+31, r26	; 0x1f
    22ec:	b0 a3       	std	Z+32, r27	; 0x20
		compass.setPid(2.0,0,30);
		uart0_puts("moving aheead \r\n");
    22ee:	8c e6       	ldi	r24, 0x6C	; 108
    22f0:	92 e0       	ldi	r25, 0x02	; 2
    22f2:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <_Z10uart0_putsPKc>
		robotState = moving;
    22f6:	87 e0       	ldi	r24, 0x07	; 7
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	90 93 06 02 	sts	0x0206, r25
    22fe:	80 93 05 02 	sts	0x0205, r24
	sei();
	PCICR |= (1<<PCIE2);
	PCMSK2 |= (1<<PCINT23);
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
    2302:	eb e6       	ldi	r30, 0x6B	; 107
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	8f 7e       	andi	r24, 0xEF	; 239
    230a:	80 83       	st	Z, r24
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    230c:	78 94       	sei
	PCICR |= (1<<PCIE2);
    230e:	e8 e6       	ldi	r30, 0x68	; 104
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	84 60       	ori	r24, 0x04	; 4
    2316:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT23);
    2318:	ed e6       	ldi	r30, 0x6D	; 109
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	80 68       	ori	r24, 0x80	; 128
    2320:	80 83       	st	Z, r24
		linetrackerXjunctionWatchOff();
		linetrackerYjunctionWatch();
		movYForwardSlow(CORNERtoLZ1);
    2322:	88 e2       	ldi	r24, 0x28	; 40
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	7b dc       	rcall	.-1802   	; 0x1c1e <_Z15movYForwardSlowj>
    2328:	b2 c0       	rjmp	.+356    	; 0x248e <__stack+0x28f>
		//MovY_Slow(1000, Front, CORNERtoLZ1);
		//movYForwardSlow(CORNERtoLZ1);
	}
	/*if task2 is completed and robot just reached loading zone 1*/
	else if(task1 && task2 && where == inFirstloadingCorner && (robotState == moving) && (normalGame||alwaysTZ1)){
    232a:	20 91 d9 02 	lds	r18, 0x02D9
    232e:	30 91 da 02 	lds	r19, 0x02DA
    2332:	21 30       	cpi	r18, 0x01	; 1
    2334:	31 05       	cpc	r19, r1
    2336:	09 f0       	breq	.+2      	; 0x233a <__stack+0x13b>
    2338:	37 c5       	rjmp	.+2670   	; 0x2da8 <__stack+0xba9>
    233a:	20 91 05 02 	lds	r18, 0x0205
    233e:	30 91 06 02 	lds	r19, 0x0206
    2342:	27 30       	cpi	r18, 0x07	; 7
    2344:	31 05       	cpc	r19, r1
    2346:	09 f0       	breq	.+2      	; 0x234a <__stack+0x14b>
    2348:	2f c5       	rjmp	.+2654   	; 0x2da8 <__stack+0xba9>
    234a:	80 91 bf 04 	lds	r24, 0x04BF
    234e:	81 11       	cpse	r24, r1
    2350:	05 c0       	rjmp	.+10     	; 0x235c <__stack+0x15d>
    2352:	80 91 c0 04 	lds	r24, 0x04C0
    2356:	88 23       	and	r24, r24
    2358:	09 f4       	brne	.+2      	; 0x235c <__stack+0x15d>
    235a:	26 c5       	rjmp	.+2636   	; 0x2da8 <__stack+0xba9>
		where = inLZ1;
    235c:	85 e0       	ldi	r24, 0x05	; 5
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	90 93 da 02 	sts	0x02DA, r25
    2364:	80 93 d9 02 	sts	0x02D9, r24
		compass.SETPOINT = getYawGY88();
    2368:	0e 94 b7 03 	call	0x76e	; 0x76e <_Z10getYawGY88v>
    236c:	90 93 7c 03 	sts	0x037C, r25
    2370:	80 93 7b 03 	sts	0x037B, r24
		uart3_putc('h');
    2374:	88 e6       	ldi	r24, 0x68	; 104
    2376:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <_Z10uart3_putch>
		//uart0_puts("in loading zone 1\r\n");
		//compass.setPid(2.0,0,30);
		robotState = notmoving;
    237a:	88 e0       	ldi	r24, 0x08	; 8
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	90 93 06 02 	sts	0x0206, r25
    2382:	80 93 05 02 	sts	0x0205, r24
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT23);
    2386:	ed e6       	ldi	r30, 0x6D	; 109
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	8f 77       	andi	r24, 0x7F	; 127
    238e:	80 83       	st	Z, r24
		linetrackerYjunctionWatchOff();
		BrakeMotor();
    2390:	0e 94 d2 05 	call	0xba4	; 0xba4 <_Z10BrakeMotorv>
		Hold_Position();
    2394:	e2 dd       	rcall	.-1084   	; 0x1f5a <_Z13Hold_Positionv>
		inline void resetCount(){count_encoder = 0;};
    2396:	10 92 c7 02 	sts	0x02C7, r1
    239a:	10 92 c6 02 	sts	0x02C6, r1
    239e:	10 92 bf 02 	sts	0x02BF, r1
    23a2:	10 92 be 02 	sts	0x02BE, r1
    23a6:	73 c0       	rjmp	.+230    	; 0x248e <__stack+0x28f>
		encoderX.resetCount();
		encoderY.resetCount();
	}
	else if(where == inFirstloadingCorner && task2 && (directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && robotState == moving){
    23a8:	20 91 d9 02 	lds	r18, 0x02D9
    23ac:	30 91 da 02 	lds	r19, 0x02DA
    23b0:	21 30       	cpi	r18, 0x01	; 1
    23b2:	31 05       	cpc	r19, r1
    23b4:	09 f0       	breq	.+2      	; 0x23b8 <__stack+0x1b9>
    23b6:	6b c0       	rjmp	.+214    	; 0x248e <__stack+0x28f>
    23b8:	80 91 d7 02 	lds	r24, 0x02D7
    23bc:	88 23       	and	r24, r24
    23be:	09 f4       	brne	.+2      	; 0x23c2 <__stack+0x1c3>
    23c0:	66 c0       	rjmp	.+204    	; 0x248e <__stack+0x28f>
    23c2:	91 11       	cpse	r25, r1
    23c4:	0d c0       	rjmp	.+26     	; 0x23e0 <__stack+0x1e1>
    23c6:	80 91 c3 04 	lds	r24, 0x04C3
    23ca:	81 11       	cpse	r24, r1
    23cc:	09 c0       	rjmp	.+18     	; 0x23e0 <__stack+0x1e1>
    23ce:	80 91 c2 04 	lds	r24, 0x04C2
    23d2:	81 11       	cpse	r24, r1
    23d4:	05 c0       	rjmp	.+10     	; 0x23e0 <__stack+0x1e1>
    23d6:	80 91 c1 04 	lds	r24, 0x04C1
    23da:	88 23       	and	r24, r24
    23dc:	09 f4       	brne	.+2      	; 0x23e0 <__stack+0x1e1>
    23de:	57 c0       	rjmp	.+174    	; 0x248e <__stack+0x28f>
    23e0:	80 91 05 02 	lds	r24, 0x0205
    23e4:	90 91 06 02 	lds	r25, 0x0206
    23e8:	07 97       	sbiw	r24, 0x07	; 7
    23ea:	09 f0       	breq	.+2      	; 0x23ee <__stack+0x1ef>
    23ec:	50 c0       	rjmp	.+160    	; 0x248e <__stack+0x28f>
    23ee:	75 c3       	rjmp	.+1770   	; 0x2ada <__stack+0x8db>
		robotState = notmoving;
		BrakeMotor();
		encoderX.resetCount();
		encoderY.resetCount();
		if(directlyLZ2){
			task1 = task2 = task3 = task4 = task5 = true;
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	80 93 d4 02 	sts	0x02D4, r24
    23f6:	80 93 d5 02 	sts	0x02D5, r24
    23fa:	80 93 d6 02 	sts	0x02D6, r24
    23fe:	80 93 d7 02 	sts	0x02D7, r24
    2402:	80 93 d8 02 	sts	0x02D8, r24
			ManualInFrontOfLZ2 = true;
    2406:	80 93 08 02 	sts	0x0208, r24
    240a:	41 c0       	rjmp	.+130    	; 0x248e <__stack+0x28f>
		}
		else if(directlyTZ3){
    240c:	80 91 c3 04 	lds	r24, 0x04C3
    2410:	88 23       	and	r24, r24
    2412:	b1 f0       	breq	.+44     	; 0x2440 <__stack+0x241>
			task1 = task2 = task3 = task4 = task5 = task6 = task7 = true;
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	80 93 d2 02 	sts	0x02D2, r24
    241a:	80 93 d3 02 	sts	0x02D3, r24
    241e:	80 93 d4 02 	sts	0x02D4, r24
    2422:	80 93 d5 02 	sts	0x02D5, r24
    2426:	80 93 d6 02 	sts	0x02D6, r24
    242a:	80 93 d7 02 	sts	0x02D7, r24
    242e:	80 93 d8 02 	sts	0x02D8, r24
			ShuttleCockArmGone = true;
    2432:	80 93 e2 02 	sts	0x02E2, r24
			ShuttleCockGiven = true;
    2436:	80 93 e4 02 	sts	0x02E4, r24
			GoThrowingZone3 = true;
    243a:	80 93 de 02 	sts	0x02DE, r24
    243e:	27 c0       	rjmp	.+78     	; 0x248e <__stack+0x28f>
		}
		else if(LZ2ForTZ3){
    2440:	80 91 c2 04 	lds	r24, 0x04C2
    2444:	88 23       	and	r24, r24
    2446:	91 f0       	breq	.+36     	; 0x246c <__stack+0x26d>
			task1 = task2 = task3 = task4 = task5 = task6 = task7 = true;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	80 93 d2 02 	sts	0x02D2, r24
    244e:	80 93 d3 02 	sts	0x02D3, r24
    2452:	80 93 d4 02 	sts	0x02D4, r24
    2456:	80 93 d5 02 	sts	0x02D5, r24
    245a:	80 93 d6 02 	sts	0x02D6, r24
    245e:	80 93 d7 02 	sts	0x02D7, r24
    2462:	80 93 d8 02 	sts	0x02D8, r24
			ManualInFrontOfLZ2 = false;
    2466:	10 92 08 02 	sts	0x0208, r1
    246a:	11 c0       	rjmp	.+34     	; 0x248e <__stack+0x28f>
		}
		else if(alwaysTZ2){
    246c:	80 91 c1 04 	lds	r24, 0x04C1
    2470:	88 23       	and	r24, r24
    2472:	69 f0       	breq	.+26     	; 0x248e <__stack+0x28f>
			task1 = task2 = task3 = task4 = task5 = true;
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	80 93 d4 02 	sts	0x02D4, r24
    247a:	80 93 d5 02 	sts	0x02D5, r24
    247e:	80 93 d6 02 	sts	0x02D6, r24
    2482:	80 93 d7 02 	sts	0x02D7, r24
    2486:	80 93 d8 02 	sts	0x02D8, r24
			ManualInFrontOfLZ2 = true;
    248a:	80 93 08 02 	sts	0x0208, r24
		}
	}
	/*if Shuttlecock is given*/
	if(ShuttleCockGiven && ShuttleCockArmGone)
    248e:	80 91 e4 02 	lds	r24, 0x02E4
    2492:	88 23       	and	r24, r24
    2494:	09 f4       	brne	.+2      	; 0x2498 <__stack+0x299>
    2496:	a3 c4       	rjmp	.+2374   	; 0x2dde <__stack+0xbdf>
    2498:	80 91 e2 02 	lds	r24, 0x02E2
    249c:	88 23       	and	r24, r24
    249e:	09 f4       	brne	.+2      	; 0x24a2 <__stack+0x2a3>
    24a0:	9e c4       	rjmp	.+2364   	; 0x2dde <__stack+0xbdf>
	{
		/*if manual robot is ahead of automatic robot and automatic robot
		has not completed task3*/
			if(GoThrowingZone1 && !task3 && where == inLZ1){
    24a2:	80 91 e0 02 	lds	r24, 0x02E0
    24a6:	88 23       	and	r24, r24
    24a8:	09 f4       	brne	.+2      	; 0x24ac <__stack+0x2ad>
    24aa:	3c c3       	rjmp	.+1656   	; 0x2b24 <__stack+0x925>
    24ac:	80 91 d6 02 	lds	r24, 0x02D6
    24b0:	81 11       	cpse	r24, r1
    24b2:	13 c0       	rjmp	.+38     	; 0x24da <__stack+0x2db>
    24b4:	80 91 d9 02 	lds	r24, 0x02D9
    24b8:	90 91 da 02 	lds	r25, 0x02DA
    24bc:	05 97       	sbiw	r24, 0x05	; 5
    24be:	f1 f4       	brne	.+60     	; 0x24fc <__stack+0x2fd>
    24c0:	37 c3       	rjmp	.+1646   	; 0x2b30 <__stack+0x931>
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    24c2:	78 94       	sei
	PCICR |= (1<<PCIE2);
    24c4:	e8 e6       	ldi	r30, 0x68	; 104
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	84 60       	ori	r24, 0x04	; 4
    24cc:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT23);
    24ce:	ed e6       	ldi	r30, 0x6D	; 109
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	80 68       	ori	r24, 0x80	; 128
    24d6:	80 83       	st	Z, r24
    24d8:	11 c0       	rjmp	.+34     	; 0x24fc <__stack+0x2fd>
					//uart0_puts("INT ON");
				}
				//uart0_puts("\r\n");
			}
			/* if task3 is completed and robot just reached throwingzone 1 then*/
			else if(task3 && !task4 && where == inLZ1 && robotState == moving){
    24da:	80 91 d5 02 	lds	r24, 0x02D5
    24de:	81 11       	cpse	r24, r1
    24e0:	0d c0       	rjmp	.+26     	; 0x24fc <__stack+0x2fd>
    24e2:	80 91 d9 02 	lds	r24, 0x02D9
    24e6:	90 91 da 02 	lds	r25, 0x02DA
    24ea:	05 97       	sbiw	r24, 0x05	; 5
    24ec:	39 f4       	brne	.+14     	; 0x24fc <__stack+0x2fd>
    24ee:	80 91 05 02 	lds	r24, 0x0205
    24f2:	90 91 06 02 	lds	r25, 0x0206
    24f6:	07 97       	sbiw	r24, 0x07	; 7
    24f8:	09 f4       	brne	.+2      	; 0x24fc <__stack+0x2fd>
    24fa:	52 c3       	rjmp	.+1700   	; 0x2ba0 <__stack+0x9a1>
				robotState = notmoving;
				
			}
			/* if in throwing zone 1 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ1 && robotState == notmoving){
    24fc:	80 91 d9 02 	lds	r24, 0x02D9
    2500:	90 91 da 02 	lds	r25, 0x02DA
    2504:	02 97       	sbiw	r24, 0x02	; 2
    2506:	d1 f4       	brne	.+52     	; 0x253c <__stack+0x33d>
    2508:	80 91 05 02 	lds	r24, 0x0205
    250c:	90 91 06 02 	lds	r25, 0x0206
    2510:	08 97       	sbiw	r24, 0x08	; 8
    2512:	a1 f4       	brne	.+40     	; 0x253c <__stack+0x33d>
    2514:	61 c3       	rjmp	.+1730   	; 0x2bd8 <__stack+0x9d9>
			//	uart0_puts("Throwing \r\n");
				Hold_Position();

				if(_b_Transmit_once)	//Stable_Robot() && 
				{	
					uart3_putc('1');
    2516:	81 e3       	ldi	r24, 0x31	; 49
    2518:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <_Z10uart3_putch>
					//uart3_puts("Job Done\r\n\n");
					_b_Transmit_once = false;
    251c:	10 92 e1 02 	sts	0x02E1, r1
				}
				
				receiveAck = uart3_getc();
    2520:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <_Z10uart3_getcv>
    2524:	80 93 ce 02 	sts	0x02CE, r24
				if(receiveAck == 'g'){
    2528:	87 36       	cpi	r24, 0x67	; 103
    252a:	41 f4       	brne	.+16     	; 0x253c <__stack+0x33d>
					//uart0_puts("received ack\r\n");
					backtoLZ1 = true;
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	80 93 dd 02 	sts	0x02DD, r24
					GoThrowingZone1 = false;
    2532:	10 92 e0 02 	sts	0x02E0, r1
					receiveAck = ' ';
    2536:	80 e2       	ldi	r24, 0x20	; 32
    2538:	80 93 ce 02 	sts	0x02CE, r24
				}
			}
			/*if acknowledge received from throwing mechanism after throwing then back to loading zone 2*/
			if(backtoLZ1 && task3 && !task4){
    253c:	80 91 dd 02 	lds	r24, 0x02DD
    2540:	88 23       	and	r24, r24
    2542:	09 f4       	brne	.+2      	; 0x2546 <__stack+0x347>
    2544:	49 c0       	rjmp	.+146    	; 0x25d8 <__stack+0x3d9>
    2546:	80 91 d6 02 	lds	r24, 0x02D6
    254a:	88 23       	and	r24, r24
    254c:	09 f4       	brne	.+2      	; 0x2550 <__stack+0x351>
    254e:	44 c0       	rjmp	.+136    	; 0x25d8 <__stack+0x3d9>
    2550:	80 91 d5 02 	lds	r24, 0x02D5
    2554:	81 11       	cpse	r24, r1
    2556:	45 c0       	rjmp	.+138    	; 0x25e2 <__stack+0x3e3>
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2558:	ed e6       	ldi	r30, 0x6D	; 109
    255a:	f3 e0       	ldi	r31, 0x03	; 3
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	a0 e0       	ldi	r26, 0x00	; 0
    2562:	b0 e4       	ldi	r27, 0x40	; 64
    2564:	85 8b       	std	Z+21, r24	; 0x15
    2566:	96 8b       	std	Z+22, r25	; 0x16
    2568:	a7 8b       	std	Z+23, r26	; 0x17
    256a:	b0 8f       	std	Z+24, r27	; 0x18
		ki = i;
    256c:	11 8e       	std	Z+25, r1	; 0x19
    256e:	12 8e       	std	Z+26, r1	; 0x1a
    2570:	13 8e       	std	Z+27, r1	; 0x1b
    2572:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	a0 ef       	ldi	r26, 0xF0	; 240
    257a:	b1 e4       	ldi	r27, 0x41	; 65
    257c:	85 8f       	std	Z+29, r24	; 0x1d
    257e:	96 8f       	std	Z+30, r25	; 0x1e
    2580:	a7 8f       	std	Z+31, r26	; 0x1f
    2582:	b0 a3       	std	Z+32, r27	; 0x20
				compass.setPid(2.0,0,30);
				//uart0_puts("Returning from tz1 \t");
				Move_Yaxis(Throwingzone1.y+25, Back, LZ1toTZ1);
    2584:	44 e6       	ldi	r20, 0x64	; 100
    2586:	50 e0       	ldi	r21, 0x00	; 0
    2588:	63 e0       	ldi	r22, 0x03	; 3
    258a:	70 e0       	ldi	r23, 0x00	; 0
    258c:	85 e8       	ldi	r24, 0x85	; 133
    258e:	97 e0       	ldi	r25, 0x07	; 7
    2590:	76 db       	rcall	.-2324   	; 0x1c7e <_Z10Move_Yaxisiij>
				//movy(Throwingzone1.y, Back,TZ1toLZ1);
				robotState = moving;
    2592:	87 e0       	ldi	r24, 0x07	; 7
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	90 93 06 02 	sts	0x0206, r25
    259a:	80 93 05 02 	sts	0x0205, r24
				if(abs(encoderY.getdistance()) >= 1200){
    259e:	8e eb       	ldi	r24, 0xBE	; 190
    25a0:	92 e0       	ldi	r25, 0x02	; 2
    25a2:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    25a6:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
    25aa:	9b 01       	movw	r18, r22
    25ac:	77 23       	and	r23, r23
    25ae:	24 f4       	brge	.+8      	; 0x25b8 <__stack+0x3b9>
    25b0:	22 27       	eor	r18, r18
    25b2:	33 27       	eor	r19, r19
    25b4:	26 1b       	sub	r18, r22
    25b6:	37 0b       	sbc	r19, r23
    25b8:	20 3b       	cpi	r18, 0xB0	; 176
    25ba:	34 40       	sbci	r19, 0x04	; 4
    25bc:	0c f4       	brge	.+2      	; 0x25c0 <__stack+0x3c1>
    25be:	75 c0       	rjmp	.+234    	; 0x26aa <__stack+0x4ab>
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    25c0:	78 94       	sei
	PCICR |= (1<<PCIE2);
    25c2:	e8 e6       	ldi	r30, 0x68	; 104
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	84 60       	ori	r24, 0x04	; 4
    25ca:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT23);
    25cc:	ed e6       	ldi	r30, 0x6D	; 109
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	80 68       	ori	r24, 0x80	; 128
    25d4:	80 83       	st	Z, r24
    25d6:	69 c0       	rjmp	.+210    	; 0x26aa <__stack+0x4ab>
				//uart0_puts("\r\n");
			
			}
			/*if after returning from throwing zone1, junction on line is detected i.e loading zone1 
			then stop and wait for communication*/
			else if(task4 && robotState == moving && where == inTZ1){
    25d8:	80 91 d5 02 	lds	r24, 0x02D5
    25dc:	88 23       	and	r24, r24
    25de:	09 f4       	brne	.+2      	; 0x25e2 <__stack+0x3e3>
    25e0:	24 c3       	rjmp	.+1608   	; 0x2c2a <__stack+0xa2b>
    25e2:	80 91 05 02 	lds	r24, 0x0205
    25e6:	90 91 06 02 	lds	r25, 0x0206
    25ea:	07 97       	sbiw	r24, 0x07	; 7
    25ec:	09 f0       	breq	.+2      	; 0x25f0 <__stack+0x3f1>
    25ee:	1d c3       	rjmp	.+1594   	; 0x2c2a <__stack+0xa2b>
    25f0:	80 91 d9 02 	lds	r24, 0x02D9
    25f4:	90 91 da 02 	lds	r25, 0x02DA
    25f8:	02 97       	sbiw	r24, 0x02	; 2
    25fa:	09 f0       	breq	.+2      	; 0x25fe <__stack+0x3ff>
    25fc:	16 c3       	rjmp	.+1580   	; 0x2c2a <__stack+0xa2b>
    25fe:	f3 c2       	rjmp	.+1510   	; 0x2be6 <__stack+0x9e7>
				ShuttleCockGiven = false;
				ShuttleCockArmGone = false;
				backtoLZ1 = false;
			}
			/*if there is no manual robot ahead of automatic robot go to loading zone 2*/
			else if(gotoLZ2 && !task5){
    2600:	80 91 d4 02 	lds	r24, 0x02D4
    2604:	81 11       	cpse	r24, r1
    2606:	44 c0       	rjmp	.+136    	; 0x2690 <__stack+0x491>
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2608:	ed e6       	ldi	r30, 0x6D	; 109
    260a:	f3 e0       	ldi	r31, 0x03	; 3
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	a0 e0       	ldi	r26, 0x00	; 0
    2612:	b0 e4       	ldi	r27, 0x40	; 64
    2614:	85 8b       	std	Z+21, r24	; 0x15
    2616:	96 8b       	std	Z+22, r25	; 0x16
    2618:	a7 8b       	std	Z+23, r26	; 0x17
    261a:	b0 8f       	std	Z+24, r27	; 0x18
		ki = i;
    261c:	11 8e       	std	Z+25, r1	; 0x19
    261e:	12 8e       	std	Z+26, r1	; 0x1a
    2620:	13 8e       	std	Z+27, r1	; 0x1b
    2622:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	a0 ef       	ldi	r26, 0xF0	; 240
    262a:	b1 e4       	ldi	r27, 0x41	; 65
    262c:	85 8f       	std	Z+29, r24	; 0x1d
    262e:	96 8f       	std	Z+30, r25	; 0x1e
    2630:	a7 8f       	std	Z+31, r26	; 0x1f
    2632:	b0 a3       	std	Z+32, r27	; 0x20
				//uart0_puts("heading loading zone 2\t");
				compass.setPid(2.0,0,30);
				movx(2100,Front,LZ1toLZ2);
    2634:	44 e6       	ldi	r20, 0x64	; 100
    2636:	50 e0       	ldi	r21, 0x00	; 0
    2638:	62 e0       	ldi	r22, 0x02	; 2
    263a:	70 e0       	ldi	r23, 0x00	; 0
    263c:	84 e3       	ldi	r24, 0x34	; 52
    263e:	98 e0       	ldi	r25, 0x08	; 8
    2640:	0e 94 c5 08 	call	0x118a	; 0x118a <_Z4movxiij>
				robotState = moving;
    2644:	87 e0       	ldi	r24, 0x07	; 7
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	90 93 06 02 	sts	0x0206, r25
    264c:	80 93 05 02 	sts	0x0205, r24
				if(abs(encoderX.getdistance()) >= 1900){
    2650:	86 ec       	ldi	r24, 0xC6	; 198
    2652:	92 e0       	ldi	r25, 0x02	; 2
    2654:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    2658:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
    265c:	9b 01       	movw	r18, r22
    265e:	77 23       	and	r23, r23
    2660:	24 f4       	brge	.+8      	; 0x266a <__stack+0x46b>
    2662:	22 27       	eor	r18, r18
    2664:	33 27       	eor	r19, r19
    2666:	26 1b       	sub	r18, r22
    2668:	37 0b       	sbc	r19, r23
    266a:	2c 36       	cpi	r18, 0x6C	; 108
    266c:	37 40       	sbci	r19, 0x07	; 7
    266e:	ec f0       	brlt	.+58     	; 0x26aa <__stack+0x4ab>
	checkRobotMotion();
	
}

inline void linetrackerXjunctionWatch(void){
	sei();
    2670:	78 94       	sei
	PCICR |= (1<<PCIE0);
    2672:	e8 e6       	ldi	r30, 0x68	; 104
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	81 60       	ori	r24, 0x01	; 1
    267a:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT4);
    267c:	eb e6       	ldi	r30, 0x6B	; 107
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	80 81       	ld	r24, Z
    2682:	80 61       	ori	r24, 0x10	; 16
    2684:	80 83       	st	Z, r24
    2686:	11 c0       	rjmp	.+34     	; 0x26aa <__stack+0x4ab>
				}
				//uart0_puts("\r\n");
			
			}
			/*if X junction near loading zone 2 is detected and robot was previously on loading zone 1*/
			else if(task5 && robotState == moving && where == inLZ1){
    2688:	80 91 d4 02 	lds	r24, 0x02D4
    268c:	88 23       	and	r24, r24
    268e:	69 f0       	breq	.+26     	; 0x26aa <__stack+0x4ab>
    2690:	80 91 05 02 	lds	r24, 0x0205
    2694:	90 91 06 02 	lds	r25, 0x0206
    2698:	07 97       	sbiw	r24, 0x07	; 7
    269a:	39 f4       	brne	.+14     	; 0x26aa <__stack+0x4ab>
    269c:	80 91 d9 02 	lds	r24, 0x02D9
    26a0:	90 91 da 02 	lds	r25, 0x02DA
    26a4:	05 97       	sbiw	r24, 0x05	; 5
    26a6:	09 f4       	brne	.+2      	; 0x26aa <__stack+0x4ab>
    26a8:	c5 c2       	rjmp	.+1418   	; 0x2c34 <__stack+0xa35>
			}
			
			
			/*if there is manual robot ahead of automatic robot && golden rack is not given and shuttlecock
			is given*/
			if(GoThrowingZone2 && !task6 ){
    26aa:	80 91 df 02 	lds	r24, 0x02DF
    26ae:	88 23       	and	r24, r24
    26b0:	09 f4       	brne	.+2      	; 0x26b4 <__stack+0x4b5>
    26b2:	47 c0       	rjmp	.+142    	; 0x2742 <__stack+0x543>
    26b4:	80 91 d3 02 	lds	r24, 0x02D3
    26b8:	81 11       	cpse	r24, r1
    26ba:	47 c0       	rjmp	.+142    	; 0x274a <__stack+0x54b>
				uart0_puts("going tz2 \t");
    26bc:	8d e7       	ldi	r24, 0x7D	; 125
    26be:	92 e0       	ldi	r25, 0x02	; 2
    26c0:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <_Z10uart0_putsPKc>
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    26c4:	ed e6       	ldi	r30, 0x6D	; 109
    26c6:	f3 e0       	ldi	r31, 0x03	; 3
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	a0 e0       	ldi	r26, 0x00	; 0
    26ce:	b0 e4       	ldi	r27, 0x40	; 64
    26d0:	85 8b       	std	Z+21, r24	; 0x15
    26d2:	96 8b       	std	Z+22, r25	; 0x16
    26d4:	a7 8b       	std	Z+23, r26	; 0x17
    26d6:	b0 8f       	std	Z+24, r27	; 0x18
		ki = i;
    26d8:	11 8e       	std	Z+25, r1	; 0x19
    26da:	12 8e       	std	Z+26, r1	; 0x1a
    26dc:	13 8e       	std	Z+27, r1	; 0x1b
    26de:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	a0 ef       	ldi	r26, 0xF0	; 240
    26e6:	b1 e4       	ldi	r27, 0x41	; 65
    26e8:	85 8f       	std	Z+29, r24	; 0x1d
    26ea:	96 8f       	std	Z+30, r25	; 0x1e
    26ec:	a7 8f       	std	Z+31, r26	; 0x1f
    26ee:	b0 a3       	std	Z+32, r27	; 0x20
				compass.setPid(2.0,0,30);
				robotState = moving;
    26f0:	87 e0       	ldi	r24, 0x07	; 7
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	90 93 06 02 	sts	0x0206, r25
    26f8:	80 93 05 02 	sts	0x0205, r24
				Move_Yaxis(Throwingzone2.y+50, Front, LZ2toTZ2);
    26fc:	44 e6       	ldi	r20, 0x64	; 100
    26fe:	50 e0       	ldi	r21, 0x00	; 0
    2700:	62 e0       	ldi	r22, 0x02	; 2
    2702:	70 e0       	ldi	r23, 0x00	; 0
    2704:	8e e9       	ldi	r24, 0x9E	; 158
    2706:	97 e0       	ldi	r25, 0x07	; 7
    2708:	ba da       	rcall	.-2700   	; 0x1c7e <_Z10Move_Yaxisiij>
				//movy(Throwingzone2.y, Front,LZ2toTZ2);
			
				if(abs(encoderY.getdistance()) >=1200){
    270a:	8e eb       	ldi	r24, 0xBE	; 190
    270c:	92 e0       	ldi	r25, 0x02	; 2
    270e:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    2712:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
    2716:	9b 01       	movw	r18, r22
    2718:	77 23       	and	r23, r23
    271a:	24 f4       	brge	.+8      	; 0x2724 <__stack+0x525>
    271c:	22 27       	eor	r18, r18
    271e:	33 27       	eor	r19, r19
    2720:	26 1b       	sub	r18, r22
    2722:	37 0b       	sbc	r19, r23
    2724:	20 3b       	cpi	r18, 0xB0	; 176
    2726:	34 40       	sbci	r19, 0x04	; 4
    2728:	0c f1       	brlt	.+66     	; 0x276c <__stack+0x56d>
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    272a:	78 94       	sei
	PCICR |= (1<<PCIE2);
    272c:	e8 e6       	ldi	r30, 0x68	; 104
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	84 60       	ori	r24, 0x04	; 4
    2734:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT23);
    2736:	ed e6       	ldi	r30, 0x6D	; 109
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	80 81       	ld	r24, Z
    273c:	80 68       	ori	r24, 0x80	; 128
    273e:	80 83       	st	Z, r24
    2740:	15 c0       	rjmp	.+42     	; 0x276c <__stack+0x56d>
				}
				//uart0_puts("\r\n");

			}
			/*if robot just reached throwingzone 2 */
			else if(task6 && !task7 && where == inLZ2 && robotState == moving){
    2742:	80 91 d3 02 	lds	r24, 0x02D3
    2746:	88 23       	and	r24, r24
    2748:	89 f0       	breq	.+34     	; 0x276c <__stack+0x56d>
    274a:	80 91 d2 02 	lds	r24, 0x02D2
    274e:	81 11       	cpse	r24, r1
    2750:	0d c0       	rjmp	.+26     	; 0x276c <__stack+0x56d>
    2752:	80 91 d9 02 	lds	r24, 0x02D9
    2756:	90 91 da 02 	lds	r25, 0x02DA
    275a:	06 97       	sbiw	r24, 0x06	; 6
    275c:	39 f4       	brne	.+14     	; 0x276c <__stack+0x56d>
    275e:	80 91 05 02 	lds	r24, 0x0205
    2762:	90 91 06 02 	lds	r25, 0x0206
    2766:	07 97       	sbiw	r24, 0x07	; 7
    2768:	09 f4       	brne	.+2      	; 0x276c <__stack+0x56d>
    276a:	86 c2       	rjmp	.+1292   	; 0x2c78 <__stack+0xa79>
				//uart3_putc('2');
				
			}
			/* if in throwing zone 2 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ2 && robotState == notmoving){
    276c:	80 91 d9 02 	lds	r24, 0x02D9
    2770:	90 91 da 02 	lds	r25, 0x02DA
    2774:	03 97       	sbiw	r24, 0x03	; 3
    2776:	11 f5       	brne	.+68     	; 0x27bc <__stack+0x5bd>
    2778:	80 91 05 02 	lds	r24, 0x0205
    277c:	90 91 06 02 	lds	r25, 0x0206
    2780:	08 97       	sbiw	r24, 0x08	; 8
    2782:	e1 f4       	brne	.+56     	; 0x27bc <__stack+0x5bd>
    2784:	95 c2       	rjmp	.+1322   	; 0x2cb0 <__stack+0xab1>
				velocity_robot[0] =0;
				velocity_robot[1]=0;
				Hold_Position();
				if(/*check_stable_robot &&Goto_Fence_And_Detect() &&*/ _b_Transmit_once)	//Stable_Robot() &&
				{
					uart3_putc('2');
    2786:	82 e3       	ldi	r24, 0x32	; 50
    2788:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <_Z10uart3_putch>
    278c:	10 92 c7 02 	sts	0x02C7, r1
    2790:	10 92 c6 02 	sts	0x02C6, r1
    2794:	10 92 bf 02 	sts	0x02BF, r1
    2798:	10 92 be 02 	sts	0x02BE, r1
					encoderX.resetCount();
					encoderY.resetCount();
					_b_Transmit_once = false;
    279c:	10 92 e1 02 	sts	0x02E1, r1
				}
				
				receiveAck = uart3_getc();
    27a0:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <_Z10uart3_getcv>
    27a4:	80 93 ce 02 	sts	0x02CE, r24
				if(receiveAck == 'g'){
    27a8:	87 36       	cpi	r24, 0x67	; 103
    27aa:	41 f4       	brne	.+16     	; 0x27bc <__stack+0x5bd>
					backtoLZ2 = true;
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	80 93 dc 02 	sts	0x02DC, r24
					GoThrowingZone3 = false;
    27b2:	10 92 de 02 	sts	0x02DE, r1
					receiveAck = ' ';
    27b6:	80 e2       	ldi	r24, 0x20	; 32
    27b8:	80 93 ce 02 	sts	0x02CE, r24
				}
			}
			///if acknowledge received from throwing mechanism after throwing then back to loading zone 2
			if(backtoLZ2 && task6 && !task7){
    27bc:	80 91 dc 02 	lds	r24, 0x02DC
    27c0:	88 23       	and	r24, r24
    27c2:	09 f4       	brne	.+2      	; 0x27c6 <__stack+0x5c7>
    27c4:	48 c0       	rjmp	.+144    	; 0x2856 <__stack+0x657>
    27c6:	80 91 d3 02 	lds	r24, 0x02D3
    27ca:	88 23       	and	r24, r24
    27cc:	09 f4       	brne	.+2      	; 0x27d0 <__stack+0x5d1>
    27ce:	43 c0       	rjmp	.+134    	; 0x2856 <__stack+0x657>
    27d0:	80 91 d2 02 	lds	r24, 0x02D2
    27d4:	81 11       	cpse	r24, r1
    27d6:	43 c0       	rjmp	.+134    	; 0x285e <__stack+0x65f>
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    27d8:	ed e6       	ldi	r30, 0x6D	; 109
    27da:	f3 e0       	ldi	r31, 0x03	; 3
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	a0 e0       	ldi	r26, 0x00	; 0
    27e2:	b0 e4       	ldi	r27, 0x40	; 64
    27e4:	85 8b       	std	Z+21, r24	; 0x15
    27e6:	96 8b       	std	Z+22, r25	; 0x16
    27e8:	a7 8b       	std	Z+23, r26	; 0x17
    27ea:	b0 8f       	std	Z+24, r27	; 0x18
		ki = i;
    27ec:	11 8e       	std	Z+25, r1	; 0x19
    27ee:	12 8e       	std	Z+26, r1	; 0x1a
    27f0:	13 8e       	std	Z+27, r1	; 0x1b
    27f2:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	a0 ef       	ldi	r26, 0xF0	; 240
    27fa:	b1 e4       	ldi	r27, 0x41	; 65
    27fc:	85 8f       	std	Z+29, r24	; 0x1d
    27fe:	96 8f       	std	Z+30, r25	; 0x1e
    2800:	a7 8f       	std	Z+31, r26	; 0x1f
    2802:	b0 a3       	std	Z+32, r27	; 0x20
					//if(abs(encoderX.getdistance()) >= 400){
						//linetrackerXjunctionWatch();
					//}
				//}
				//else{
					Move_Yaxis(Throwingzone2.y+50, Back, LZ2toTZ2);
    2804:	44 e6       	ldi	r20, 0x64	; 100
    2806:	50 e0       	ldi	r21, 0x00	; 0
    2808:	63 e0       	ldi	r22, 0x03	; 3
    280a:	70 e0       	ldi	r23, 0x00	; 0
    280c:	8e e9       	ldi	r24, 0x9E	; 158
    280e:	97 e0       	ldi	r25, 0x07	; 7
    2810:	36 da       	rcall	.-2964   	; 0x1c7e <_Z10Move_Yaxisiij>
					//movy(Throwingzone2.y,Back,TZ2toLZ2);
					robotState = moving;
    2812:	87 e0       	ldi	r24, 0x07	; 7
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	90 93 06 02 	sts	0x0206, r25
    281a:	80 93 05 02 	sts	0x0205, r24
			
					if(abs(encoderY.getdistance()) >= 1200){
    281e:	8e eb       	ldi	r24, 0xBE	; 190
    2820:	92 e0       	ldi	r25, 0x02	; 2
    2822:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    2826:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
    282a:	9b 01       	movw	r18, r22
    282c:	77 23       	and	r23, r23
    282e:	24 f4       	brge	.+8      	; 0x2838 <__stack+0x639>
    2830:	22 27       	eor	r18, r18
    2832:	33 27       	eor	r19, r19
    2834:	26 1b       	sub	r18, r22
    2836:	37 0b       	sbc	r19, r23
    2838:	20 3b       	cpi	r18, 0xB0	; 176
    283a:	34 40       	sbci	r19, 0x04	; 4
    283c:	ec f0       	brlt	.+58     	; 0x2878 <__stack+0x679>
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    283e:	78 94       	sei
	PCICR |= (1<<PCIE2);
    2840:	e8 e6       	ldi	r30, 0x68	; 104
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	80 81       	ld	r24, Z
    2846:	84 60       	ori	r24, 0x04	; 4
    2848:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT23);
    284a:	ed e6       	ldi	r30, 0x6D	; 109
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	80 68       	ori	r24, 0x80	; 128
    2852:	80 83       	st	Z, r24
    2854:	11 c0       	rjmp	.+34     	; 0x2878 <__stack+0x679>
				//uart0_puts("\r\n");
				
			}
			/*if after returning from throwing zone2 junction on line is detected then stop and wait for
			communication*/
			else if(task7 && robotState == moving && where == inTZ2 ){
    2856:	80 91 d2 02 	lds	r24, 0x02D2
    285a:	88 23       	and	r24, r24
    285c:	69 f0       	breq	.+26     	; 0x2878 <__stack+0x679>
    285e:	80 91 05 02 	lds	r24, 0x0205
    2862:	90 91 06 02 	lds	r25, 0x0206
    2866:	07 97       	sbiw	r24, 0x07	; 7
    2868:	39 f4       	brne	.+14     	; 0x2878 <__stack+0x679>
    286a:	80 91 d9 02 	lds	r24, 0x02D9
    286e:	90 91 da 02 	lds	r25, 0x02DA
    2872:	03 97       	sbiw	r24, 0x03	; 3
    2874:	09 f4       	brne	.+2      	; 0x2878 <__stack+0x679>
    2876:	29 c2       	rjmp	.+1106   	; 0x2cca <__stack+0xacb>
				ShuttleCockArmGone = false;
				backtoLZ2 = false;
			}
			
			/*if golden rack is given to automatic robot and says goto throwingzone 1*/
			if(GoThrowingZone3 && !task8){
    2878:	80 91 de 02 	lds	r24, 0x02DE
    287c:	88 23       	and	r24, r24
    287e:	09 f4       	brne	.+2      	; 0x2882 <__stack+0x683>
    2880:	4f c0       	rjmp	.+158    	; 0x2920 <__stack+0x721>
    2882:	80 91 d1 02 	lds	r24, 0x02D1
    2886:	81 11       	cpse	r24, r1
    2888:	4f c0       	rjmp	.+158    	; 0x2928 <__stack+0x729>
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    288a:	cd e6       	ldi	r28, 0x6D	; 109
    288c:	d3 e0       	ldi	r29, 0x03	; 3
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	a0 e0       	ldi	r26, 0x00	; 0
    2894:	b0 e4       	ldi	r27, 0x40	; 64
    2896:	8d 8b       	std	Y+21, r24	; 0x15
    2898:	9e 8b       	std	Y+22, r25	; 0x16
    289a:	af 8b       	std	Y+23, r26	; 0x17
    289c:	b8 8f       	std	Y+24, r27	; 0x18
		ki = i;
    289e:	19 8e       	std	Y+25, r1	; 0x19
    28a0:	1a 8e       	std	Y+26, r1	; 0x1a
    28a2:	1b 8e       	std	Y+27, r1	; 0x1b
    28a4:	1c 8e       	std	Y+28, r1	; 0x1c
		kd = d;
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	a0 ef       	ldi	r26, 0xF0	; 240
    28ac:	b1 e4       	ldi	r27, 0x41	; 65
    28ae:	8d 8f       	std	Y+29, r24	; 0x1d
    28b0:	9e 8f       	std	Y+30, r25	; 0x1e
    28b2:	af 8f       	std	Y+31, r26	; 0x1f
    28b4:	b8 a3       	std	Y+32, r27	; 0x20
				compass.setPid(2.0,0,30);//2.0
				uart0_puts("going tz3 \t");
    28b6:	89 e8       	ldi	r24, 0x89	; 137
    28b8:	92 e0       	ldi	r25, 0x02	; 2
    28ba:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <_Z10uart0_putsPKc>
				compass.SETPOINT = 181;
    28be:	85 eb       	ldi	r24, 0xB5	; 181
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	9f 87       	std	Y+15, r25	; 0x0f
    28c4:	8e 87       	std	Y+14, r24	; 0x0e
				Move_Yaxis(Throwingzone3.y-50, Front, LZ2toTZ3);
    28c6:	46 e9       	ldi	r20, 0x96	; 150
    28c8:	50 e0       	ldi	r21, 0x00	; 0
    28ca:	62 e0       	ldi	r22, 0x02	; 2
    28cc:	70 e0       	ldi	r23, 0x00	; 0
    28ce:	8e e1       	ldi	r24, 0x1E	; 30
    28d0:	94 e1       	ldi	r25, 0x14	; 20
    28d2:	d5 d9       	rcall	.-3158   	; 0x1c7e <_Z10Move_Yaxisiij>
				//movy(5300,Front,LZ2toTZ3);
				robotState = moving;
    28d4:	87 e0       	ldi	r24, 0x07	; 7
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	90 93 06 02 	sts	0x0206, r25
    28dc:	80 93 05 02 	sts	0x0205, r24
				if(abs(encoderY.getdistance()) >= 4000){
    28e0:	8e eb       	ldi	r24, 0xBE	; 190
    28e2:	92 e0       	ldi	r25, 0x02	; 2
    28e4:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    28e8:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
    28ec:	9b 01       	movw	r18, r22
    28ee:	77 23       	and	r23, r23
    28f0:	24 f4       	brge	.+8      	; 0x28fa <__stack+0x6fb>
    28f2:	22 27       	eor	r18, r18
    28f4:	33 27       	eor	r19, r19
    28f6:	26 1b       	sub	r18, r22
    28f8:	37 0b       	sbc	r19, r23
    28fa:	20 3a       	cpi	r18, 0xA0	; 160
    28fc:	3f 40       	sbci	r19, 0x0F	; 15
    28fe:	e4 f1       	brlt	.+120    	; 0x2978 <__stack+0x779>
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    2900:	78 94       	sei
	PCICR |= (1<<PCIE2);
    2902:	e8 e6       	ldi	r30, 0x68	; 104
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	80 81       	ld	r24, Z
    2908:	84 60       	ori	r24, 0x04	; 4
    290a:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT23);
    290c:	ed e6       	ldi	r30, 0x6D	; 109
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	80 68       	ori	r24, 0x80	; 128
    2914:	80 83       	st	Z, r24
					linetrackerYjunctionWatch();	
					uart0_puts("interrupt on");
    2916:	85 e9       	ldi	r24, 0x95	; 149
    2918:	92 e0       	ldi	r25, 0x02	; 2
    291a:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <_Z10uart0_putsPKc>
    291e:	2c c0       	rjmp	.+88     	; 0x2978 <__stack+0x779>
				}
				//uart0_puts("\r\n");
			}
			/*if throwing zone 3 has just reached */
			else if(task8 && where == inLZ2 && robotState == moving){
    2920:	80 91 d1 02 	lds	r24, 0x02D1
    2924:	88 23       	and	r24, r24
    2926:	41 f1       	breq	.+80     	; 0x2978 <__stack+0x779>
    2928:	80 91 d9 02 	lds	r24, 0x02D9
    292c:	90 91 da 02 	lds	r25, 0x02DA
    2930:	06 97       	sbiw	r24, 0x06	; 6
    2932:	09 f0       	breq	.+2      	; 0x2936 <__stack+0x737>
    2934:	4c c2       	rjmp	.+1176   	; 0x2dce <__stack+0xbcf>
    2936:	80 91 05 02 	lds	r24, 0x0205
    293a:	90 91 06 02 	lds	r25, 0x0206
    293e:	07 97       	sbiw	r24, 0x07	; 7
    2940:	09 f0       	breq	.+2      	; 0x2944 <__stack+0x745>
    2942:	45 c2       	rjmp	.+1162   	; 0x2dce <__stack+0xbcf>
    2944:	e5 c1       	rjmp	.+970    	; 0x2d10 <__stack+0xb11>
				//give command to throwing mechanism to throw.
				//uart3_putc('3');
			}
			/* if in throwing zone 3 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			else if(task8 && where == inTZ3 && robotState == notmoving){
    2946:	80 91 05 02 	lds	r24, 0x0205
    294a:	90 91 06 02 	lds	r25, 0x0206
    294e:	08 97       	sbiw	r24, 0x08	; 8
    2950:	99 f4       	brne	.+38     	; 0x2978 <__stack+0x779>
    2952:	fc c1       	rjmp	.+1016   	; 0x2d4c <__stack+0xb4d>
// 				if (!check_stable_robot)
// 				{
// 					check_stable_robot = Stable_Robot();
// 				}
				Hold_Position();
				if(Goto_Fence_And_Detect() && _b_Transmit_once )	//Stable_Robot() && 
    2954:	80 91 e1 02 	lds	r24, 0x02E1
    2958:	81 11       	cpse	r24, r1
    295a:	fe c1       	rjmp	.+1020   	; 0x2d58 <__stack+0xb59>
				{	
					//uart0_puts("below \r\n");
					uart3_putc('3');
					_b_Transmit_once = false;
				}
				receiveAck = uart3_getc();
    295c:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <_Z10uart3_getcv>
    2960:	80 93 ce 02 	sts	0x02CE, r24
				if(receiveAck == 'g'){
    2964:	87 36       	cpi	r24, 0x67	; 103
    2966:	41 f4       	brne	.+16     	; 0x2978 <__stack+0x779>
					backtoLZ2 = true;
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	80 93 dc 02 	sts	0x02DC, r24
					GoThrowingZone3 = false;
    296e:	10 92 de 02 	sts	0x02DE, r1
					receiveAck = ' ';
    2972:	80 e2       	ldi	r24, 0x20	; 32
    2974:	80 93 ce 02 	sts	0x02CE, r24
				}
			}
			/*if acknowledge received from throwing mechanism after throwing then back to loading zone 2*/
			if(backtoLZ2 && task8 && !task9){
    2978:	80 91 dc 02 	lds	r24, 0x02DC
    297c:	88 23       	and	r24, r24
    297e:	09 f4       	brne	.+2      	; 0x2982 <__stack+0x783>
    2980:	41 c0       	rjmp	.+130    	; 0x2a04 <__stack+0x805>
    2982:	80 91 d1 02 	lds	r24, 0x02D1
    2986:	88 23       	and	r24, r24
    2988:	e9 f1       	breq	.+122    	; 0x2a04 <__stack+0x805>
    298a:	80 91 d0 02 	lds	r24, 0x02D0
    298e:	81 11       	cpse	r24, r1
    2990:	3e c0       	rjmp	.+124    	; 0x2a0e <__stack+0x80f>
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2992:	ed e6       	ldi	r30, 0x6D	; 109
    2994:	f3 e0       	ldi	r31, 0x03	; 3
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	a0 e0       	ldi	r26, 0x00	; 0
    299c:	b0 e4       	ldi	r27, 0x40	; 64
    299e:	85 8b       	std	Z+21, r24	; 0x15
    29a0:	96 8b       	std	Z+22, r25	; 0x16
    29a2:	a7 8b       	std	Z+23, r26	; 0x17
    29a4:	b0 8f       	std	Z+24, r27	; 0x18
		ki = i;
    29a6:	11 8e       	std	Z+25, r1	; 0x19
    29a8:	12 8e       	std	Z+26, r1	; 0x1a
    29aa:	13 8e       	std	Z+27, r1	; 0x1b
    29ac:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	a0 ef       	ldi	r26, 0xF0	; 240
    29b4:	b1 e4       	ldi	r27, 0x41	; 65
    29b6:	85 8f       	std	Z+29, r24	; 0x1d
    29b8:	96 8f       	std	Z+30, r25	; 0x1e
    29ba:	a7 8f       	std	Z+31, r26	; 0x1f
    29bc:	b0 a3       	std	Z+32, r27	; 0x20
				////uart0_puts("back to lz2\t");
				compass.setPid(2.0,0,30);//2.0
				
					//movy(5300,Back,LZ2toTZ3);
					robotState = moving;
    29be:	87 e0       	ldi	r24, 0x07	; 7
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	90 93 06 02 	sts	0x0206, r25
    29c6:	80 93 05 02 	sts	0x0205, r24
					if(abs(encoderY.getdistance()) >= 4000){
    29ca:	8e eb       	ldi	r24, 0xBE	; 190
    29cc:	92 e0       	ldi	r25, 0x02	; 2
    29ce:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    29d2:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
    29d6:	9b 01       	movw	r18, r22
    29d8:	77 23       	and	r23, r23
    29da:	24 f4       	brge	.+8      	; 0x29e4 <__stack+0x7e5>
    29dc:	22 27       	eor	r18, r18
    29de:	33 27       	eor	r19, r19
    29e0:	26 1b       	sub	r18, r22
    29e2:	37 0b       	sbc	r19, r23
    29e4:	20 3a       	cpi	r18, 0xA0	; 160
    29e6:	3f 40       	sbci	r19, 0x0F	; 15
    29e8:	0c f4       	brge	.+2      	; 0x29ec <__stack+0x7ed>
    29ea:	f9 c1       	rjmp	.+1010   	; 0x2dde <__stack+0xbdf>
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    29ec:	78 94       	sei
	PCICR |= (1<<PCIE2);
    29ee:	e8 e6       	ldi	r30, 0x68	; 104
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	80 81       	ld	r24, Z
    29f4:	84 60       	ori	r24, 0x04	; 4
    29f6:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT23);
    29f8:	ed e6       	ldi	r30, 0x6D	; 109
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	80 81       	ld	r24, Z
    29fe:	80 68       	ori	r24, 0x80	; 128
    2a00:	80 83       	st	Z, r24
    2a02:	ed c1       	rjmp	.+986    	; 0x2dde <__stack+0xbdf>
					}
				////uart0_puts("\r\n");
			}
			/*if after returning from throwing zone3 junction on line is detected then stop and wait for
			communication*/
			else if(task9 && robotState == moving && where == inTZ3 ){
    2a04:	80 91 d0 02 	lds	r24, 0x02D0
    2a08:	88 23       	and	r24, r24
    2a0a:	09 f4       	brne	.+2      	; 0x2a0e <__stack+0x80f>
    2a0c:	e8 c1       	rjmp	.+976    	; 0x2dde <__stack+0xbdf>
    2a0e:	80 91 05 02 	lds	r24, 0x0205
    2a12:	90 91 06 02 	lds	r25, 0x0206
    2a16:	07 97       	sbiw	r24, 0x07	; 7
    2a18:	09 f0       	breq	.+2      	; 0x2a1c <__stack+0x81d>
    2a1a:	e1 c1       	rjmp	.+962    	; 0x2dde <__stack+0xbdf>
    2a1c:	80 91 d9 02 	lds	r24, 0x02D9
    2a20:	90 91 da 02 	lds	r25, 0x02DA
    2a24:	04 97       	sbiw	r24, 0x04	; 4
    2a26:	09 f0       	breq	.+2      	; 0x2a2a <__stack+0x82b>
    2a28:	da c1       	rjmp	.+948    	; 0x2dde <__stack+0xbdf>
    2a2a:	9c c1       	rjmp	.+824    	; 0x2d64 <__stack+0xb65>
{
	
	if((where == inLZ1 || where == inLZ2) && robotState == notmoving){
		/*if the robot is in loading zone 1 after completing task3 and task4 
		but yet to complete task5*/ 
		if(task4 && !task5){
    2a2c:	80 91 d5 02 	lds	r24, 0x02D5
    2a30:	81 11       	cpse	r24, r1
    2a32:	9c cb       	rjmp	.-2248   	; 0x216c <_Z18gorockthegamefieldv+0x2e>
    2a34:	a8 cb       	rjmp	.-2224   	; 0x2186 <_Z18gorockthegamefieldv+0x48>
			
			/*if there is manual robot infront of automatic robot*/
			
			else{
				/*if there is manual robot ahead of automatic robot then goto throwing zone1*/
				GoThrowingZone1 = true;
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	80 93 e0 02 	sts	0x02E0, r24
				task3 = task4 = false;
    2a3c:	10 92 d5 02 	sts	0x02D5, r1
    2a40:	10 92 d6 02 	sts	0x02D6, r1
				updateZoneflag();
    2a44:	b8 da       	rcall	.-2704   	; 0x1fb6 <_Z14updateZoneflagv>
    2a46:	d5 cb       	rjmp	.-2134   	; 0x21f2 <_Z18gorockthegamefieldv+0xb4>
		but yet to complete task5*/ 
		if(task4 && !task5){
			/*if there is no manual robot infront of automatic robot*/
			if((ZONE_STATUSPORT & (1<<ZONE_STATUSPIN)) && !alwaysTZ1){
				/*go directly to loading zone 2 and manual robot is waiting there*/
				where = inLZ1;
    2a48:	85 e0       	ldi	r24, 0x05	; 5
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	90 93 da 02 	sts	0x02DA, r25
    2a50:	80 93 d9 02 	sts	0x02D9, r24
				gotoLZ2 = true;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	80 93 db 02 	sts	0x02DB, r24
				ShuttleCockGiven = true;	
    2a5a:	80 93 e4 02 	sts	0x02E4, r24
				ShuttleCockArmGone = true;
    2a5e:	80 93 e2 02 	sts	0x02E2, r24
    2a62:	c7 cb       	rjmp	.-2162   	; 0x21f2 <_Z18gorockthegamefieldv+0xb4>
				updateZoneflag();
				Hold_Position();
 			}
			//if always throw from throwing zone 2
			//automatic robot must force to know there is manual robot ahead.
			else if(alwaysTZ2){
    2a64:	80 91 c1 04 	lds	r24, 0x04C1
    2a68:	81 11       	cpse	r24, r1
    2a6a:	b8 cb       	rjmp	.-2192   	; 0x21dc <_Z18gorockthegamefieldv+0x9e>
    2a6c:	bd cb       	rjmp	.-2182   	; 0x21e8 <_Z18gorockthegamefieldv+0xaa>
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2a6e:	ed e6       	ldi	r30, 0x6D	; 109
    2a70:	f3 e0       	ldi	r31, 0x03	; 3
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	a0 e0       	ldi	r26, 0x00	; 0
    2a78:	b0 e4       	ldi	r27, 0x40	; 64
    2a7a:	85 8b       	std	Z+21, r24	; 0x15
    2a7c:	96 8b       	std	Z+22, r25	; 0x16
    2a7e:	a7 8b       	std	Z+23, r26	; 0x17
    2a80:	b0 8f       	std	Z+24, r27	; 0x18
		ki = i;
    2a82:	11 8e       	std	Z+25, r1	; 0x19
    2a84:	12 8e       	std	Z+26, r1	; 0x1a
    2a86:	13 8e       	std	Z+27, r1	; 0x1b
    2a88:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	a0 ef       	ldi	r26, 0xF0	; 240
    2a90:	b1 e4       	ldi	r27, 0x41	; 65
    2a92:	85 8f       	std	Z+29, r24	; 0x1d
    2a94:	96 8f       	std	Z+30, r25	; 0x1e
    2a96:	a7 8f       	std	Z+31, r26	; 0x1f
    2a98:	b0 a3       	std	Z+32, r27	; 0x20
	
	////move from start zone to corner of loading zone
	if(!task1 && where == inStart_point && (normalGame||alwaysTZ1)){	
		compass.setPid(2.0,0,30);
		//uart0_puts("hello\r\n");
		movx(Throwingzone1.x,Front,STARTZONEtoCORNER);
    2a9a:	48 ec       	ldi	r20, 0xC8	; 200
    2a9c:	50 e0       	ldi	r21, 0x00	; 0
    2a9e:	62 e0       	ldi	r22, 0x02	; 2
    2aa0:	70 e0       	ldi	r23, 0x00	; 0
    2aa2:	88 ef       	ldi	r24, 0xF8	; 248
    2aa4:	91 e1       	ldi	r25, 0x11	; 17
    2aa6:	0e 94 c5 08 	call	0x118a	; 0x118a <_Z4movxiij>
		//movDegree(8);
		robotState = moving;
    2aaa:	87 e0       	ldi	r24, 0x07	; 7
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	90 93 06 02 	sts	0x0206, r25
    2ab2:	80 93 05 02 	sts	0x0205, r24
		//uart0_puts("going ahead \t");
		if(abs(encoderX.getdistance()) >= 4400){
    2ab6:	86 ec       	ldi	r24, 0xC6	; 198
    2ab8:	92 e0       	ldi	r25, 0x02	; 2
    2aba:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    2abe:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
    2ac2:	9b 01       	movw	r18, r22
    2ac4:	77 23       	and	r23, r23
    2ac6:	24 f4       	brge	.+8      	; 0x2ad0 <__stack+0x8d1>
    2ac8:	22 27       	eor	r18, r18
    2aca:	33 27       	eor	r19, r19
    2acc:	26 1b       	sub	r18, r22
    2ace:	37 0b       	sbc	r19, r23
    2ad0:	20 33       	cpi	r18, 0x30	; 48
    2ad2:	31 41       	sbci	r19, 0x11	; 17
    2ad4:	0c f0       	brlt	.+2      	; 0x2ad8 <__stack+0x8d9>
    2ad6:	a1 cb       	rjmp	.-2238   	; 0x221a <__stack+0x1b>
    2ad8:	da cc       	rjmp	.-1612   	; 0x248e <__stack+0x28f>
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT23);
    2ada:	ed e6       	ldi	r30, 0x6D	; 109
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	80 81       	ld	r24, Z
    2ae0:	8f 77       	andi	r24, 0x7F	; 127
    2ae2:	80 83       	st	Z, r24
		encoderX.resetCount();
		encoderY.resetCount();
	}
	else if(where == inFirstloadingCorner && task2 && (directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && robotState == moving){
		linetrackerYjunctionWatchOff();
		uart3_putc('h');
    2ae4:	88 e6       	ldi	r24, 0x68	; 104
    2ae6:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <_Z10uart3_putch>
		startingAtFront = false;
    2aea:	10 92 22 02 	sts	0x0222, r1
		where = inLZ2;
    2aee:	86 e0       	ldi	r24, 0x06	; 6
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	90 93 da 02 	sts	0x02DA, r25
    2af6:	80 93 d9 02 	sts	0x02D9, r24
		robotState = notmoving;
    2afa:	88 e0       	ldi	r24, 0x08	; 8
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	90 93 06 02 	sts	0x0206, r25
    2b02:	80 93 05 02 	sts	0x0205, r24
		BrakeMotor();
    2b06:	0e 94 d2 05 	call	0xba4	; 0xba4 <_Z10BrakeMotorv>
    2b0a:	10 92 c7 02 	sts	0x02C7, r1
    2b0e:	10 92 c6 02 	sts	0x02C6, r1
    2b12:	10 92 bf 02 	sts	0x02BF, r1
    2b16:	10 92 be 02 	sts	0x02BE, r1
		encoderX.resetCount();
		encoderY.resetCount();
		if(directlyLZ2){
    2b1a:	80 91 c4 04 	lds	r24, 0x04C4
    2b1e:	81 11       	cpse	r24, r1
    2b20:	67 cc       	rjmp	.-1842   	; 0x23f0 <__stack+0x1f1>
    2b22:	74 cc       	rjmp	.-1816   	; 0x240c <__stack+0x20d>
					//uart0_puts("INT ON");
				}
				//uart0_puts("\r\n");
			}
			/* if task3 is completed and robot just reached throwingzone 1 then*/
			else if(task3 && !task4 && where == inLZ1 && robotState == moving){
    2b24:	80 91 d6 02 	lds	r24, 0x02D6
    2b28:	88 23       	and	r24, r24
    2b2a:	09 f4       	brne	.+2      	; 0x2b2e <__stack+0x92f>
    2b2c:	e7 cc       	rjmp	.-1586   	; 0x24fc <__stack+0x2fd>
    2b2e:	d5 cc       	rjmp	.-1622   	; 0x24da <__stack+0x2db>
	if(ShuttleCockGiven && ShuttleCockArmGone)
	{
		/*if manual robot is ahead of automatic robot and automatic robot
		has not completed task3*/
			if(GoThrowingZone1 && !task3 && where == inLZ1){
				robotState = moving;
    2b30:	87 e0       	ldi	r24, 0x07	; 7
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	90 93 06 02 	sts	0x0206, r25
    2b38:	80 93 05 02 	sts	0x0205, r24
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2b3c:	ed e6       	ldi	r30, 0x6D	; 109
    2b3e:	f3 e0       	ldi	r31, 0x03	; 3
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	a0 e0       	ldi	r26, 0x00	; 0
    2b46:	b0 e4       	ldi	r27, 0x40	; 64
    2b48:	85 8b       	std	Z+21, r24	; 0x15
    2b4a:	96 8b       	std	Z+22, r25	; 0x16
    2b4c:	a7 8b       	std	Z+23, r26	; 0x17
    2b4e:	b0 8f       	std	Z+24, r27	; 0x18
		ki = i;
    2b50:	11 8e       	std	Z+25, r1	; 0x19
    2b52:	12 8e       	std	Z+26, r1	; 0x1a
    2b54:	13 8e       	std	Z+27, r1	; 0x1b
    2b56:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	a0 ef       	ldi	r26, 0xF0	; 240
    2b5e:	b1 e4       	ldi	r27, 0x41	; 65
    2b60:	85 8f       	std	Z+29, r24	; 0x1d
    2b62:	96 8f       	std	Z+30, r25	; 0x1e
    2b64:	a7 8f       	std	Z+31, r26	; 0x1f
    2b66:	b0 a3       	std	Z+32, r27	; 0x20
				compass.setPid(2.0,0,30);
				Move_Yaxis(Throwingzone1.y+50,Front,LZ1toTZ1);
    2b68:	44 e6       	ldi	r20, 0x64	; 100
    2b6a:	50 e0       	ldi	r21, 0x00	; 0
    2b6c:	62 e0       	ldi	r22, 0x02	; 2
    2b6e:	70 e0       	ldi	r23, 0x00	; 0
    2b70:	8e e9       	ldi	r24, 0x9E	; 158
    2b72:	97 e0       	ldi	r25, 0x07	; 7
    2b74:	84 d8       	rcall	.-3832   	; 0x1c7e <_Z10Move_Yaxisiij>
				//movy(Throwingzone1.y,Front,LZ1toTZ1);
				uart0_puts("going tz1\t");
    2b76:	82 ea       	ldi	r24, 0xA2	; 162
    2b78:	92 e0       	ldi	r25, 0x02	; 2
    2b7a:	ba d7       	rcall	.+3956   	; 0x3af0 <_Z10uart0_putsPKc>
				if(abs(encoderY.getdistance()) >= 1600){
    2b7c:	8e eb       	ldi	r24, 0xBE	; 190
    2b7e:	92 e0       	ldi	r25, 0x02	; 2
    2b80:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    2b84:	0e 94 2f 20 	call	0x405e	; 0x405e <__fixsfsi>
    2b88:	9b 01       	movw	r18, r22
    2b8a:	77 23       	and	r23, r23
    2b8c:	24 f4       	brge	.+8      	; 0x2b96 <__stack+0x997>
    2b8e:	22 27       	eor	r18, r18
    2b90:	33 27       	eor	r19, r19
    2b92:	26 1b       	sub	r18, r22
    2b94:	37 0b       	sbc	r19, r23
    2b96:	20 34       	cpi	r18, 0x40	; 64
    2b98:	36 40       	sbci	r19, 0x06	; 6
    2b9a:	0c f0       	brlt	.+2      	; 0x2b9e <__stack+0x99f>
    2b9c:	92 cc       	rjmp	.-1756   	; 0x24c2 <__stack+0x2c3>
    2b9e:	ae cc       	rjmp	.-1700   	; 0x24fc <__stack+0x2fd>
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT23);
    2ba0:	ed e6       	ldi	r30, 0x6D	; 109
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	80 81       	ld	r24, Z
    2ba6:	8f 77       	andi	r24, 0x7F	; 127
    2ba8:	80 83       	st	Z, r24
			}
			/* if task3 is completed and robot just reached throwingzone 1 then*/
			else if(task3 && !task4 && where == inLZ1 && robotState == moving){
				linetrackerYjunctionWatchOff();
				//uart0_puts("reached throwing zone 1\r\n");
				BrakeMotor();
    2baa:	0e 94 d2 05 	call	0xba4	; 0xba4 <_Z10BrakeMotorv>
				//uart3_putc('1');
				where = inTZ1;
    2bae:	82 e0       	ldi	r24, 0x02	; 2
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	90 93 da 02 	sts	0x02DA, r25
    2bb6:	80 93 d9 02 	sts	0x02D9, r24
    2bba:	10 92 c7 02 	sts	0x02C7, r1
    2bbe:	10 92 c6 02 	sts	0x02C6, r1
    2bc2:	10 92 bf 02 	sts	0x02BF, r1
    2bc6:	10 92 be 02 	sts	0x02BE, r1
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2bca:	88 e0       	ldi	r24, 0x08	; 8
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	90 93 06 02 	sts	0x0206, r25
    2bd2:	80 93 05 02 	sts	0x0205, r24
    2bd6:	92 cc       	rjmp	.-1756   	; 0x24fc <__stack+0x2fd>
			}
			/* if in throwing zone 1 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ1 && robotState == notmoving){
			//	uart0_puts("Throwing \r\n");
				Hold_Position();
    2bd8:	c0 d9       	rcall	.-3200   	; 0x1f5a <_Z13Hold_Positionv>

				if(_b_Transmit_once)	//Stable_Robot() && 
    2bda:	80 91 e1 02 	lds	r24, 0x02E1
    2bde:	88 23       	and	r24, r24
    2be0:	09 f4       	brne	.+2      	; 0x2be4 <__stack+0x9e5>
    2be2:	9e cc       	rjmp	.-1732   	; 0x2520 <__stack+0x321>
    2be4:	98 cc       	rjmp	.-1744   	; 0x2516 <__stack+0x317>
    2be6:	ed e6       	ldi	r30, 0x6D	; 109
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	80 81       	ld	r24, Z
    2bec:	8f 77       	andi	r24, 0x7F	; 127
    2bee:	80 83       	st	Z, r24
			/*if after returning from throwing zone1, junction on line is detected i.e loading zone1 
			then stop and wait for communication*/
			else if(task4 && robotState == moving && where == inTZ1){
				//uart0_puts("REached loading zone 1\r\n");
				linetrackerYjunctionWatchOff();
				where = inLZ1;
    2bf0:	85 e0       	ldi	r24, 0x05	; 5
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	90 93 da 02 	sts	0x02DA, r25
    2bf8:	80 93 d9 02 	sts	0x02D9, r24
				BrakeMotor();
    2bfc:	0e 94 d2 05 	call	0xba4	; 0xba4 <_Z10BrakeMotorv>
    2c00:	10 92 c7 02 	sts	0x02C7, r1
    2c04:	10 92 c6 02 	sts	0x02C6, r1
    2c08:	10 92 bf 02 	sts	0x02BF, r1
    2c0c:	10 92 be 02 	sts	0x02BE, r1
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2c10:	88 e0       	ldi	r24, 0x08	; 8
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	90 93 06 02 	sts	0x0206, r25
    2c18:	80 93 05 02 	sts	0x0205, r24
				//this statement below determines automatic robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2c1c:	10 92 e4 02 	sts	0x02E4, r1
				ShuttleCockArmGone = false;
    2c20:	10 92 e2 02 	sts	0x02E2, r1
				backtoLZ1 = false;
    2c24:	10 92 dd 02 	sts	0x02DD, r1
    2c28:	40 cd       	rjmp	.-1408   	; 0x26aa <__stack+0x4ab>
			}
			/*if there is no manual robot ahead of automatic robot go to loading zone 2*/
			else if(gotoLZ2 && !task5){
    2c2a:	80 91 db 02 	lds	r24, 0x02DB
    2c2e:	81 11       	cpse	r24, r1
    2c30:	e7 cc       	rjmp	.-1586   	; 0x2600 <__stack+0x401>
    2c32:	2a cd       	rjmp	.-1452   	; 0x2688 <__stack+0x489>
			
			}
			/*if X junction near loading zone 2 is detected and robot was previously on loading zone 1*/
			else if(task5 && robotState == moving && where == inLZ1){
				//uart0_puts("reached loading zone 2\r\n");
				gotoLZ2 = false;
    2c34:	10 92 db 02 	sts	0x02DB, r1
	sei();
	PCICR |= (1<<PCIE2);
	PCMSK2 |= (1<<PCINT23);
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
    2c38:	eb e6       	ldi	r30, 0x6B	; 107
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	8f 7e       	andi	r24, 0xEF	; 239
    2c40:	80 83       	st	Z, r24
				linetrackerXjunctionWatchOff();
				BrakeMotor();
    2c42:	0e 94 d2 05 	call	0xba4	; 0xba4 <_Z10BrakeMotorv>
				where = inLZ2;
    2c46:	86 e0       	ldi	r24, 0x06	; 6
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	90 93 da 02 	sts	0x02DA, r25
    2c4e:	80 93 d9 02 	sts	0x02D9, r24
				robotState = notmoving;
    2c52:	88 e0       	ldi	r24, 0x08	; 8
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	90 93 06 02 	sts	0x0206, r25
    2c5a:	80 93 05 02 	sts	0x0205, r24
    2c5e:	10 92 c7 02 	sts	0x02C7, r1
    2c62:	10 92 c6 02 	sts	0x02C6, r1
    2c66:	10 92 bf 02 	sts	0x02BF, r1
    2c6a:	10 92 be 02 	sts	0x02BE, r1
				encoderX.resetCount();
				encoderY.resetCount();
				//this statement below determines automatic robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2c6e:	10 92 e4 02 	sts	0x02E4, r1
				ShuttleCockArmGone = false;
    2c72:	10 92 e2 02 	sts	0x02E2, r1
    2c76:	19 cd       	rjmp	.-1486   	; 0x26aa <__stack+0x4ab>

			}
			/*if robot just reached throwingzone 2 */
			else if(task6 && !task7 && where == inLZ2 && robotState == moving){
				//uart0_puts("Reached tz2 \r\n");
				where = inTZ2;
    2c78:	83 e0       	ldi	r24, 0x03	; 3
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	90 93 da 02 	sts	0x02DA, r25
    2c80:	80 93 d9 02 	sts	0x02D9, r24
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT23);
    2c84:	ed e6       	ldi	r30, 0x6D	; 109
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	80 81       	ld	r24, Z
    2c8a:	8f 77       	andi	r24, 0x7F	; 127
    2c8c:	80 83       	st	Z, r24
    2c8e:	10 92 c7 02 	sts	0x02C7, r1
    2c92:	10 92 c6 02 	sts	0x02C6, r1
    2c96:	10 92 bf 02 	sts	0x02BF, r1
    2c9a:	10 92 be 02 	sts	0x02BE, r1
				linetrackerYjunctionWatchOff();
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2c9e:	88 e0       	ldi	r24, 0x08	; 8
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	90 93 06 02 	sts	0x0206, r25
    2ca6:	80 93 05 02 	sts	0x0205, r24
				BrakeMotor();
    2caa:	0e 94 d2 05 	call	0xba4	; 0xba4 <_Z10BrakeMotorv>
    2cae:	5e cd       	rjmp	.-1348   	; 0x276c <__stack+0x56d>
			if(where == inTZ2 && robotState == notmoving){
// 				if (!check_stable_robot)
// 				{
// 					check_stable_robot = Stable_Robot();
// 				}
				velocity_robot[0] =0;
    2cb0:	e5 ef       	ldi	r30, 0xF5	; 245
    2cb2:	f3 e0       	ldi	r31, 0x03	; 3
    2cb4:	11 82       	std	Z+1, r1	; 0x01
    2cb6:	10 82       	st	Z, r1
				velocity_robot[1]=0;
    2cb8:	13 82       	std	Z+3, r1	; 0x03
    2cba:	12 82       	std	Z+2, r1	; 0x02
				Hold_Position();
    2cbc:	4e d9       	rcall	.-3428   	; 0x1f5a <_Z13Hold_Positionv>
				if(/*check_stable_robot &&Goto_Fence_And_Detect() &&*/ _b_Transmit_once)	//Stable_Robot() &&
    2cbe:	80 91 e1 02 	lds	r24, 0x02E1
    2cc2:	88 23       	and	r24, r24
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <__stack+0xac9>
    2cc6:	6c cd       	rjmp	.-1320   	; 0x27a0 <__stack+0x5a1>
    2cc8:	5e cd       	rjmp	.-1348   	; 0x2786 <__stack+0x587>
				
			}
			/*if after returning from throwing zone2 junction on line is detected then stop and wait for
			communication*/
			else if(task7 && robotState == moving && where == inTZ2 ){
				Hold_Position();
    2cca:	47 d9       	rcall	.-3442   	; 0x1f5a <_Z13Hold_Positionv>
    2ccc:	ed e6       	ldi	r30, 0x6D	; 109
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
    2cd2:	8f 77       	andi	r24, 0x7F	; 127
    2cd4:	80 83       	st	Z, r24
				//uart0_puts("reached loading zone 2 \r\n");
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    2cd6:	0e 94 d2 05 	call	0xba4	; 0xba4 <_Z10BrakeMotorv>
    2cda:	10 92 c7 02 	sts	0x02C7, r1
    2cde:	10 92 c6 02 	sts	0x02C6, r1
    2ce2:	10 92 bf 02 	sts	0x02BF, r1
    2ce6:	10 92 be 02 	sts	0x02BE, r1
				encoderX.resetCount();
				encoderY.resetCount();
				where = inLZ2;
    2cea:	86 e0       	ldi	r24, 0x06	; 6
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	90 93 da 02 	sts	0x02DA, r25
    2cf2:	80 93 d9 02 	sts	0x02D9, r24
				robotState = notmoving;
    2cf6:	88 e0       	ldi	r24, 0x08	; 8
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	90 93 06 02 	sts	0x0206, r25
    2cfe:	80 93 05 02 	sts	0x0205, r24
				//this statement below determines robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2d02:	10 92 e4 02 	sts	0x02E4, r1
				ShuttleCockArmGone = false;
    2d06:	10 92 e2 02 	sts	0x02E2, r1
				backtoLZ2 = false;
    2d0a:	10 92 dc 02 	sts	0x02DC, r1
    2d0e:	b4 cd       	rjmp	.-1176   	; 0x2878 <__stack+0x679>
    2d10:	ed e6       	ldi	r30, 0x6D	; 109
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	80 81       	ld	r24, Z
    2d16:	8f 77       	andi	r24, 0x7F	; 127
    2d18:	80 83       	st	Z, r24
			}
			/*if throwing zone 3 has just reached */
			else if(task8 && where == inLZ2 && robotState == moving){
				//uart0_puts("reached tz3\r\n");
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    2d1a:	0e 94 d2 05 	call	0xba4	; 0xba4 <_Z10BrakeMotorv>
    2d1e:	10 92 c7 02 	sts	0x02C7, r1
    2d22:	10 92 c6 02 	sts	0x02C6, r1
    2d26:	10 92 bf 02 	sts	0x02BF, r1
    2d2a:	10 92 be 02 	sts	0x02BE, r1
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2d2e:	88 e0       	ldi	r24, 0x08	; 8
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	90 93 06 02 	sts	0x0206, r25
    2d36:	80 93 05 02 	sts	0x0205, r24
				GoThrowingZone3 = false;
    2d3a:	10 92 de 02 	sts	0x02DE, r1
				where = inTZ3;
    2d3e:	84 e0       	ldi	r24, 0x04	; 4
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	90 93 da 02 	sts	0x02DA, r25
    2d46:	80 93 d9 02 	sts	0x02D9, r24
    2d4a:	16 ce       	rjmp	.-980    	; 0x2978 <__stack+0x779>
				//velocity_robot[0] = velocity_robot[1] = velocity_robot[2] = 0;
// 				if (!check_stable_robot)
// 				{
// 					check_stable_robot = Stable_Robot();
// 				}
				Hold_Position();
    2d4c:	06 d9       	rcall	.-3572   	; 0x1f5a <_Z13Hold_Positionv>
				if(Goto_Fence_And_Detect() && _b_Transmit_once )	//Stable_Robot() && 
    2d4e:	0e 94 f7 05 	call	0xbee	; 0xbee <_Z21Goto_Fence_And_Detectv>
    2d52:	81 11       	cpse	r24, r1
    2d54:	ff cd       	rjmp	.-1026   	; 0x2954 <__stack+0x755>
    2d56:	02 ce       	rjmp	.-1020   	; 0x295c <__stack+0x75d>
				{	
					//uart0_puts("below \r\n");
					uart3_putc('3');
    2d58:	83 e3       	ldi	r24, 0x33	; 51
    2d5a:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <_Z10uart3_putch>
					_b_Transmit_once = false;
    2d5e:	10 92 e1 02 	sts	0x02E1, r1
    2d62:	fc cd       	rjmp	.-1032   	; 0x295c <__stack+0x75d>
    2d64:	ed e6       	ldi	r30, 0x6D	; 109
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	80 81       	ld	r24, Z
    2d6a:	8f 77       	andi	r24, 0x7F	; 127
    2d6c:	80 83       	st	Z, r24
			/*if after returning from throwing zone3 junction on line is detected then stop and wait for
			communication*/
			else if(task9 && robotState == moving && where == inTZ3 ){
				////uart0_puts("reached loading zone 2\r\n");
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    2d6e:	0e 94 d2 05 	call	0xba4	; 0xba4 <_Z10BrakeMotorv>
    2d72:	10 92 c7 02 	sts	0x02C7, r1
    2d76:	10 92 c6 02 	sts	0x02C6, r1
    2d7a:	10 92 bf 02 	sts	0x02BF, r1
    2d7e:	10 92 be 02 	sts	0x02BE, r1
				encoderX.resetCount();
				encoderY.resetCount();
				where = inLZ2;
    2d82:	86 e0       	ldi	r24, 0x06	; 6
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	90 93 da 02 	sts	0x02DA, r25
    2d8a:	80 93 d9 02 	sts	0x02D9, r24
				robotState = notmoving;
    2d8e:	88 e0       	ldi	r24, 0x08	; 8
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	90 93 06 02 	sts	0x0206, r25
    2d96:	80 93 05 02 	sts	0x0205, r24
				//this statement below determines robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2d9a:	10 92 e4 02 	sts	0x02E4, r1
				ShuttleCockArmGone = false;
    2d9e:	10 92 e2 02 	sts	0x02E2, r1
				backtoLZ2 = false;
    2da2:	10 92 dc 02 	sts	0x02DC, r1
    2da6:	1b c0       	rjmp	.+54     	; 0x2dde <__stack+0xbdf>
		BrakeMotor();
		Hold_Position();
		encoderX.resetCount();
		encoderY.resetCount();
	}
	else if(where == inFirstloadingCorner && task2 && (directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && robotState == moving){
    2da8:	20 91 d9 02 	lds	r18, 0x02D9
    2dac:	30 91 da 02 	lds	r19, 0x02DA
    2db0:	21 30       	cpi	r18, 0x01	; 1
    2db2:	31 05       	cpc	r19, r1
    2db4:	09 f0       	breq	.+2      	; 0x2db8 <__stack+0xbb9>
    2db6:	6b cb       	rjmp	.-2346   	; 0x248e <__stack+0x28f>
    2db8:	04 cb       	rjmp	.-2552   	; 0x23c2 <__stack+0x1c3>
			linetrackerXjunctionWatch();
			//uart0_puts("int on");
		}
		//uart0_puts("\r\n");
	}
	else if((directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && !task1){
    2dba:	90 91 c4 04 	lds	r25, 0x04C4
    2dbe:	91 11       	cpse	r25, r1
    2dc0:	46 ca       	rjmp	.-2932   	; 0x224e <__stack+0x4f>
    2dc2:	37 ca       	rjmp	.-2962   	; 0x2232 <__stack+0x33>
    2dc4:	90 91 c4 04 	lds	r25, 0x04C4
    2dc8:	91 11       	cpse	r25, r1
    2dca:	6f ca       	rjmp	.-2850   	; 0x22aa <__stack+0xab>
    2dcc:	32 ca       	rjmp	.-2972   	; 0x2232 <__stack+0x33>
				//give command to throwing mechanism to throw.
				//uart3_putc('3');
			}
			/* if in throwing zone 3 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			else if(task8 && where == inTZ3 && robotState == notmoving){
    2dce:	80 91 d9 02 	lds	r24, 0x02D9
    2dd2:	90 91 da 02 	lds	r25, 0x02DA
    2dd6:	04 97       	sbiw	r24, 0x04	; 4
    2dd8:	09 f0       	breq	.+2      	; 0x2ddc <__stack+0xbdd>
    2dda:	ce cd       	rjmp	.-1124   	; 0x2978 <__stack+0x779>
    2ddc:	b4 cd       	rjmp	.-1176   	; 0x2946 <__stack+0x747>
//  	 	if(task7)	uart0_puts("7 \t");
//  	 	else        uart0_puts("0 \t");
//  		if(task8)	uart0_puts("8 \n");
//  		else        uart0_puts("0 \n");

}
    2dde:	df 91       	pop	r29
    2de0:	cf 91       	pop	r28
    2de2:	08 95       	ret

00002de4 <__vector_9>:
}


/*When Junction on Linetracker X is detected*/
ISR(PCINT0_vect)		
{
    2de4:	1f 92       	push	r1
    2de6:	0f 92       	push	r0
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	0f 92       	push	r0
    2dec:	11 24       	eor	r1, r1
    2dee:	0b b6       	in	r0, 0x3b	; 59
    2df0:	0f 92       	push	r0
    2df2:	2f 93       	push	r18
    2df4:	3f 93       	push	r19
    2df6:	4f 93       	push	r20
    2df8:	5f 93       	push	r21
    2dfa:	6f 93       	push	r22
    2dfc:	7f 93       	push	r23
    2dfe:	8f 93       	push	r24
    2e00:	9f 93       	push	r25
    2e02:	af 93       	push	r26
    2e04:	bf 93       	push	r27
    2e06:	ef 93       	push	r30
    2e08:	ff 93       	push	r31
	if(!task1){
    2e0a:	80 91 d8 02 	lds	r24, 0x02D8
    2e0e:	81 11       	cpse	r24, r1
    2e10:	06 c0       	rjmp	.+12     	; 0x2e1e <__vector_9+0x3a>
		task1 = true;
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	80 93 d8 02 	sts	0x02D8, r24
		//reached to corner of loading zone1
		FlagChangeSetpointCompass = true;
    2e18:	80 93 be 04 	sts	0x04BE, r24
    2e1c:	22 c0       	rjmp	.+68     	; 0x2e62 <__vector_9+0x7e>
	}
	else if(!task5){
    2e1e:	80 91 d4 02 	lds	r24, 0x02D4
    2e22:	81 11       	cpse	r24, r1
    2e24:	08 c0       	rjmp	.+16     	; 0x2e36 <__vector_9+0x52>
		task5 = true;			//reached loading zone 2 from loading zone 1
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	80 93 d4 02 	sts	0x02D4, r24
		FlagChangeSetpointCompass = true;
    2e2c:	80 93 be 04 	sts	0x04BE, r24
		BrakeMotor();
    2e30:	0e 94 d2 05 	call	0xba4	; 0xba4 <_Z10BrakeMotorv>
    2e34:	16 c0       	rjmp	.+44     	; 0x2e62 <__vector_9+0x7e>
	}
	else if(!xJunctionMeetFromTZ2){
    2e36:	80 91 cf 02 	lds	r24, 0x02CF
    2e3a:	81 11       	cpse	r24, r1
    2e3c:	12 c0       	rjmp	.+36     	; 0x2e62 <__vector_9+0x7e>
		xJunctionMeetFromTZ2 = true;
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	80 93 cf 02 	sts	0x02CF, r24
		BrakeMotor();
    2e44:	0e 94 d2 05 	call	0xba4	; 0xba4 <_Z10BrakeMotorv>
	sei();
	PCICR |= (1<<PCIE2);
	PCMSK2 |= (1<<PCINT23);
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
    2e48:	eb e6       	ldi	r30, 0x6B	; 107
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	80 81       	ld	r24, Z
    2e4e:	8f 7e       	andi	r24, 0xEF	; 239
    2e50:	80 83       	st	Z, r24
    2e52:	10 92 c7 02 	sts	0x02C7, r1
    2e56:	10 92 c6 02 	sts	0x02C6, r1
    2e5a:	10 92 bf 02 	sts	0x02BF, r1
    2e5e:	10 92 be 02 	sts	0x02BE, r1
		linetrackerXjunctionWatchOff();
		encoderX.resetCount();
		encoderY.resetCount();
	}
}
    2e62:	ff 91       	pop	r31
    2e64:	ef 91       	pop	r30
    2e66:	bf 91       	pop	r27
    2e68:	af 91       	pop	r26
    2e6a:	9f 91       	pop	r25
    2e6c:	8f 91       	pop	r24
    2e6e:	7f 91       	pop	r23
    2e70:	6f 91       	pop	r22
    2e72:	5f 91       	pop	r21
    2e74:	4f 91       	pop	r20
    2e76:	3f 91       	pop	r19
    2e78:	2f 91       	pop	r18
    2e7a:	0f 90       	pop	r0
    2e7c:	0b be       	out	0x3b, r0	; 59
    2e7e:	0f 90       	pop	r0
    2e80:	0f be       	out	0x3f, r0	; 63
    2e82:	0f 90       	pop	r0
    2e84:	1f 90       	pop	r1
    2e86:	18 95       	reti

00002e88 <__vector_11>:


/*When Junction on Linetracker Y is detected*/
ISR(PCINT2_vect)
{
    2e88:	1f 92       	push	r1
    2e8a:	0f 92       	push	r0
    2e8c:	0f b6       	in	r0, 0x3f	; 63
    2e8e:	0f 92       	push	r0
    2e90:	11 24       	eor	r1, r1
    2e92:	0b b6       	in	r0, 0x3b	; 59
    2e94:	0f 92       	push	r0
    2e96:	2f 93       	push	r18
    2e98:	3f 93       	push	r19
    2e9a:	4f 93       	push	r20
    2e9c:	5f 93       	push	r21
    2e9e:	6f 93       	push	r22
    2ea0:	7f 93       	push	r23
    2ea2:	8f 93       	push	r24
    2ea4:	9f 93       	push	r25
    2ea6:	af 93       	push	r26
    2ea8:	bf 93       	push	r27
    2eaa:	ef 93       	push	r30
    2eac:	ff 93       	push	r31
	if(!task2){
    2eae:	80 91 d7 02 	lds	r24, 0x02D7
    2eb2:	81 11       	cpse	r24, r1
    2eb4:	06 c0       	rjmp	.+12     	; 0x2ec2 <__vector_11+0x3a>
		task2 = true;		//reached to loading zone 1
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	80 93 d7 02 	sts	0x02D7, r24
		BrakeMotor();
    2ebc:	0e 94 d2 05 	call	0xba4	; 0xba4 <_Z10BrakeMotorv>
    2ec0:	41 c0       	rjmp	.+130    	; 0x2f44 <__vector_11+0xbc>
	}
	else if(!task3){
    2ec2:	80 91 d6 02 	lds	r24, 0x02D6
    2ec6:	81 11       	cpse	r24, r1
    2ec8:	08 c0       	rjmp	.+16     	; 0x2eda <__vector_11+0x52>
		_b_Transmit_once = true;
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	80 93 e1 02 	sts	0x02E1, r24
		task3 = true;		//reached throwing zone 1
    2ed0:	80 93 d6 02 	sts	0x02D6, r24
		BrakeMotor();
    2ed4:	0e 94 d2 05 	call	0xba4	; 0xba4 <_Z10BrakeMotorv>
    2ed8:	35 c0       	rjmp	.+106    	; 0x2f44 <__vector_11+0xbc>
	}
		
	else if(!task4){
    2eda:	80 91 d5 02 	lds	r24, 0x02D5
    2ede:	81 11       	cpse	r24, r1
    2ee0:	06 c0       	rjmp	.+12     	; 0x2eee <__vector_11+0x66>
		task4 = true;		//reached loading zone 1 from throwing zone 1
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	80 93 d5 02 	sts	0x02D5, r24
		 BrakeMotor();
    2ee8:	0e 94 d2 05 	call	0xba4	; 0xba4 <_Z10BrakeMotorv>
    2eec:	2b c0       	rjmp	.+86     	; 0x2f44 <__vector_11+0xbc>
	}
	else if(!task6){
    2eee:	80 91 d3 02 	lds	r24, 0x02D3
    2ef2:	81 11       	cpse	r24, r1
    2ef4:	08 c0       	rjmp	.+16     	; 0x2f06 <__vector_11+0x7e>
		_b_Transmit_once = true;
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	80 93 e1 02 	sts	0x02E1, r24
		task6 = true;		//reached throwing zone 2
    2efc:	80 93 d3 02 	sts	0x02D3, r24
		BrakeMotor();
    2f00:	0e 94 d2 05 	call	0xba4	; 0xba4 <_Z10BrakeMotorv>
    2f04:	1f c0       	rjmp	.+62     	; 0x2f44 <__vector_11+0xbc>
	}
		
	else if(!task7){
    2f06:	80 91 d2 02 	lds	r24, 0x02D2
    2f0a:	81 11       	cpse	r24, r1
    2f0c:	06 c0       	rjmp	.+12     	; 0x2f1a <__vector_11+0x92>
		task7 = true;		//reached loading zone 2 from throwing zone 2
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	80 93 d2 02 	sts	0x02D2, r24
		BrakeMotor();
    2f14:	0e 94 d2 05 	call	0xba4	; 0xba4 <_Z10BrakeMotorv>
    2f18:	15 c0       	rjmp	.+42     	; 0x2f44 <__vector_11+0xbc>
	}
	else if(!task8){
    2f1a:	80 91 d1 02 	lds	r24, 0x02D1
    2f1e:	81 11       	cpse	r24, r1
    2f20:	08 c0       	rjmp	.+16     	; 0x2f32 <__vector_11+0xaa>
		_b_Transmit_once = true;
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	80 93 e1 02 	sts	0x02E1, r24
		task8 = true;		//reached throwing zone 3
    2f28:	80 93 d1 02 	sts	0x02D1, r24
		BrakeMotor();
    2f2c:	0e 94 d2 05 	call	0xba4	; 0xba4 <_Z10BrakeMotorv>
    2f30:	09 c0       	rjmp	.+18     	; 0x2f44 <__vector_11+0xbc>
	}
	else if(!task9){
    2f32:	80 91 d0 02 	lds	r24, 0x02D0
    2f36:	81 11       	cpse	r24, r1
    2f38:	05 c0       	rjmp	.+10     	; 0x2f44 <__vector_11+0xbc>
		task9 = true;		//reached loading zone 2 from throwing zone 3
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	80 93 d0 02 	sts	0x02D0, r24
		BrakeMotor();
    2f40:	0e 94 d2 05 	call	0xba4	; 0xba4 <_Z10BrakeMotorv>
	}
}
    2f44:	ff 91       	pop	r31
    2f46:	ef 91       	pop	r30
    2f48:	bf 91       	pop	r27
    2f4a:	af 91       	pop	r26
    2f4c:	9f 91       	pop	r25
    2f4e:	8f 91       	pop	r24
    2f50:	7f 91       	pop	r23
    2f52:	6f 91       	pop	r22
    2f54:	5f 91       	pop	r21
    2f56:	4f 91       	pop	r20
    2f58:	3f 91       	pop	r19
    2f5a:	2f 91       	pop	r18
    2f5c:	0f 90       	pop	r0
    2f5e:	0b be       	out	0x3b, r0	; 59
    2f60:	0f 90       	pop	r0
    2f62:	0f be       	out	0x3f, r0	; 63
    2f64:	0f 90       	pop	r0
    2f66:	1f 90       	pop	r1
    2f68:	18 95       	reti

00002f6a <main>:
////////////////////////////////////////////

int main(void)
{
	////////////SET COMMUNICATION PINS AS INPUT AND PULL UP////////
	INPUT(SHUTTLECOCKPIN);
    2f6a:	aa e0       	ldi	r26, 0x0A	; 10
    2f6c:	b1 e0       	ldi	r27, 0x01	; 1
    2f6e:	8c 91       	ld	r24, X
    2f70:	8f 7b       	andi	r24, 0xBF	; 191
    2f72:	8c 93       	st	X, r24
	INPUT(ZONEPIN);
    2f74:	8c 91       	ld	r24, X
    2f76:	8f 7e       	andi	r24, 0xEF	; 239
    2f78:	8c 93       	st	X, r24
 	SET(SHUTTLECOCKPIN);
    2f7a:	eb e0       	ldi	r30, 0x0B	; 11
    2f7c:	f1 e0       	ldi	r31, 0x01	; 1
    2f7e:	80 81       	ld	r24, Z
    2f80:	80 64       	ori	r24, 0x40	; 64
    2f82:	80 83       	st	Z, r24
 	SET(ZONEPIN);
    2f84:	80 81       	ld	r24, Z
    2f86:	80 61       	ori	r24, 0x10	; 16
    2f88:	80 83       	st	Z, r24
	///////PULL DOWN RACK PIN 
	INPUT(RACKPIN);
    2f8a:	8c 91       	ld	r24, X
    2f8c:	8b 7f       	andi	r24, 0xFB	; 251
    2f8e:	8c 93       	st	X, r24
	CLEAR(RACKPIN);
    2f90:	80 81       	ld	r24, Z
    2f92:	8b 7f       	andi	r24, 0xFB	; 251
    2f94:	80 83       	st	Z, r24
	
	///Turn internal pullup for limit switch pin
	INPUT(RIGHT_LIMIT_SW);
    2f96:	e1 e0       	ldi	r30, 0x01	; 1
    2f98:	f1 e0       	ldi	r31, 0x01	; 1
    2f9a:	80 81       	ld	r24, Z
    2f9c:	87 7f       	andi	r24, 0xF7	; 247
    2f9e:	80 83       	st	Z, r24
	INPUT(LEFT_LIMIT_SW);
    2fa0:	6b 98       	cbi	0x0d, 3	; 13
	SET(RIGHT_LIMIT_SW);
    2fa2:	e2 e0       	ldi	r30, 0x02	; 2
    2fa4:	f1 e0       	ldi	r31, 0x01	; 1
    2fa6:	80 81       	ld	r24, Z
    2fa8:	88 60       	ori	r24, 0x08	; 8
    2faa:	80 83       	st	Z, r24
	SET(LEFT_LIMIT_SW);
    2fac:	73 9a       	sbi	0x0e, 3	; 14
	///SET PK1 AS OUTPUT TO SEND SIGNAL TO SLAVE TO BRAKE MOTOR 
	DDRK |= (1<<PK0);
    2fae:	e7 e0       	ldi	r30, 0x07	; 7
    2fb0:	f1 e0       	ldi	r31, 0x01	; 1
    2fb2:	80 81       	ld	r24, Z
    2fb4:	81 60       	ori	r24, 0x01	; 1
    2fb6:	80 83       	st	Z, r24
	PORTK &= ~(1<<PK0); 
    2fb8:	e8 e0       	ldi	r30, 0x08	; 8
    2fba:	f1 e0       	ldi	r31, 0x01	; 1
    2fbc:	80 81       	ld	r24, Z
    2fbe:	8e 7f       	andi	r24, 0xFE	; 254
    2fc0:	80 83       	st	Z, r24
	/// INITIALIZE ALL THE UART
	uart0_init(UART_BAUD_SELECT(9600,F_CPU));
    2fc2:	87 e6       	ldi	r24, 0x67	; 103
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	66 d5       	rcall	.+2764   	; 0x3a94 <_Z10uart0_initj>
	uart2_init(UART_BAUD_SELECT(38400,F_CPU));
    2fc8:	89 e1       	ldi	r24, 0x19	; 25
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	3a d6       	rcall	.+3188   	; 0x3c42 <_Z10uart2_initj>
	uart3_init(UART_BAUD_SELECT(38400,F_CPU));
    2fce:	89 e1       	ldi	r24, 0x19	; 25
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	c6 d6       	rcall	.+3468   	; 0x3d60 <_Z10uart3_initj>
	//INITIALIZE EVERYTHING ELSE
	initializeAll();
    2fd4:	0e 94 28 05 	call	0xa50	; 0xa50 <_Z13initializeAllv>
	
	char rcvdata = 't';
	sei();
    2fd8:	78 94       	sei

    while (1) 
    {	
 		gorockthegamefield();
    2fda:	b1 d8       	rcall	.-3742   	; 0x213e <_Z18gorockthegamefieldv>
  		calculatevel();
    2fdc:	0e 94 fd 07 	call	0xffa	; 0xffa <_Z12calculatevelv>
	}
    2fe0:	fc cf       	rjmp	.-8      	; 0x2fda <main+0x70>

00002fe2 <_GLOBAL__sub_I_compassPID>:
#include "hmccompass.h"
#include "MPU6050.h"
#include "General-function.h"


static MPU6050 mpu;
    2fe2:	87 e3       	ldi	r24, 0x37	; 55
    2fe4:	94 e0       	ldi	r25, 0x04	; 4
    2fe6:	3d d0       	rcall	.+122    	; 0x3062 <_ZN7MPU6050C1Ev>
};
////////////////////////////////////////////////////////////////////////////////


struct bodyPid{ 
	bodyPid():FirstData(true){};
    2fe8:	ef ea       	ldi	r30, 0xAF	; 175
    2fea:	f3 e0       	ldi	r31, 0x03	; 3
    2fec:	10 86       	std	Z+8, r1	; 0x08
    2fee:	11 86       	std	Z+9, r1	; 0x09
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
    2ff2:	80 8b       	std	Z+16, r24	; 0x10
    2ff4:	ee e8       	ldi	r30, 0x8E	; 142
    2ff6:	f3 e0       	ldi	r31, 0x03	; 3
    2ff8:	10 86       	std	Z+8, r1	; 0x08
    2ffa:	11 86       	std	Z+9, r1	; 0x09
    2ffc:	80 8b       	std	Z+16, r24	; 0x10
    2ffe:	ed e6       	ldi	r30, 0x6D	; 109
    3000:	f3 e0       	ldi	r31, 0x03	; 3
    3002:	10 86       	std	Z+8, r1	; 0x08
    3004:	11 86       	std	Z+9, r1	; 0x09
    3006:	80 8b       	std	Z+16, r24	; 0x10
    3008:	ec e4       	ldi	r30, 0x4C	; 76
    300a:	f3 e0       	ldi	r31, 0x03	; 3
    300c:	10 86       	std	Z+8, r1	; 0x08
    300e:	11 86       	std	Z+9, r1	; 0x09
    3010:	80 8b       	std	Z+16, r24	; 0x10
    3012:	eb e2       	ldi	r30, 0x2B	; 43
    3014:	f3 e0       	ldi	r31, 0x03	; 3
    3016:	10 86       	std	Z+8, r1	; 0x08
    3018:	11 86       	std	Z+9, r1	; 0x09
    301a:	80 8b       	std	Z+16, r24	; 0x10
    301c:	e6 e0       	ldi	r30, 0x06	; 6
    301e:	f3 e0       	ldi	r31, 0x03	; 3
    3020:	10 86       	std	Z+8, r1	; 0x08
    3022:	11 86       	std	Z+9, r1	; 0x09
    3024:	80 8b       	std	Z+16, r24	; 0x10
    3026:	e5 ee       	ldi	r30, 0xE5	; 229
    3028:	f2 e0       	ldi	r31, 0x02	; 2
    302a:	10 86       	std	Z+8, r1	; 0x08
    302c:	11 86       	std	Z+9, r1	; 0x09
    302e:	80 8b       	std	Z+16, r24	; 0x10
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
    3030:	10 92 c7 02 	sts	0x02C7, r1
    3034:	10 92 c6 02 	sts	0x02C6, r1
			Init_encoder_interrupt();
    3038:	86 ec       	ldi	r24, 0xC6	; 198
    303a:	92 e0       	ldi	r25, 0x02	; 2
    303c:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    3040:	86 ec       	ldi	r24, 0xC6	; 198
    3042:	92 e0       	ldi	r25, 0x02	; 2
    3044:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN7encoder10Init_timerEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
    3048:	10 92 bf 02 	sts	0x02BF, r1
    304c:	10 92 be 02 	sts	0x02BE, r1
			Init_encoder_interrupt();
    3050:	8e eb       	ldi	r24, 0xBE	; 190
    3052:	92 e0       	ldi	r25, 0x02	; 2
    3054:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    3058:	8e eb       	ldi	r24, 0xBE	; 190
    305a:	92 e0       	ldi	r25, 0x02	; 2
    305c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_ZN7encoder10Init_timerEv>
    3060:	08 95       	ret

00003062 <_ZN7MPU6050C1Ev>:

// Get current threshold value
uint8_t MPU6050::getThreshold(void)
{
	return actualThreshold;
}
    3062:	fc 01       	movw	r30, r24
    3064:	14 ae       	std	Z+60, r1	; 0x3c
    3066:	15 ae       	std	Z+61, r1	; 0x3d
    3068:	16 ae       	std	Z+62, r1	; 0x3e
    306a:	17 ae       	std	Z+63, r1	; 0x3f
    306c:	dc 01       	movw	r26, r24
    306e:	a0 5c       	subi	r26, 0xC0	; 192
    3070:	bf 4f       	sbci	r27, 0xFF	; 255
    3072:	1d 92       	st	X+, r1
    3074:	1d 92       	st	X+, r1
    3076:	1d 92       	st	X+, r1
    3078:	1c 92       	st	X, r1
    307a:	13 97       	sbiw	r26, 0x03	; 3
    307c:	14 96       	adiw	r26, 0x04	; 4
    307e:	1d 92       	st	X+, r1
    3080:	1d 92       	st	X+, r1
    3082:	1d 92       	st	X+, r1
    3084:	1c 92       	st	X, r1
    3086:	13 97       	sbiw	r26, 0x03	; 3
    3088:	d4 96       	adiw	r26, 0x34	; 52
    308a:	1c 92       	st	X, r1
    308c:	d0 97       	sbiw	r26, 0x30	; 48
    308e:	1d 92       	st	X+, r1
    3090:	1d 92       	st	X+, r1
    3092:	1d 92       	st	X+, r1
    3094:	1c 92       	st	X, r1
    3096:	13 97       	sbiw	r26, 0x03	; 3
    3098:	14 96       	adiw	r26, 0x04	; 4
    309a:	1d 92       	st	X+, r1
    309c:	1d 92       	st	X+, r1
    309e:	1d 92       	st	X+, r1
    30a0:	1c 92       	st	X, r1
    30a2:	13 97       	sbiw	r26, 0x03	; 3
    30a4:	14 96       	adiw	r26, 0x04	; 4
    30a6:	1d 92       	st	X+, r1
    30a8:	1d 92       	st	X+, r1
    30aa:	1d 92       	st	X+, r1
    30ac:	1c 92       	st	X, r1
    30ae:	13 97       	sbiw	r26, 0x03	; 3
    30b0:	10 aa       	std	Z+48, r1	; 0x30
    30b2:	11 aa       	std	Z+49, r1	; 0x31
    30b4:	12 aa       	std	Z+50, r1	; 0x32
    30b6:	13 aa       	std	Z+51, r1	; 0x33
    30b8:	14 aa       	std	Z+52, r1	; 0x34
    30ba:	15 aa       	std	Z+53, r1	; 0x35
    30bc:	16 aa       	std	Z+54, r1	; 0x36
    30be:	17 aa       	std	Z+55, r1	; 0x37
    30c0:	10 ae       	std	Z+56, r1	; 0x38
    30c2:	11 ae       	std	Z+57, r1	; 0x39
    30c4:	12 ae       	std	Z+58, r1	; 0x3a
    30c6:	13 ae       	std	Z+59, r1	; 0x3b
    30c8:	94 96       	adiw	r26, 0x24	; 36
    30ca:	1d 92       	st	X+, r1
    30cc:	1d 92       	st	X+, r1
    30ce:	1d 92       	st	X+, r1
    30d0:	1c 92       	st	X, r1
    30d2:	13 97       	sbiw	r26, 0x03	; 3
    30d4:	18 97       	sbiw	r26, 0x08	; 8
    30d6:	4f e3       	ldi	r20, 0x3F	; 63
    30d8:	5e e1       	ldi	r21, 0x1E	; 30
    30da:	6a ef       	ldi	r22, 0xFA	; 250
    30dc:	7b e3       	ldi	r23, 0x3B	; 59
    30de:	4d 93       	st	X+, r20
    30e0:	5d 93       	st	X+, r21
    30e2:	6d 93       	st	X+, r22
    30e4:	7c 93       	st	X, r23
    30e6:	13 97       	sbiw	r26, 0x03	; 3
    30e8:	e0 59       	subi	r30, 0x90	; 144
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	80 e4       	ldi	r24, 0x40	; 64
    30ee:	9a ed       	ldi	r25, 0xDA	; 218
    30f0:	af e7       	ldi	r26, 0x7F	; 127
    30f2:	b8 e3       	ldi	r27, 0x38	; 56
    30f4:	80 83       	st	Z, r24
    30f6:	91 83       	std	Z+1, r25	; 0x01
    30f8:	a2 83       	std	Z+2, r26	; 0x02
    30fa:	b3 83       	std	Z+3, r27	; 0x03
    30fc:	08 95       	ret

000030fe <_ZN7MPU60504InitEv>:
    30fe:	2f ef       	ldi	r18, 0xFF	; 255
    3100:	82 e5       	ldi	r24, 0x52	; 82
    3102:	97 e0       	ldi	r25, 0x07	; 7
    3104:	21 50       	subi	r18, 0x01	; 1
    3106:	80 40       	sbci	r24, 0x00	; 0
    3108:	90 40       	sbci	r25, 0x00	; 0
    310a:	e1 f7       	brne	.-8      	; 0x3104 <_ZN7MPU60504InitEv+0x6>
    310c:	00 c0       	rjmp	.+0      	; 0x310e <_ZN7MPU60504InitEv+0x10>
    310e:	00 00       	nop
    3110:	80 ed       	ldi	r24, 0xD0	; 208
    3112:	ce d3       	rcall	.+1948   	; 0x38b0 <_Z9i2c_starth>
    3114:	8b e6       	ldi	r24, 0x6B	; 107
    3116:	39 d4       	rcall	.+2162   	; 0x398a <_Z9i2c_writeh>
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	37 d4       	rcall	.+2158   	; 0x398a <_Z9i2c_writeh>
    311c:	f2 d3       	rcall	.+2020   	; 0x3902 <_Z8i2c_stopv>
    311e:	80 ed       	ldi	r24, 0xD0	; 208
    3120:	c7 d3       	rcall	.+1934   	; 0x38b0 <_Z9i2c_starth>
    3122:	89 e1       	ldi	r24, 0x19	; 25
    3124:	32 d4       	rcall	.+2148   	; 0x398a <_Z9i2c_writeh>
    3126:	89 e1       	ldi	r24, 0x19	; 25
    3128:	30 d4       	rcall	.+2144   	; 0x398a <_Z9i2c_writeh>
    312a:	eb d3       	rcall	.+2006   	; 0x3902 <_Z8i2c_stopv>
    312c:	80 ed       	ldi	r24, 0xD0	; 208
    312e:	c0 d3       	rcall	.+1920   	; 0x38b0 <_Z9i2c_starth>
    3130:	8a e1       	ldi	r24, 0x1A	; 26
    3132:	2b d4       	rcall	.+2134   	; 0x398a <_Z9i2c_writeh>
    3134:	80 e0       	ldi	r24, 0x00	; 0
    3136:	29 d4       	rcall	.+2130   	; 0x398a <_Z9i2c_writeh>
    3138:	e4 d3       	rcall	.+1992   	; 0x3902 <_Z8i2c_stopv>
    313a:	80 ed       	ldi	r24, 0xD0	; 208
    313c:	b9 d3       	rcall	.+1906   	; 0x38b0 <_Z9i2c_starth>
    313e:	8b e1       	ldi	r24, 0x1B	; 27
    3140:	24 d4       	rcall	.+2120   	; 0x398a <_Z9i2c_writeh>
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	22 d4       	rcall	.+2116   	; 0x398a <_Z9i2c_writeh>
    3146:	dd d3       	rcall	.+1978   	; 0x3902 <_Z8i2c_stopv>
    3148:	80 ed       	ldi	r24, 0xD0	; 208
    314a:	b2 d3       	rcall	.+1892   	; 0x38b0 <_Z9i2c_starth>
    314c:	88 e3       	ldi	r24, 0x38	; 56
    314e:	1d d4       	rcall	.+2106   	; 0x398a <_Z9i2c_writeh>
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	1b d4       	rcall	.+2102   	; 0x398a <_Z9i2c_writeh>
    3154:	d6 d3       	rcall	.+1964   	; 0x3902 <_Z8i2c_stopv>
    3156:	80 ed       	ldi	r24, 0xD0	; 208
    3158:	ab d3       	rcall	.+1878   	; 0x38b0 <_Z9i2c_starth>
    315a:	8c e1       	ldi	r24, 0x1C	; 28
    315c:	16 d4       	rcall	.+2092   	; 0x398a <_Z9i2c_writeh>
    315e:	80 e0       	ldi	r24, 0x00	; 0
    3160:	14 d4       	rcall	.+2088   	; 0x398a <_Z9i2c_writeh>
    3162:	cf c3       	rjmp	.+1950   	; 0x3902 <_Z8i2c_stopv>
    3164:	08 95       	ret

00003166 <_ZN7MPU605017startReadLocationEh>:
    3166:	cf 93       	push	r28
    3168:	c6 2f       	mov	r28, r22
    316a:	80 ed       	ldi	r24, 0xD0	; 208
    316c:	d3 d3       	rcall	.+1958   	; 0x3914 <_Z14i2c_start_waith>
    316e:	8c 2f       	mov	r24, r28
    3170:	0c d4       	rcall	.+2072   	; 0x398a <_Z9i2c_writeh>
    3172:	81 ed       	ldi	r24, 0xD1	; 209
    3174:	c4 d3       	rcall	.+1928   	; 0x38fe <_Z13i2c_rep_starth>
    3176:	cf 91       	pop	r28
    3178:	08 95       	ret

0000317a <_ZN7MPU605012readRawAccelEv>:
    317a:	af 92       	push	r10
    317c:	bf 92       	push	r11
    317e:	cf 92       	push	r12
    3180:	df 92       	push	r13
    3182:	ef 92       	push	r14
    3184:	ff 92       	push	r15
    3186:	0f 93       	push	r16
    3188:	1f 93       	push	r17
    318a:	cf 93       	push	r28
    318c:	df 93       	push	r29
    318e:	8c 01       	movw	r16, r24
    3190:	eb 01       	movw	r28, r22
    3192:	6b e3       	ldi	r22, 0x3B	; 59
    3194:	ce 01       	movw	r24, r28
    3196:	e7 df       	rcall	.-50     	; 0x3166 <_ZN7MPU605017startReadLocationEh>
    3198:	0a d4       	rcall	.+2068   	; 0x39ae <_Z11i2c_readAckv>
    319a:	a8 2e       	mov	r10, r24
    319c:	08 d4       	rcall	.+2064   	; 0x39ae <_Z11i2c_readAckv>
    319e:	b8 2e       	mov	r11, r24
    31a0:	06 d4       	rcall	.+2060   	; 0x39ae <_Z11i2c_readAckv>
    31a2:	c8 2e       	mov	r12, r24
    31a4:	04 d4       	rcall	.+2056   	; 0x39ae <_Z11i2c_readAckv>
    31a6:	e8 2e       	mov	r14, r24
    31a8:	02 d4       	rcall	.+2052   	; 0x39ae <_Z11i2c_readAckv>
    31aa:	d8 2e       	mov	r13, r24
    31ac:	0b d4       	rcall	.+2070   	; 0x39c4 <_Z11i2c_readNakv>
    31ae:	f8 2e       	mov	r15, r24
    31b0:	6b 2d       	mov	r22, r11
    31b2:	70 e0       	ldi	r23, 0x00	; 0
    31b4:	7a 29       	or	r23, r10
    31b6:	07 2e       	mov	r0, r23
    31b8:	00 0c       	add	r0, r0
    31ba:	88 0b       	sbc	r24, r24
    31bc:	99 0b       	sbc	r25, r25
    31be:	82 d7       	rcall	.+3844   	; 0x40c4 <__floatsisf>
    31c0:	fe 01       	movw	r30, r28
    31c2:	e8 5b       	subi	r30, 0xB8	; 184
    31c4:	ff 4f       	sbci	r31, 0xFF	; 255
    31c6:	20 81       	ld	r18, Z
    31c8:	31 81       	ldd	r19, Z+1	; 0x01
    31ca:	42 81       	ldd	r20, Z+2	; 0x02
    31cc:	53 81       	ldd	r21, Z+3	; 0x03
    31ce:	11 d6       	rcall	.+3106   	; 0x3df2 <__subsf3>
    31d0:	68 83       	st	Y, r22
    31d2:	79 83       	std	Y+1, r23	; 0x01
    31d4:	8a 83       	std	Y+2, r24	; 0x02
    31d6:	9b 83       	std	Y+3, r25	; 0x03
    31d8:	6e 2d       	mov	r22, r14
    31da:	70 e0       	ldi	r23, 0x00	; 0
    31dc:	7c 29       	or	r23, r12
    31de:	07 2e       	mov	r0, r23
    31e0:	00 0c       	add	r0, r0
    31e2:	88 0b       	sbc	r24, r24
    31e4:	99 0b       	sbc	r25, r25
    31e6:	6e d7       	rcall	.+3804   	; 0x40c4 <__floatsisf>
    31e8:	fe 01       	movw	r30, r28
    31ea:	e4 5b       	subi	r30, 0xB4	; 180
    31ec:	ff 4f       	sbci	r31, 0xFF	; 255
    31ee:	20 81       	ld	r18, Z
    31f0:	31 81       	ldd	r19, Z+1	; 0x01
    31f2:	42 81       	ldd	r20, Z+2	; 0x02
    31f4:	53 81       	ldd	r21, Z+3	; 0x03
    31f6:	fd d5       	rcall	.+3066   	; 0x3df2 <__subsf3>
    31f8:	6c 83       	std	Y+4, r22	; 0x04
    31fa:	7d 83       	std	Y+5, r23	; 0x05
    31fc:	8e 83       	std	Y+6, r24	; 0x06
    31fe:	9f 83       	std	Y+7, r25	; 0x07
    3200:	6f 2d       	mov	r22, r15
    3202:	70 e0       	ldi	r23, 0x00	; 0
    3204:	7d 29       	or	r23, r13
    3206:	07 2e       	mov	r0, r23
    3208:	00 0c       	add	r0, r0
    320a:	88 0b       	sbc	r24, r24
    320c:	99 0b       	sbc	r25, r25
    320e:	5a d7       	rcall	.+3764   	; 0x40c4 <__floatsisf>
    3210:	68 87       	std	Y+8, r22	; 0x08
    3212:	79 87       	std	Y+9, r23	; 0x09
    3214:	8a 87       	std	Y+10, r24	; 0x0a
    3216:	9b 87       	std	Y+11, r25	; 0x0b
    3218:	74 d3       	rcall	.+1768   	; 0x3902 <_Z8i2c_stopv>
    321a:	8c e0       	ldi	r24, 0x0C	; 12
    321c:	fe 01       	movw	r30, r28
    321e:	d8 01       	movw	r26, r16
    3220:	01 90       	ld	r0, Z+
    3222:	0d 92       	st	X+, r0
    3224:	8a 95       	dec	r24
    3226:	e1 f7       	brne	.-8      	; 0x3220 <_ZN7MPU605012readRawAccelEv+0xa6>
    3228:	c8 01       	movw	r24, r16
    322a:	df 91       	pop	r29
    322c:	cf 91       	pop	r28
    322e:	1f 91       	pop	r17
    3230:	0f 91       	pop	r16
    3232:	ff 90       	pop	r15
    3234:	ef 90       	pop	r14
    3236:	df 90       	pop	r13
    3238:	cf 90       	pop	r12
    323a:	bf 90       	pop	r11
    323c:	af 90       	pop	r10
    323e:	08 95       	ret

00003240 <_ZN7MPU605018readNormalizeAccelEv>:
    3240:	af 92       	push	r10
    3242:	bf 92       	push	r11
    3244:	cf 92       	push	r12
    3246:	df 92       	push	r13
    3248:	ef 92       	push	r14
    324a:	ff 92       	push	r15
    324c:	0f 93       	push	r16
    324e:	1f 93       	push	r17
    3250:	cf 93       	push	r28
    3252:	df 93       	push	r29
    3254:	cd b7       	in	r28, 0x3d	; 61
    3256:	de b7       	in	r29, 0x3e	; 62
    3258:	2c 97       	sbiw	r28, 0x0c	; 12
    325a:	0f b6       	in	r0, 0x3f	; 63
    325c:	f8 94       	cli
    325e:	de bf       	out	0x3e, r29	; 62
    3260:	0f be       	out	0x3f, r0	; 63
    3262:	cd bf       	out	0x3d, r28	; 61
    3264:	5c 01       	movw	r10, r24
    3266:	8b 01       	movw	r16, r22
    3268:	ce 01       	movw	r24, r28
    326a:	01 96       	adiw	r24, 0x01	; 1
    326c:	86 df       	rcall	.-244    	; 0x317a <_ZN7MPU605012readRawAccelEv>
    326e:	f8 01       	movw	r30, r16
    3270:	e0 59       	subi	r30, 0x90	; 144
    3272:	ff 4f       	sbci	r31, 0xFF	; 255
    3274:	c0 80       	ld	r12, Z
    3276:	d1 80       	ldd	r13, Z+1	; 0x01
    3278:	e2 80       	ldd	r14, Z+2	; 0x02
    327a:	f3 80       	ldd	r15, Z+3	; 0x03
    327c:	a7 01       	movw	r20, r14
    327e:	96 01       	movw	r18, r12
    3280:	f8 01       	movw	r30, r16
    3282:	60 81       	ld	r22, Z
    3284:	71 81       	ldd	r23, Z+1	; 0x01
    3286:	82 81       	ldd	r24, Z+2	; 0x02
    3288:	93 81       	ldd	r25, Z+3	; 0x03
    328a:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
    328e:	f8 01       	movw	r30, r16
    3290:	60 8f       	std	Z+24, r22	; 0x18
    3292:	71 8f       	std	Z+25, r23	; 0x19
    3294:	82 8f       	std	Z+26, r24	; 0x1a
    3296:	93 8f       	std	Z+27, r25	; 0x1b
    3298:	24 81       	ldd	r18, Z+4	; 0x04
    329a:	35 81       	ldd	r19, Z+5	; 0x05
    329c:	46 81       	ldd	r20, Z+6	; 0x06
    329e:	57 81       	ldd	r21, Z+7	; 0x07
    32a0:	c7 01       	movw	r24, r14
    32a2:	b6 01       	movw	r22, r12
    32a4:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
    32a8:	f8 01       	movw	r30, r16
    32aa:	64 8f       	std	Z+28, r22	; 0x1c
    32ac:	75 8f       	std	Z+29, r23	; 0x1d
    32ae:	86 8f       	std	Z+30, r24	; 0x1e
    32b0:	97 8f       	std	Z+31, r25	; 0x1f
    32b2:	20 85       	ldd	r18, Z+8	; 0x08
    32b4:	31 85       	ldd	r19, Z+9	; 0x09
    32b6:	42 85       	ldd	r20, Z+10	; 0x0a
    32b8:	53 85       	ldd	r21, Z+11	; 0x0b
    32ba:	c7 01       	movw	r24, r14
    32bc:	b6 01       	movw	r22, r12
    32be:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__mulsf3>
    32c2:	f8 01       	movw	r30, r16
    32c4:	60 a3       	std	Z+32, r22	; 0x20
    32c6:	71 a3       	std	Z+33, r23	; 0x21
    32c8:	82 a3       	std	Z+34, r24	; 0x22
    32ca:	93 a3       	std	Z+35, r25	; 0x23
    32cc:	8c e0       	ldi	r24, 0x0C	; 12
    32ce:	78 96       	adiw	r30, 0x18	; 24
    32d0:	d5 01       	movw	r26, r10
    32d2:	01 90       	ld	r0, Z+
    32d4:	0d 92       	st	X+, r0
    32d6:	8a 95       	dec	r24
    32d8:	e1 f7       	brne	.-8      	; 0x32d2 <_ZN7MPU605018readNormalizeAccelEv+0x92>
    32da:	c5 01       	movw	r24, r10
    32dc:	2c 96       	adiw	r28, 0x0c	; 12
    32de:	0f b6       	in	r0, 0x3f	; 63
    32e0:	f8 94       	cli
    32e2:	de bf       	out	0x3e, r29	; 62
    32e4:	0f be       	out	0x3f, r0	; 63
    32e6:	cd bf       	out	0x3d, r28	; 61
    32e8:	df 91       	pop	r29
    32ea:	cf 91       	pop	r28
    32ec:	1f 91       	pop	r17
    32ee:	0f 91       	pop	r16
    32f0:	ff 90       	pop	r15
    32f2:	ef 90       	pop	r14
    32f4:	df 90       	pop	r13
    32f6:	cf 90       	pop	r12
    32f8:	bf 90       	pop	r11
    32fa:	af 90       	pop	r10
    32fc:	08 95       	ret

000032fe <_ZN7MPU605011readRawGyroEv>:
    32fe:	ff 92       	push	r15
    3300:	0f 93       	push	r16
    3302:	1f 93       	push	r17
    3304:	cf 93       	push	r28
    3306:	df 93       	push	r29
    3308:	8c 01       	movw	r16, r24
    330a:	eb 01       	movw	r28, r22
    330c:	63 e4       	ldi	r22, 0x43	; 67
    330e:	ce 01       	movw	r24, r28
    3310:	2a df       	rcall	.-428    	; 0x3166 <_ZN7MPU605017startReadLocationEh>
    3312:	4d d3       	rcall	.+1690   	; 0x39ae <_Z11i2c_readAckv>
    3314:	f8 2e       	mov	r15, r24
    3316:	4b d3       	rcall	.+1686   	; 0x39ae <_Z11i2c_readAckv>
    3318:	6f 2d       	mov	r22, r15
    331a:	70 e0       	ldi	r23, 0x00	; 0
    331c:	76 2f       	mov	r23, r22
    331e:	66 27       	eor	r22, r22
    3320:	68 2b       	or	r22, r24
    3322:	07 2e       	mov	r0, r23
    3324:	00 0c       	add	r0, r0
    3326:	88 0b       	sbc	r24, r24
    3328:	99 0b       	sbc	r25, r25
    332a:	cc d6       	rcall	.+3480   	; 0x40c4 <__floatsisf>
    332c:	6c 87       	std	Y+12, r22	; 0x0c
    332e:	7d 87       	std	Y+13, r23	; 0x0d
    3330:	8e 87       	std	Y+14, r24	; 0x0e
    3332:	9f 87       	std	Y+15, r25	; 0x0f
    3334:	3c d3       	rcall	.+1656   	; 0x39ae <_Z11i2c_readAckv>
    3336:	f8 2e       	mov	r15, r24
    3338:	3a d3       	rcall	.+1652   	; 0x39ae <_Z11i2c_readAckv>
    333a:	6f 2d       	mov	r22, r15
    333c:	70 e0       	ldi	r23, 0x00	; 0
    333e:	76 2f       	mov	r23, r22
    3340:	66 27       	eor	r22, r22
    3342:	68 2b       	or	r22, r24
    3344:	07 2e       	mov	r0, r23
    3346:	00 0c       	add	r0, r0
    3348:	88 0b       	sbc	r24, r24
    334a:	99 0b       	sbc	r25, r25
    334c:	bb d6       	rcall	.+3446   	; 0x40c4 <__floatsisf>
    334e:	68 8b       	std	Y+16, r22	; 0x10
    3350:	79 8b       	std	Y+17, r23	; 0x11
    3352:	8a 8b       	std	Y+18, r24	; 0x12
    3354:	9b 8b       	std	Y+19, r25	; 0x13
    3356:	2b d3       	rcall	.+1622   	; 0x39ae <_Z11i2c_readAckv>
    3358:	f8 2e       	mov	r15, r24
    335a:	34 d3       	rcall	.+1640   	; 0x39c4 <_Z11i2c_readNakv>
    335c:	6f 2d       	mov	r22, r15
    335e:	70 e0       	ldi	r23, 0x00	; 0
    3360:	76 2f       	mov	r23, r22
    3362:	66 27       	eor	r22, r22
    3364:	68 2b       	or	r22, r24
    3366:	07 2e       	mov	r0, r23
    3368:	00 0c       	add	r0, r0
    336a:	88 0b       	sbc	r24, r24
    336c:	99 0b       	sbc	r25, r25
    336e:	aa d6       	rcall	.+3412   	; 0x40c4 <__floatsisf>
    3370:	6c 8b       	std	Y+20, r22	; 0x14
    3372:	7d 8b       	std	Y+21, r23	; 0x15
    3374:	8e 8b       	std	Y+22, r24	; 0x16
    3376:	9f 8b       	std	Y+23, r25	; 0x17
    3378:	c4 d2       	rcall	.+1416   	; 0x3902 <_Z8i2c_stopv>
    337a:	8c e0       	ldi	r24, 0x0C	; 12
    337c:	fe 01       	movw	r30, r28
    337e:	3c 96       	adiw	r30, 0x0c	; 12
    3380:	d8 01       	movw	r26, r16
    3382:	01 90       	ld	r0, Z+
    3384:	0d 92       	st	X+, r0
    3386:	8a 95       	dec	r24
    3388:	e1 f7       	brne	.-8      	; 0x3382 <_ZN7MPU605011readRawGyroEv+0x84>
    338a:	c8 01       	movw	r24, r16
    338c:	df 91       	pop	r29
    338e:	cf 91       	pop	r28
    3390:	1f 91       	pop	r17
    3392:	0f 91       	pop	r16
    3394:	ff 90       	pop	r15
    3396:	08 95       	ret

00003398 <_ZN7MPU605012setThresholdEh>:

// Set treshold value
void MPU6050::setThreshold(uint8_t multiple)
{
    3398:	cf 92       	push	r12
    339a:	df 92       	push	r13
    339c:	ef 92       	push	r14
    339e:	ff 92       	push	r15
    33a0:	1f 93       	push	r17
    33a2:	cf 93       	push	r28
    33a4:	df 93       	push	r29
    33a6:	ec 01       	movw	r28, r24
    33a8:	16 2f       	mov	r17, r22
	if (multiple > 0)
    33aa:	66 23       	and	r22, r22
    33ac:	09 f4       	brne	.+2      	; 0x33b0 <_ZN7MPU605012setThresholdEh+0x18>
    33ae:	3b c0       	rjmp	.+118    	; 0x3426 <_ZN7MPU605012setThresholdEh+0x8e>
	{
		// If not calibrated, need calibrate
		if (!useCalibrate)
    33b0:	fc 01       	movw	r30, r24
    33b2:	e8 58       	subi	r30, 0x88	; 136
    33b4:	ff 4f       	sbci	r31, 0xFF	; 255
    33b6:	80 81       	ld	r24, Z
    33b8:	81 11       	cpse	r24, r1
    33ba:	03 c0       	rjmp	.+6      	; 0x33c2 <_ZN7MPU605012setThresholdEh+0x2a>
		{
			calibrateGyro();
    33bc:	62 e3       	ldi	r22, 0x32	; 50
    33be:	ce 01       	movw	r24, r28
    33c0:	51 d0       	rcall	.+162    	; 0x3464 <_ZN7MPU605013calibrateGyroEh>
		}

		// Calculate threshold vectors
		tg.XAxis = th.XAxis * multiple;
    33c2:	61 2f       	mov	r22, r17
    33c4:	70 e0       	ldi	r23, 0x00	; 0
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	7c d6       	rcall	.+3320   	; 0x40c4 <__floatsisf>
    33cc:	6b 01       	movw	r12, r22
    33ce:	7c 01       	movw	r14, r24
    33d0:	9b 01       	movw	r18, r22
    33d2:	ac 01       	movw	r20, r24
    33d4:	fe 01       	movw	r30, r28
    33d6:	ec 5a       	subi	r30, 0xAC	; 172
    33d8:	ff 4f       	sbci	r31, 0xFF	; 255
    33da:	60 81       	ld	r22, Z
    33dc:	71 81       	ldd	r23, Z+1	; 0x01
    33de:	82 81       	ldd	r24, Z+2	; 0x02
    33e0:	93 81       	ldd	r25, Z+3	; 0x03
    33e2:	89 d7       	rcall	.+3858   	; 0x42f6 <__mulsf3>
    33e4:	68 ab       	std	Y+48, r22	; 0x30
    33e6:	79 ab       	std	Y+49, r23	; 0x31
    33e8:	8a ab       	std	Y+50, r24	; 0x32
    33ea:	9b ab       	std	Y+51, r25	; 0x33
		tg.YAxis = th.YAxis * multiple;
    33ec:	fe 01       	movw	r30, r28
    33ee:	e8 5a       	subi	r30, 0xA8	; 168
    33f0:	ff 4f       	sbci	r31, 0xFF	; 255
    33f2:	20 81       	ld	r18, Z
    33f4:	31 81       	ldd	r19, Z+1	; 0x01
    33f6:	42 81       	ldd	r20, Z+2	; 0x02
    33f8:	53 81       	ldd	r21, Z+3	; 0x03
    33fa:	c7 01       	movw	r24, r14
    33fc:	b6 01       	movw	r22, r12
    33fe:	7b d7       	rcall	.+3830   	; 0x42f6 <__mulsf3>
    3400:	6c ab       	std	Y+52, r22	; 0x34
    3402:	7d ab       	std	Y+53, r23	; 0x35
    3404:	8e ab       	std	Y+54, r24	; 0x36
    3406:	9f ab       	std	Y+55, r25	; 0x37
		tg.ZAxis = th.ZAxis * multiple;
    3408:	fe 01       	movw	r30, r28
    340a:	e4 5a       	subi	r30, 0xA4	; 164
    340c:	ff 4f       	sbci	r31, 0xFF	; 255
    340e:	20 81       	ld	r18, Z
    3410:	31 81       	ldd	r19, Z+1	; 0x01
    3412:	42 81       	ldd	r20, Z+2	; 0x02
    3414:	53 81       	ldd	r21, Z+3	; 0x03
    3416:	c7 01       	movw	r24, r14
    3418:	b6 01       	movw	r22, r12
    341a:	6d d7       	rcall	.+3802   	; 0x42f6 <__mulsf3>
    341c:	68 af       	std	Y+56, r22	; 0x38
    341e:	79 af       	std	Y+57, r23	; 0x39
    3420:	8a af       	std	Y+58, r24	; 0x3a
    3422:	9b af       	std	Y+59, r25	; 0x3b
    3424:	0c c0       	rjmp	.+24     	; 0x343e <_ZN7MPU605012setThresholdEh+0xa6>
	} else
	{
		// No threshold
		tg.XAxis = 0;
    3426:	18 aa       	std	Y+48, r1	; 0x30
    3428:	19 aa       	std	Y+49, r1	; 0x31
    342a:	1a aa       	std	Y+50, r1	; 0x32
    342c:	1b aa       	std	Y+51, r1	; 0x33
		tg.YAxis = 0;
    342e:	1c aa       	std	Y+52, r1	; 0x34
    3430:	1d aa       	std	Y+53, r1	; 0x35
    3432:	1e aa       	std	Y+54, r1	; 0x36
    3434:	1f aa       	std	Y+55, r1	; 0x37
		tg.ZAxis = 0;
    3436:	18 ae       	std	Y+56, r1	; 0x38
    3438:	19 ae       	std	Y+57, r1	; 0x39
    343a:	1a ae       	std	Y+58, r1	; 0x3a
    343c:	1b ae       	std	Y+59, r1	; 0x3b
	}

	// Remember old threshold value
	actualThreshold = multiple;
    343e:	cc 58       	subi	r28, 0x8C	; 140
    3440:	df 4f       	sbci	r29, 0xFF	; 255
    3442:	61 2f       	mov	r22, r17
    3444:	70 e0       	ldi	r23, 0x00	; 0
    3446:	80 e0       	ldi	r24, 0x00	; 0
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	3a d6       	rcall	.+3188   	; 0x40c0 <__floatunsisf>
    344c:	68 83       	st	Y, r22
    344e:	79 83       	std	Y+1, r23	; 0x01
    3450:	8a 83       	std	Y+2, r24	; 0x02
    3452:	9b 83       	std	Y+3, r25	; 0x03
}
    3454:	df 91       	pop	r29
    3456:	cf 91       	pop	r28
    3458:	1f 91       	pop	r17
    345a:	ff 90       	pop	r15
    345c:	ef 90       	pop	r14
    345e:	df 90       	pop	r13
    3460:	cf 90       	pop	r12
    3462:	08 95       	ret

00003464 <_ZN7MPU605013calibrateGyroEh>:
	offsetAccelero.XAxis = sumX / samples;
	offsetAccelero.YAxis = sumY / samples;
}

void MPU6050::calibrateGyro(uint8_t samples)
{
    3464:	2f 92       	push	r2
    3466:	3f 92       	push	r3
    3468:	4f 92       	push	r4
    346a:	5f 92       	push	r5
    346c:	6f 92       	push	r6
    346e:	7f 92       	push	r7
    3470:	8f 92       	push	r8
    3472:	9f 92       	push	r9
    3474:	af 92       	push	r10
    3476:	bf 92       	push	r11
    3478:	cf 92       	push	r12
    347a:	df 92       	push	r13
    347c:	ef 92       	push	r14
    347e:	ff 92       	push	r15
    3480:	0f 93       	push	r16
    3482:	1f 93       	push	r17
    3484:	cf 93       	push	r28
    3486:	df 93       	push	r29
    3488:	cd b7       	in	r28, 0x3d	; 61
    348a:	de b7       	in	r29, 0x3e	; 62
    348c:	a4 97       	sbiw	r28, 0x24	; 36
    348e:	0f b6       	in	r0, 0x3f	; 63
    3490:	f8 94       	cli
    3492:	de bf       	out	0x3e, r29	; 62
    3494:	0f be       	out	0x3f, r0	; 63
    3496:	cd bf       	out	0x3d, r28	; 61
    3498:	1c 01       	movw	r2, r24
    349a:	06 2f       	mov	r16, r22
	// Set calibrate
	useCalibrate = true;
    349c:	fc 01       	movw	r30, r24
    349e:	e8 58       	subi	r30, 0x88	; 136
    34a0:	ff 4f       	sbci	r31, 0xFF	; 255
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	80 83       	st	Z, r24
	float sigmaX = 0;
	float sigmaY = 0;
	float sigmaZ = 0;

	// Read n-samples
	for (uint8_t i = 0; i < samples; ++i)
    34a6:	66 23       	and	r22, r22
    34a8:	09 f4       	brne	.+2      	; 0x34ac <_ZN7MPU605013calibrateGyroEh+0x48>
    34aa:	87 c0       	rjmp	.+270    	; 0x35ba <_ZN7MPU605013calibrateGyroEh+0x156>
    34ac:	10 e0       	ldi	r17, 0x00	; 0
    34ae:	19 8e       	std	Y+25, r1	; 0x19
    34b0:	1a 8e       	std	Y+26, r1	; 0x1a
    34b2:	1b 8e       	std	Y+27, r1	; 0x1b
    34b4:	1c 8e       	std	Y+28, r1	; 0x1c
    34b6:	1d 8a       	std	Y+21, r1	; 0x15
    34b8:	1e 8a       	std	Y+22, r1	; 0x16
    34ba:	1f 8a       	std	Y+23, r1	; 0x17
    34bc:	18 8e       	std	Y+24, r1	; 0x18
    34be:	1d 86       	std	Y+13, r1	; 0x0d
    34c0:	1e 86       	std	Y+14, r1	; 0x0e
    34c2:	1f 86       	std	Y+15, r1	; 0x0f
    34c4:	18 8a       	std	Y+16, r1	; 0x10
    34c6:	19 a2       	std	Y+33, r1	; 0x21
    34c8:	1a a2       	std	Y+34, r1	; 0x22
    34ca:	1b a2       	std	Y+35, r1	; 0x23
    34cc:	1c a2       	std	Y+36, r1	; 0x24
    34ce:	1d 8e       	std	Y+29, r1	; 0x1d
    34d0:	1e 8e       	std	Y+30, r1	; 0x1e
    34d2:	1f 8e       	std	Y+31, r1	; 0x1f
    34d4:	18 a2       	std	Y+32, r1	; 0x20
    34d6:	19 8a       	std	Y+17, r1	; 0x11
    34d8:	1a 8a       	std	Y+18, r1	; 0x12
    34da:	1b 8a       	std	Y+19, r1	; 0x13
    34dc:	1c 8a       	std	Y+20, r1	; 0x14
	{
		readRawGyro();
    34de:	b1 01       	movw	r22, r2
    34e0:	ce 01       	movw	r24, r28
    34e2:	01 96       	adiw	r24, 0x01	; 1
    34e4:	0c df       	rcall	.-488    	; 0x32fe <_ZN7MPU605011readRawGyroEv>
		sumX += rg.XAxis;
    34e6:	f1 01       	movw	r30, r2
    34e8:	44 84       	ldd	r4, Z+12	; 0x0c
    34ea:	55 84       	ldd	r5, Z+13	; 0x0d
    34ec:	66 84       	ldd	r6, Z+14	; 0x0e
    34ee:	77 84       	ldd	r7, Z+15	; 0x0f
    34f0:	a3 01       	movw	r20, r6
    34f2:	92 01       	movw	r18, r4
    34f4:	69 89       	ldd	r22, Y+17	; 0x11
    34f6:	7a 89       	ldd	r23, Y+18	; 0x12
    34f8:	8b 89       	ldd	r24, Y+19	; 0x13
    34fa:	9c 89       	ldd	r25, Y+20	; 0x14
    34fc:	7b d4       	rcall	.+2294   	; 0x3df4 <__addsf3>
    34fe:	69 8b       	std	Y+17, r22	; 0x11
    3500:	7a 8b       	std	Y+18, r23	; 0x12
    3502:	8b 8b       	std	Y+19, r24	; 0x13
    3504:	9c 8b       	std	Y+20, r25	; 0x14
		sumY += rg.YAxis;
    3506:	f1 01       	movw	r30, r2
    3508:	80 88       	ldd	r8, Z+16	; 0x10
    350a:	91 88       	ldd	r9, Z+17	; 0x11
    350c:	a2 88       	ldd	r10, Z+18	; 0x12
    350e:	b3 88       	ldd	r11, Z+19	; 0x13
    3510:	a5 01       	movw	r20, r10
    3512:	94 01       	movw	r18, r8
    3514:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3516:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3518:	8f 8d       	ldd	r24, Y+31	; 0x1f
    351a:	98 a1       	ldd	r25, Y+32	; 0x20
    351c:	6b d4       	rcall	.+2262   	; 0x3df4 <__addsf3>
    351e:	6d 8f       	std	Y+29, r22	; 0x1d
    3520:	7e 8f       	std	Y+30, r23	; 0x1e
    3522:	8f 8f       	std	Y+31, r24	; 0x1f
    3524:	98 a3       	std	Y+32, r25	; 0x20
		sumZ += rg.ZAxis;
    3526:	f1 01       	movw	r30, r2
    3528:	c4 88       	ldd	r12, Z+20	; 0x14
    352a:	d5 88       	ldd	r13, Z+21	; 0x15
    352c:	e6 88       	ldd	r14, Z+22	; 0x16
    352e:	f7 88       	ldd	r15, Z+23	; 0x17
    3530:	a7 01       	movw	r20, r14
    3532:	96 01       	movw	r18, r12
    3534:	69 a1       	ldd	r22, Y+33	; 0x21
    3536:	7a a1       	ldd	r23, Y+34	; 0x22
    3538:	8b a1       	ldd	r24, Y+35	; 0x23
    353a:	9c a1       	ldd	r25, Y+36	; 0x24
    353c:	5b d4       	rcall	.+2230   	; 0x3df4 <__addsf3>
    353e:	69 a3       	std	Y+33, r22	; 0x21
    3540:	7a a3       	std	Y+34, r23	; 0x22
    3542:	8b a3       	std	Y+35, r24	; 0x23
    3544:	9c a3       	std	Y+36, r25	; 0x24

		sigmaX += rg.XAxis * rg.XAxis;
    3546:	a3 01       	movw	r20, r6
    3548:	92 01       	movw	r18, r4
    354a:	c3 01       	movw	r24, r6
    354c:	b2 01       	movw	r22, r4
    354e:	d3 d6       	rcall	.+3494   	; 0x42f6 <__mulsf3>
    3550:	9b 01       	movw	r18, r22
    3552:	ac 01       	movw	r20, r24
    3554:	6d 85       	ldd	r22, Y+13	; 0x0d
    3556:	7e 85       	ldd	r23, Y+14	; 0x0e
    3558:	8f 85       	ldd	r24, Y+15	; 0x0f
    355a:	98 89       	ldd	r25, Y+16	; 0x10
    355c:	4b d4       	rcall	.+2198   	; 0x3df4 <__addsf3>
    355e:	6d 87       	std	Y+13, r22	; 0x0d
    3560:	7e 87       	std	Y+14, r23	; 0x0e
    3562:	8f 87       	std	Y+15, r24	; 0x0f
    3564:	98 8b       	std	Y+16, r25	; 0x10
		sigmaY += rg.YAxis * rg.YAxis;
    3566:	a5 01       	movw	r20, r10
    3568:	94 01       	movw	r18, r8
    356a:	c5 01       	movw	r24, r10
    356c:	b4 01       	movw	r22, r8
    356e:	c3 d6       	rcall	.+3462   	; 0x42f6 <__mulsf3>
    3570:	9b 01       	movw	r18, r22
    3572:	ac 01       	movw	r20, r24
    3574:	6d 89       	ldd	r22, Y+21	; 0x15
    3576:	7e 89       	ldd	r23, Y+22	; 0x16
    3578:	8f 89       	ldd	r24, Y+23	; 0x17
    357a:	98 8d       	ldd	r25, Y+24	; 0x18
    357c:	3b d4       	rcall	.+2166   	; 0x3df4 <__addsf3>
    357e:	6d 8b       	std	Y+21, r22	; 0x15
    3580:	7e 8b       	std	Y+22, r23	; 0x16
    3582:	8f 8b       	std	Y+23, r24	; 0x17
    3584:	98 8f       	std	Y+24, r25	; 0x18
		sigmaZ += rg.ZAxis * rg.ZAxis;
    3586:	a7 01       	movw	r20, r14
    3588:	96 01       	movw	r18, r12
    358a:	c7 01       	movw	r24, r14
    358c:	b6 01       	movw	r22, r12
    358e:	b3 d6       	rcall	.+3430   	; 0x42f6 <__mulsf3>
    3590:	9b 01       	movw	r18, r22
    3592:	ac 01       	movw	r20, r24
    3594:	69 8d       	ldd	r22, Y+25	; 0x19
    3596:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3598:	8b 8d       	ldd	r24, Y+27	; 0x1b
    359a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    359c:	2b d4       	rcall	.+2134   	; 0x3df4 <__addsf3>
    359e:	69 8f       	std	Y+25, r22	; 0x19
    35a0:	7a 8f       	std	Y+26, r23	; 0x1a
    35a2:	8b 8f       	std	Y+27, r24	; 0x1b
    35a4:	9c 8f       	std	Y+28, r25	; 0x1c
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    35a6:	8f e1       	ldi	r24, 0x1F	; 31
    35a8:	9e e4       	ldi	r25, 0x4E	; 78
    35aa:	01 97       	sbiw	r24, 0x01	; 1
    35ac:	f1 f7       	brne	.-4      	; 0x35aa <_ZN7MPU605013calibrateGyroEh+0x146>
    35ae:	00 c0       	rjmp	.+0      	; 0x35b0 <_ZN7MPU605013calibrateGyroEh+0x14c>
    35b0:	00 00       	nop
	float sigmaX = 0;
	float sigmaY = 0;
	float sigmaZ = 0;

	// Read n-samples
	for (uint8_t i = 0; i < samples; ++i)
    35b2:	1f 5f       	subi	r17, 0xFF	; 255
    35b4:	10 13       	cpse	r17, r16
    35b6:	93 cf       	rjmp	.-218    	; 0x34de <_ZN7MPU605013calibrateGyroEh+0x7a>
    35b8:	18 c0       	rjmp	.+48     	; 0x35ea <_ZN7MPU605013calibrateGyroEh+0x186>
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
	float sigmaX = 0;
	float sigmaY = 0;
	float sigmaZ = 0;
    35ba:	19 8e       	std	Y+25, r1	; 0x19
    35bc:	1a 8e       	std	Y+26, r1	; 0x1a
    35be:	1b 8e       	std	Y+27, r1	; 0x1b
    35c0:	1c 8e       	std	Y+28, r1	; 0x1c
	// Reset values
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
	float sigmaX = 0;
	float sigmaY = 0;
    35c2:	1d 8a       	std	Y+21, r1	; 0x15
    35c4:	1e 8a       	std	Y+22, r1	; 0x16
    35c6:	1f 8a       	std	Y+23, r1	; 0x17
    35c8:	18 8e       	std	Y+24, r1	; 0x18

	// Reset values
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
	float sigmaX = 0;
    35ca:	1d 86       	std	Y+13, r1	; 0x0d
    35cc:	1e 86       	std	Y+14, r1	; 0x0e
    35ce:	1f 86       	std	Y+15, r1	; 0x0f
    35d0:	18 8a       	std	Y+16, r1	; 0x10
	useCalibrate = true;

	// Reset values
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
    35d2:	19 a2       	std	Y+33, r1	; 0x21
    35d4:	1a a2       	std	Y+34, r1	; 0x22
    35d6:	1b a2       	std	Y+35, r1	; 0x23
    35d8:	1c a2       	std	Y+36, r1	; 0x24
	// Set calibrate
	useCalibrate = true;

	// Reset values
	float sumX = 0;
	float sumY = 0;
    35da:	1d 8e       	std	Y+29, r1	; 0x1d
    35dc:	1e 8e       	std	Y+30, r1	; 0x1e
    35de:	1f 8e       	std	Y+31, r1	; 0x1f
    35e0:	18 a2       	std	Y+32, r1	; 0x20
{
	// Set calibrate
	useCalibrate = true;

	// Reset values
	float sumX = 0;
    35e2:	19 8a       	std	Y+17, r1	; 0x11
    35e4:	1a 8a       	std	Y+18, r1	; 0x12
    35e6:	1b 8a       	std	Y+19, r1	; 0x13
    35e8:	1c 8a       	std	Y+20, r1	; 0x14

		_delay_ms(5);
	}

	// Calculate delta vectors
	dg.XAxis = sumX / samples;
    35ea:	60 2f       	mov	r22, r16
    35ec:	70 e0       	ldi	r23, 0x00	; 0
    35ee:	80 e0       	ldi	r24, 0x00	; 0
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	68 d5       	rcall	.+2768   	; 0x40c4 <__floatsisf>
    35f4:	4b 01       	movw	r8, r22
    35f6:	5c 01       	movw	r10, r24
    35f8:	9b 01       	movw	r18, r22
    35fa:	ac 01       	movw	r20, r24
    35fc:	69 89       	ldd	r22, Y+17	; 0x11
    35fe:	7a 89       	ldd	r23, Y+18	; 0x12
    3600:	8b 89       	ldd	r24, Y+19	; 0x13
    3602:	9c 89       	ldd	r25, Y+20	; 0x14
    3604:	c4 d4       	rcall	.+2440   	; 0x3f8e <__divsf3>
    3606:	6b 01       	movw	r12, r22
    3608:	7c 01       	movw	r14, r24
    360a:	f1 01       	movw	r30, r2
    360c:	64 af       	std	Z+60, r22	; 0x3c
    360e:	75 af       	std	Z+61, r23	; 0x3d
    3610:	86 af       	std	Z+62, r24	; 0x3e
    3612:	97 af       	std	Z+63, r25	; 0x3f
	dg.YAxis = sumY / samples;
    3614:	a5 01       	movw	r20, r10
    3616:	94 01       	movw	r18, r8
    3618:	6d 8d       	ldd	r22, Y+29	; 0x1d
    361a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    361c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    361e:	98 a1       	ldd	r25, Y+32	; 0x20
    3620:	b6 d4       	rcall	.+2412   	; 0x3f8e <__divsf3>
    3622:	2b 01       	movw	r4, r22
    3624:	3c 01       	movw	r6, r24
    3626:	f1 01       	movw	r30, r2
    3628:	e0 5c       	subi	r30, 0xC0	; 192
    362a:	ff 4f       	sbci	r31, 0xFF	; 255
    362c:	60 83       	st	Z, r22
    362e:	71 83       	std	Z+1, r23	; 0x01
    3630:	82 83       	std	Z+2, r24	; 0x02
    3632:	93 83       	std	Z+3, r25	; 0x03
	dg.ZAxis = sumZ / samples;
    3634:	a5 01       	movw	r20, r10
    3636:	94 01       	movw	r18, r8
    3638:	69 a1       	ldd	r22, Y+33	; 0x21
    363a:	7a a1       	ldd	r23, Y+34	; 0x22
    363c:	8b a1       	ldd	r24, Y+35	; 0x23
    363e:	9c a1       	ldd	r25, Y+36	; 0x24
    3640:	a6 d4       	rcall	.+2380   	; 0x3f8e <__divsf3>
    3642:	4b 01       	movw	r8, r22
    3644:	5c 01       	movw	r10, r24
    3646:	f1 01       	movw	r30, r2
    3648:	ec 5b       	subi	r30, 0xBC	; 188
    364a:	ff 4f       	sbci	r31, 0xFF	; 255
    364c:	60 83       	st	Z, r22
    364e:	71 83       	std	Z+1, r23	; 0x01
    3650:	82 83       	std	Z+2, r24	; 0x02
    3652:	93 83       	std	Z+3, r25	; 0x03

	// Calculate threshold vectors
	th.XAxis = sqrt((sigmaX / 50) - (dg.XAxis * dg.XAxis));
    3654:	20 e0       	ldi	r18, 0x00	; 0
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	48 e4       	ldi	r20, 0x48	; 72
    365a:	52 e4       	ldi	r21, 0x42	; 66
    365c:	6d 85       	ldd	r22, Y+13	; 0x0d
    365e:	7e 85       	ldd	r23, Y+14	; 0x0e
    3660:	8f 85       	ldd	r24, Y+15	; 0x0f
    3662:	98 89       	ldd	r25, Y+16	; 0x10
    3664:	94 d4       	rcall	.+2344   	; 0x3f8e <__divsf3>
    3666:	69 8b       	std	Y+17, r22	; 0x11
    3668:	7a 8b       	std	Y+18, r23	; 0x12
    366a:	8b 8b       	std	Y+19, r24	; 0x13
    366c:	9c 8b       	std	Y+20, r25	; 0x14
    366e:	20 e0       	ldi	r18, 0x00	; 0
    3670:	30 e0       	ldi	r19, 0x00	; 0
    3672:	48 e4       	ldi	r20, 0x48	; 72
    3674:	52 e4       	ldi	r21, 0x42	; 66
    3676:	6d 85       	ldd	r22, Y+13	; 0x0d
    3678:	7e 85       	ldd	r23, Y+14	; 0x0e
    367a:	8f 85       	ldd	r24, Y+15	; 0x0f
    367c:	98 89       	ldd	r25, Y+16	; 0x10
    367e:	87 d4       	rcall	.+2318   	; 0x3f8e <__divsf3>
    3680:	6d 87       	std	Y+13, r22	; 0x0d
    3682:	7e 87       	std	Y+14, r23	; 0x0e
    3684:	8f 87       	std	Y+15, r24	; 0x0f
    3686:	98 8b       	std	Y+16, r25	; 0x10
    3688:	a7 01       	movw	r20, r14
    368a:	96 01       	movw	r18, r12
    368c:	c7 01       	movw	r24, r14
    368e:	b6 01       	movw	r22, r12
    3690:	32 d6       	rcall	.+3172   	; 0x42f6 <__mulsf3>
    3692:	9b 01       	movw	r18, r22
    3694:	ac 01       	movw	r20, r24
    3696:	6d 85       	ldd	r22, Y+13	; 0x0d
    3698:	7e 85       	ldd	r23, Y+14	; 0x0e
    369a:	8f 85       	ldd	r24, Y+15	; 0x0f
    369c:	98 89       	ldd	r25, Y+16	; 0x10
    369e:	a9 d3       	rcall	.+1874   	; 0x3df2 <__subsf3>
    36a0:	97 d6       	rcall	.+3374   	; 0x43d0 <sqrt>
    36a2:	f1 01       	movw	r30, r2
    36a4:	ec 5a       	subi	r30, 0xAC	; 172
    36a6:	ff 4f       	sbci	r31, 0xFF	; 255
    36a8:	60 83       	st	Z, r22
    36aa:	71 83       	std	Z+1, r23	; 0x01
    36ac:	82 83       	std	Z+2, r24	; 0x02
    36ae:	93 83       	std	Z+3, r25	; 0x03
	th.YAxis = sqrt((sigmaY / 50) - (dg.YAxis * dg.YAxis));
    36b0:	20 e0       	ldi	r18, 0x00	; 0
    36b2:	30 e0       	ldi	r19, 0x00	; 0
    36b4:	48 e4       	ldi	r20, 0x48	; 72
    36b6:	52 e4       	ldi	r21, 0x42	; 66
    36b8:	6d 89       	ldd	r22, Y+21	; 0x15
    36ba:	7e 89       	ldd	r23, Y+22	; 0x16
    36bc:	8f 89       	ldd	r24, Y+23	; 0x17
    36be:	98 8d       	ldd	r25, Y+24	; 0x18
    36c0:	66 d4       	rcall	.+2252   	; 0x3f8e <__divsf3>
    36c2:	6b 01       	movw	r12, r22
    36c4:	7c 01       	movw	r14, r24
    36c6:	a3 01       	movw	r20, r6
    36c8:	92 01       	movw	r18, r4
    36ca:	c3 01       	movw	r24, r6
    36cc:	b2 01       	movw	r22, r4
    36ce:	13 d6       	rcall	.+3110   	; 0x42f6 <__mulsf3>
    36d0:	9b 01       	movw	r18, r22
    36d2:	ac 01       	movw	r20, r24
    36d4:	c7 01       	movw	r24, r14
    36d6:	b6 01       	movw	r22, r12
    36d8:	8c d3       	rcall	.+1816   	; 0x3df2 <__subsf3>
    36da:	7a d6       	rcall	.+3316   	; 0x43d0 <sqrt>
    36dc:	f1 01       	movw	r30, r2
    36de:	e8 5a       	subi	r30, 0xA8	; 168
    36e0:	ff 4f       	sbci	r31, 0xFF	; 255
    36e2:	60 83       	st	Z, r22
    36e4:	71 83       	std	Z+1, r23	; 0x01
    36e6:	82 83       	std	Z+2, r24	; 0x02
    36e8:	93 83       	std	Z+3, r25	; 0x03
	th.ZAxis = sqrt((sigmaZ / 50) - (dg.ZAxis * dg.ZAxis));
    36ea:	20 e0       	ldi	r18, 0x00	; 0
    36ec:	30 e0       	ldi	r19, 0x00	; 0
    36ee:	48 e4       	ldi	r20, 0x48	; 72
    36f0:	52 e4       	ldi	r21, 0x42	; 66
    36f2:	69 8d       	ldd	r22, Y+25	; 0x19
    36f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36fa:	49 d4       	rcall	.+2194   	; 0x3f8e <__divsf3>
    36fc:	6b 01       	movw	r12, r22
    36fe:	7c 01       	movw	r14, r24
    3700:	a5 01       	movw	r20, r10
    3702:	94 01       	movw	r18, r8
    3704:	c5 01       	movw	r24, r10
    3706:	b4 01       	movw	r22, r8
    3708:	f6 d5       	rcall	.+3052   	; 0x42f6 <__mulsf3>
    370a:	9b 01       	movw	r18, r22
    370c:	ac 01       	movw	r20, r24
    370e:	c7 01       	movw	r24, r14
    3710:	b6 01       	movw	r22, r12
    3712:	6f d3       	rcall	.+1758   	; 0x3df2 <__subsf3>
    3714:	5d d6       	rcall	.+3258   	; 0x43d0 <sqrt>
    3716:	f1 01       	movw	r30, r2
    3718:	e4 5a       	subi	r30, 0xA4	; 164
    371a:	ff 4f       	sbci	r31, 0xFF	; 255
    371c:	60 83       	st	Z, r22
    371e:	71 83       	std	Z+1, r23	; 0x01
    3720:	82 83       	std	Z+2, r24	; 0x02
    3722:	93 83       	std	Z+3, r25	; 0x03

	// If already set threshold, recalculate threshold vectors
	if (actualThreshold > 0)
    3724:	78 96       	adiw	r30, 0x18	; 24
    3726:	c0 80       	ld	r12, Z
    3728:	d1 80       	ldd	r13, Z+1	; 0x01
    372a:	e2 80       	ldd	r14, Z+2	; 0x02
    372c:	f3 80       	ldd	r15, Z+3	; 0x03
    372e:	20 e0       	ldi	r18, 0x00	; 0
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	a9 01       	movw	r20, r18
    3734:	c7 01       	movw	r24, r14
    3736:	b6 01       	movw	r22, r12
    3738:	d3 d5       	rcall	.+2982   	; 0x42e0 <__gesf2>
    373a:	18 16       	cp	r1, r24
    373c:	2c f4       	brge	.+10     	; 0x3748 <_ZN7MPU605013calibrateGyroEh+0x2e4>
	{
		setThreshold(actualThreshold);
    373e:	c7 01       	movw	r24, r14
    3740:	b6 01       	movw	r22, r12
    3742:	92 d4       	rcall	.+2340   	; 0x4068 <__fixunssfsi>
    3744:	c1 01       	movw	r24, r2
    3746:	28 de       	rcall	.-944    	; 0x3398 <_ZN7MPU605012setThresholdEh>
	}
}
    3748:	a4 96       	adiw	r28, 0x24	; 36
    374a:	0f b6       	in	r0, 0x3f	; 63
    374c:	f8 94       	cli
    374e:	de bf       	out	0x3e, r29	; 62
    3750:	0f be       	out	0x3f, r0	; 63
    3752:	cd bf       	out	0x3d, r28	; 61
    3754:	df 91       	pop	r29
    3756:	cf 91       	pop	r28
    3758:	1f 91       	pop	r17
    375a:	0f 91       	pop	r16
    375c:	ff 90       	pop	r15
    375e:	ef 90       	pop	r14
    3760:	df 90       	pop	r13
    3762:	cf 90       	pop	r12
    3764:	bf 90       	pop	r11
    3766:	af 90       	pop	r10
    3768:	9f 90       	pop	r9
    376a:	8f 90       	pop	r8
    376c:	7f 90       	pop	r7
    376e:	6f 90       	pop	r6
    3770:	5f 90       	pop	r5
    3772:	4f 90       	pop	r4
    3774:	3f 90       	pop	r3
    3776:	2f 90       	pop	r2
    3778:	08 95       	ret

0000377a <_ZN7MPU60508rateGyroEv>:

	// Remember old threshold value
	actualThreshold = multiple;
}

void MPU6050::rateGyro(){
    377a:	ef 92       	push	r14
    377c:	ff 92       	push	r15
    377e:	0f 93       	push	r16
    3780:	1f 93       	push	r17
    3782:	cf 93       	push	r28
    3784:	df 93       	push	r29
    3786:	cd b7       	in	r28, 0x3d	; 61
    3788:	de b7       	in	r29, 0x3e	; 62
    378a:	2c 97       	sbiw	r28, 0x0c	; 12
    378c:	0f b6       	in	r0, 0x3f	; 63
    378e:	f8 94       	cli
    3790:	de bf       	out	0x3e, r29	; 62
    3792:	0f be       	out	0x3f, r0	; 63
    3794:	cd bf       	out	0x3d, r28	; 61
    3796:	8c 01       	movw	r16, r24
	readRawGyro();
    3798:	bc 01       	movw	r22, r24
    379a:	ce 01       	movw	r24, r28
    379c:	01 96       	adiw	r24, 0x01	; 1
    379e:	af dd       	rcall	.-1186   	; 0x32fe <_ZN7MPU605011readRawGyroEv>
	gyroRateX = (rg.XAxis)/131;
    37a0:	78 01       	movw	r14, r16
    37a2:	80 e6       	ldi	r24, 0x60	; 96
    37a4:	e8 0e       	add	r14, r24
    37a6:	f1 1c       	adc	r15, r1
    37a8:	20 e0       	ldi	r18, 0x00	; 0
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	43 e0       	ldi	r20, 0x03	; 3
    37ae:	53 e4       	ldi	r21, 0x43	; 67
    37b0:	f8 01       	movw	r30, r16
    37b2:	64 85       	ldd	r22, Z+12	; 0x0c
    37b4:	75 85       	ldd	r23, Z+13	; 0x0d
    37b6:	86 85       	ldd	r24, Z+14	; 0x0e
    37b8:	97 85       	ldd	r25, Z+15	; 0x0f
    37ba:	e9 d3       	rcall	.+2002   	; 0x3f8e <__divsf3>
    37bc:	f7 01       	movw	r30, r14
    37be:	60 83       	st	Z, r22
    37c0:	71 83       	std	Z+1, r23	; 0x01
    37c2:	82 83       	std	Z+2, r24	; 0x02
    37c4:	93 83       	std	Z+3, r25	; 0x03
	gyroRateY = (rg.YAxis)/131;
    37c6:	78 01       	movw	r14, r16
    37c8:	f4 e6       	ldi	r31, 0x64	; 100
    37ca:	ef 0e       	add	r14, r31
    37cc:	f1 1c       	adc	r15, r1
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	43 e0       	ldi	r20, 0x03	; 3
    37d4:	53 e4       	ldi	r21, 0x43	; 67
    37d6:	f8 01       	movw	r30, r16
    37d8:	60 89       	ldd	r22, Z+16	; 0x10
    37da:	71 89       	ldd	r23, Z+17	; 0x11
    37dc:	82 89       	ldd	r24, Z+18	; 0x12
    37de:	93 89       	ldd	r25, Z+19	; 0x13
    37e0:	d6 d3       	rcall	.+1964   	; 0x3f8e <__divsf3>
    37e2:	f7 01       	movw	r30, r14
    37e4:	60 83       	st	Z, r22
    37e6:	71 83       	std	Z+1, r23	; 0x01
    37e8:	82 83       	std	Z+2, r24	; 0x02
    37ea:	93 83       	std	Z+3, r25	; 0x03
	gyroRateZ = (rg.ZAxis)/131;
    37ec:	78 01       	movw	r14, r16
    37ee:	f8 e6       	ldi	r31, 0x68	; 104
    37f0:	ef 0e       	add	r14, r31
    37f2:	f1 1c       	adc	r15, r1
    37f4:	20 e0       	ldi	r18, 0x00	; 0
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	43 e0       	ldi	r20, 0x03	; 3
    37fa:	53 e4       	ldi	r21, 0x43	; 67
    37fc:	f8 01       	movw	r30, r16
    37fe:	64 89       	ldd	r22, Z+20	; 0x14
    3800:	75 89       	ldd	r23, Z+21	; 0x15
    3802:	86 89       	ldd	r24, Z+22	; 0x16
    3804:	97 89       	ldd	r25, Z+23	; 0x17
    3806:	c3 d3       	rcall	.+1926   	; 0x3f8e <__divsf3>
    3808:	f7 01       	movw	r30, r14
    380a:	60 83       	st	Z, r22
    380c:	71 83       	std	Z+1, r23	; 0x01
    380e:	82 83       	std	Z+2, r24	; 0x02
    3810:	93 83       	std	Z+3, r25	; 0x03
}
    3812:	2c 96       	adiw	r28, 0x0c	; 12
    3814:	0f b6       	in	r0, 0x3f	; 63
    3816:	f8 94       	cli
    3818:	de bf       	out	0x3e, r29	; 62
    381a:	0f be       	out	0x3f, r0	; 63
    381c:	cd bf       	out	0x3d, r28	; 61
    381e:	df 91       	pop	r29
    3820:	cf 91       	pop	r28
    3822:	1f 91       	pop	r17
    3824:	0f 91       	pop	r16
    3826:	ff 90       	pop	r15
    3828:	ef 90       	pop	r14
    382a:	08 95       	ret

0000382c <_ZN7MPU605012getGyroRateXEv>:

float MPU6050::getGyroRateX(){
	return gyroRateX;
    382c:	fc 01       	movw	r30, r24
    382e:	e0 5a       	subi	r30, 0xA0	; 160
    3830:	ff 4f       	sbci	r31, 0xFF	; 255
    3832:	60 81       	ld	r22, Z
    3834:	71 81       	ldd	r23, Z+1	; 0x01
    3836:	82 81       	ldd	r24, Z+2	; 0x02
    3838:	93 81       	ldd	r25, Z+3	; 0x03
}
    383a:	08 95       	ret

0000383c <_ZN7MPU605012getGyroRateYEv>:
float MPU6050::getGyroRateY(){
	return gyroRateY;
    383c:	fc 01       	movw	r30, r24
    383e:	ec 59       	subi	r30, 0x9C	; 156
    3840:	ff 4f       	sbci	r31, 0xFF	; 255
    3842:	60 81       	ld	r22, Z
    3844:	71 81       	ldd	r23, Z+1	; 0x01
    3846:	82 81       	ldd	r24, Z+2	; 0x02
    3848:	93 81       	ldd	r25, Z+3	; 0x03
}
    384a:	08 95       	ret

0000384c <_ZN7MPU605012getGyroRateZEv>:
float MPU6050::getGyroRateZ(){
	return gyroRateZ;
    384c:	fc 01       	movw	r30, r24
    384e:	e8 59       	subi	r30, 0x98	; 152
    3850:	ff 4f       	sbci	r31, 0xFF	; 255
    3852:	60 81       	ld	r22, Z
    3854:	71 81       	ldd	r23, Z+1	; 0x01
    3856:	82 81       	ldd	r24, Z+2	; 0x02
    3858:	93 81       	ldd	r25, Z+3	; 0x03
    385a:	08 95       	ret

0000385c <_Z16checkRobotMotionv>:
 bool normalGame			= false;

 
void checkRobotMotion(){
	//Wait while main switch is not clicked//
 	while(READ(M_MAIN_SWITCH));
    385c:	78 99       	sbic	0x0f, 0	; 15
    385e:	fe cf       	rjmp	.-4      	; 0x385c <_Z16checkRobotMotionv>
 	////after main switch is clicked check the state of retry conditions//
 	if(!READ(M_DIRECTLY_LZ2))			{directlyLZ2 = true;}
    3860:	79 99       	sbic	0x0f, 1	; 15
    3862:	04 c0       	rjmp	.+8      	; 0x386c <_Z16checkRobotMotionv+0x10>
    3864:	81 e0       	ldi	r24, 0x01	; 1
    3866:	80 93 c4 04 	sts	0x04C4, r24
    386a:	08 95       	ret
 	else if(!READ(M_DIRECTLY_TZ3))		{directlyTZ3 = true;}
    386c:	7a 99       	sbic	0x0f, 2	; 15
    386e:	04 c0       	rjmp	.+8      	; 0x3878 <_Z16checkRobotMotionv+0x1c>
    3870:	81 e0       	ldi	r24, 0x01	; 1
    3872:	80 93 c3 04 	sts	0x04C3, r24
    3876:	08 95       	ret
 	else if(!READ(M_LZ2FORTZ3))			{LZ2ForTZ3   = true;}
    3878:	7b 99       	sbic	0x0f, 3	; 15
    387a:	04 c0       	rjmp	.+8      	; 0x3884 <_Z16checkRobotMotionv+0x28>
    387c:	81 e0       	ldi	r24, 0x01	; 1
    387e:	80 93 c2 04 	sts	0x04C2, r24
    3882:	08 95       	ret
 	else if(!READ(M_ALWAYSTZ2))			{alwaysTZ2   = true;}
    3884:	7c 99       	sbic	0x0f, 4	; 15
    3886:	04 c0       	rjmp	.+8      	; 0x3890 <_Z16checkRobotMotionv+0x34>
    3888:	81 e0       	ldi	r24, 0x01	; 1
    388a:	80 93 c1 04 	sts	0x04C1, r24
    388e:	08 95       	ret
 	else if(!READ(M_ALWAYSTZ1))			{alwaysTZ1   = true;}
    3890:	7d 99       	sbic	0x0f, 5	; 15
    3892:	04 c0       	rjmp	.+8      	; 0x389c <_Z16checkRobotMotionv+0x40>
    3894:	81 e0       	ldi	r24, 0x01	; 1
    3896:	80 93 c0 04 	sts	0x04C0, r24
    389a:	08 95       	ret
 	else								{normalGame = true;}
    389c:	81 e0       	ldi	r24, 0x01	; 1
    389e:	80 93 bf 04 	sts	0x04BF, r24
    38a2:	08 95       	ret

000038a4 <_Z8i2c_initv>:
uint8_t i2c_write_array(uint8_t *data, uint8_t count){
	while(count--){
		if(i2c_write(*data++) != 0)		return count;
	}
	return 0;
}
    38a4:	10 92 b9 00 	sts	0x00B9, r1
    38a8:	88 e4       	ldi	r24, 0x48	; 72
    38aa:	80 93 b8 00 	sts	0x00B8, r24
    38ae:	08 95       	ret

000038b0 <_Z9i2c_starth>:
    38b0:	94 ea       	ldi	r25, 0xA4	; 164
    38b2:	90 93 bc 00 	sts	0x00BC, r25
    38b6:	ec eb       	ldi	r30, 0xBC	; 188
    38b8:	f0 e0       	ldi	r31, 0x00	; 0
    38ba:	90 81       	ld	r25, Z
    38bc:	99 23       	and	r25, r25
    38be:	ec f7       	brge	.-6      	; 0x38ba <_Z9i2c_starth+0xa>
    38c0:	90 91 b9 00 	lds	r25, 0x00B9
    38c4:	98 7f       	andi	r25, 0xF8	; 248
    38c6:	98 30       	cpi	r25, 0x08	; 8
    38c8:	11 f0       	breq	.+4      	; 0x38ce <_Z9i2c_starth+0x1e>
    38ca:	90 31       	cpi	r25, 0x10	; 16
    38cc:	a1 f4       	brne	.+40     	; 0x38f6 <_Z9i2c_starth+0x46>
    38ce:	80 93 bb 00 	sts	0x00BB, r24
    38d2:	84 e8       	ldi	r24, 0x84	; 132
    38d4:	80 93 bc 00 	sts	0x00BC, r24
    38d8:	ec eb       	ldi	r30, 0xBC	; 188
    38da:	f0 e0       	ldi	r31, 0x00	; 0
    38dc:	80 81       	ld	r24, Z
    38de:	88 23       	and	r24, r24
    38e0:	ec f7       	brge	.-6      	; 0x38dc <_Z9i2c_starth+0x2c>
    38e2:	90 91 b9 00 	lds	r25, 0x00B9
    38e6:	98 7f       	andi	r25, 0xF8	; 248
    38e8:	98 31       	cpi	r25, 0x18	; 24
    38ea:	39 f0       	breq	.+14     	; 0x38fa <_Z9i2c_starth+0x4a>
    38ec:	81 e0       	ldi	r24, 0x01	; 1
    38ee:	90 34       	cpi	r25, 0x40	; 64
    38f0:	29 f4       	brne	.+10     	; 0x38fc <_Z9i2c_starth+0x4c>
    38f2:	80 e0       	ldi	r24, 0x00	; 0
    38f4:	08 95       	ret
    38f6:	81 e0       	ldi	r24, 0x01	; 1
    38f8:	08 95       	ret
    38fa:	80 e0       	ldi	r24, 0x00	; 0
    38fc:	08 95       	ret

000038fe <_Z13i2c_rep_starth>:
    38fe:	d8 cf       	rjmp	.-80     	; 0x38b0 <_Z9i2c_starth>
    3900:	08 95       	ret

00003902 <_Z8i2c_stopv>:
    3902:	84 e9       	ldi	r24, 0x94	; 148
    3904:	80 93 bc 00 	sts	0x00BC, r24
    3908:	ec eb       	ldi	r30, 0xBC	; 188
    390a:	f0 e0       	ldi	r31, 0x00	; 0
    390c:	80 81       	ld	r24, Z
    390e:	84 fd       	sbrc	r24, 4
    3910:	fd cf       	rjmp	.-6      	; 0x390c <_Z8i2c_stopv+0xa>
    3912:	08 95       	ret

00003914 <_Z14i2c_start_waith>:
    3914:	bf 92       	push	r11
    3916:	cf 92       	push	r12
    3918:	df 92       	push	r13
    391a:	ef 92       	push	r14
    391c:	ff 92       	push	r15
    391e:	0f 93       	push	r16
    3920:	1f 93       	push	r17
    3922:	cf 93       	push	r28
    3924:	df 93       	push	r29
    3926:	b8 2e       	mov	r11, r24
    3928:	cc eb       	ldi	r28, 0xBC	; 188
    392a:	d0 e0       	ldi	r29, 0x00	; 0
    392c:	09 eb       	ldi	r16, 0xB9	; 185
    392e:	10 e0       	ldi	r17, 0x00	; 0
    3930:	0f 2e       	mov	r0, r31
    3932:	f4 ea       	ldi	r31, 0xA4	; 164
    3934:	df 2e       	mov	r13, r31
    3936:	f0 2d       	mov	r31, r0
    3938:	0f 2e       	mov	r0, r31
    393a:	fb eb       	ldi	r31, 0xBB	; 187
    393c:	ef 2e       	mov	r14, r31
    393e:	f1 2c       	mov	r15, r1
    3940:	f0 2d       	mov	r31, r0
    3942:	0f 2e       	mov	r0, r31
    3944:	f4 e8       	ldi	r31, 0x84	; 132
    3946:	cf 2e       	mov	r12, r31
    3948:	f0 2d       	mov	r31, r0
    394a:	d8 82       	st	Y, r13
    394c:	98 81       	ld	r25, Y
    394e:	99 23       	and	r25, r25
    3950:	ec f7       	brge	.-6      	; 0x394c <_Z14i2c_start_waith+0x38>
    3952:	f8 01       	movw	r30, r16
    3954:	90 81       	ld	r25, Z
    3956:	98 7f       	andi	r25, 0xF8	; 248
    3958:	98 30       	cpi	r25, 0x08	; 8
    395a:	b9 f7       	brne	.-18     	; 0x394a <_Z14i2c_start_waith+0x36>
    395c:	f7 01       	movw	r30, r14
    395e:	b0 82       	st	Z, r11
    3960:	c8 82       	st	Y, r12
    3962:	98 81       	ld	r25, Y
    3964:	99 23       	and	r25, r25
    3966:	ec f7       	brge	.-6      	; 0x3962 <_Z14i2c_start_waith+0x4e>
    3968:	f8 01       	movw	r30, r16
    396a:	90 81       	ld	r25, Z
    396c:	98 7f       	andi	r25, 0xF8	; 248
    396e:	98 31       	cpi	r25, 0x18	; 24
    3970:	11 f0       	breq	.+4      	; 0x3976 <_Z14i2c_start_waith+0x62>
    3972:	c7 df       	rcall	.-114    	; 0x3902 <_Z8i2c_stopv>
    3974:	ea cf       	rjmp	.-44     	; 0x394a <_Z14i2c_start_waith+0x36>
    3976:	df 91       	pop	r29
    3978:	cf 91       	pop	r28
    397a:	1f 91       	pop	r17
    397c:	0f 91       	pop	r16
    397e:	ff 90       	pop	r15
    3980:	ef 90       	pop	r14
    3982:	df 90       	pop	r13
    3984:	cf 90       	pop	r12
    3986:	bf 90       	pop	r11
    3988:	08 95       	ret

0000398a <_Z9i2c_writeh>:
    398a:	80 93 bb 00 	sts	0x00BB, r24
    398e:	84 e8       	ldi	r24, 0x84	; 132
    3990:	80 93 bc 00 	sts	0x00BC, r24
    3994:	ec eb       	ldi	r30, 0xBC	; 188
    3996:	f0 e0       	ldi	r31, 0x00	; 0
    3998:	80 81       	ld	r24, Z
    399a:	88 23       	and	r24, r24
    399c:	ec f7       	brge	.-6      	; 0x3998 <_Z9i2c_writeh+0xe>
    399e:	90 91 b9 00 	lds	r25, 0x00B9
    39a2:	98 7f       	andi	r25, 0xF8	; 248
    39a4:	81 e0       	ldi	r24, 0x01	; 1
    39a6:	98 32       	cpi	r25, 0x28	; 40
    39a8:	09 f4       	brne	.+2      	; 0x39ac <_Z9i2c_writeh+0x22>
    39aa:	80 e0       	ldi	r24, 0x00	; 0
    39ac:	08 95       	ret

000039ae <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    39ae:	84 ec       	ldi	r24, 0xC4	; 196
    39b0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    39b4:	ec eb       	ldi	r30, 0xBC	; 188
    39b6:	f0 e0       	ldi	r31, 0x00	; 0
    39b8:	80 81       	ld	r24, Z
    39ba:	88 23       	and	r24, r24
    39bc:	ec f7       	brge	.-6      	; 0x39b8 <_Z11i2c_readAckv+0xa>

    return TWDR;
    39be:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    39c2:	08 95       	ret

000039c4 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    39c4:	84 e8       	ldi	r24, 0x84	; 132
    39c6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    39ca:	ec eb       	ldi	r30, 0xBC	; 188
    39cc:	f0 e0       	ldi	r31, 0x00	; 0
    39ce:	80 81       	ld	r24, Z
    39d0:	88 23       	and	r24, r24
    39d2:	ec f7       	brge	.-6      	; 0x39ce <_Z11i2c_readNakv+0xa>
	
    return TWDR;
    39d4:	80 91 bb 00 	lds	r24, 0x00BB

    39d8:	08 95       	ret

000039da <__vector_25>:
 Input:    None
 Returns:  None
 **************************************************************************/
void uart2_flush(void)
{
	UART2_RxHead = UART2_RxTail;
    39da:	1f 92       	push	r1
    39dc:	0f 92       	push	r0
    39de:	0f b6       	in	r0, 0x3f	; 63
    39e0:	0f 92       	push	r0
    39e2:	11 24       	eor	r1, r1
    39e4:	0b b6       	in	r0, 0x3b	; 59
    39e6:	0f 92       	push	r0
    39e8:	2f 93       	push	r18
    39ea:	8f 93       	push	r24
    39ec:	9f 93       	push	r25
    39ee:	ef 93       	push	r30
    39f0:	ff 93       	push	r31
    39f2:	80 91 c0 00 	lds	r24, 0x00C0
    39f6:	20 91 c6 00 	lds	r18, 0x00C6
    39fa:	88 71       	andi	r24, 0x18	; 24
    39fc:	e0 91 75 05 	lds	r30, 0x0575
    3a00:	ef 5f       	subi	r30, 0xFF	; 255
    3a02:	ef 71       	andi	r30, 0x1F	; 31
    3a04:	90 91 74 05 	lds	r25, 0x0574
    3a08:	e9 17       	cp	r30, r25
    3a0a:	39 f0       	breq	.+14     	; 0x3a1a <__vector_25+0x40>
    3a0c:	e0 93 75 05 	sts	0x0575, r30
    3a10:	f0 e0       	ldi	r31, 0x00	; 0
    3a12:	e8 58       	subi	r30, 0x88	; 136
    3a14:	fa 4f       	sbci	r31, 0xFA	; 250
    3a16:	20 83       	st	Z, r18
    3a18:	01 c0       	rjmp	.+2      	; 0x3a1c <__vector_25+0x42>
    3a1a:	82 e0       	ldi	r24, 0x02	; 2
    3a1c:	80 93 73 05 	sts	0x0573, r24
    3a20:	ff 91       	pop	r31
    3a22:	ef 91       	pop	r30
    3a24:	9f 91       	pop	r25
    3a26:	8f 91       	pop	r24
    3a28:	2f 91       	pop	r18
    3a2a:	0f 90       	pop	r0
    3a2c:	0b be       	out	0x3b, r0	; 59
    3a2e:	0f 90       	pop	r0
    3a30:	0f be       	out	0x3f, r0	; 63
    3a32:	0f 90       	pop	r0
    3a34:	1f 90       	pop	r1
    3a36:	18 95       	reti

00003a38 <__vector_26>:
    3a38:	1f 92       	push	r1
    3a3a:	0f 92       	push	r0
    3a3c:	0f b6       	in	r0, 0x3f	; 63
    3a3e:	0f 92       	push	r0
    3a40:	11 24       	eor	r1, r1
    3a42:	0b b6       	in	r0, 0x3b	; 59
    3a44:	0f 92       	push	r0
    3a46:	8f 93       	push	r24
    3a48:	9f 93       	push	r25
    3a4a:	ef 93       	push	r30
    3a4c:	ff 93       	push	r31
    3a4e:	90 91 77 05 	lds	r25, 0x0577
    3a52:	80 91 76 05 	lds	r24, 0x0576
    3a56:	98 17       	cp	r25, r24
    3a58:	69 f0       	breq	.+26     	; 0x3a74 <__vector_26+0x3c>
    3a5a:	e0 91 76 05 	lds	r30, 0x0576
    3a5e:	ef 5f       	subi	r30, 0xFF	; 255
    3a60:	ef 71       	andi	r30, 0x1F	; 31
    3a62:	e0 93 76 05 	sts	0x0576, r30
    3a66:	f0 e0       	ldi	r31, 0x00	; 0
    3a68:	e8 56       	subi	r30, 0x68	; 104
    3a6a:	fa 4f       	sbci	r31, 0xFA	; 250
    3a6c:	80 81       	ld	r24, Z
    3a6e:	80 93 c6 00 	sts	0x00C6, r24
    3a72:	05 c0       	rjmp	.+10     	; 0x3a7e <__vector_26+0x46>
    3a74:	e1 ec       	ldi	r30, 0xC1	; 193
    3a76:	f0 e0       	ldi	r31, 0x00	; 0
    3a78:	80 81       	ld	r24, Z
    3a7a:	8f 7d       	andi	r24, 0xDF	; 223
    3a7c:	80 83       	st	Z, r24
    3a7e:	ff 91       	pop	r31
    3a80:	ef 91       	pop	r30
    3a82:	9f 91       	pop	r25
    3a84:	8f 91       	pop	r24
    3a86:	0f 90       	pop	r0
    3a88:	0b be       	out	0x3b, r0	; 59
    3a8a:	0f 90       	pop	r0
    3a8c:	0f be       	out	0x3f, r0	; 63
    3a8e:	0f 90       	pop	r0
    3a90:	1f 90       	pop	r1
    3a92:	18 95       	reti

00003a94 <_Z10uart0_initj>:
    3a94:	10 92 77 05 	sts	0x0577, r1
    3a98:	10 92 76 05 	sts	0x0576, r1
    3a9c:	10 92 75 05 	sts	0x0575, r1
    3aa0:	10 92 74 05 	sts	0x0574, r1
    3aa4:	99 23       	and	r25, r25
    3aa6:	24 f4       	brge	.+8      	; 0x3ab0 <_Z10uart0_initj+0x1c>
    3aa8:	22 e0       	ldi	r18, 0x02	; 2
    3aaa:	20 93 c0 00 	sts	0x00C0, r18
    3aae:	9f 77       	andi	r25, 0x7F	; 127
    3ab0:	90 93 c5 00 	sts	0x00C5, r25
    3ab4:	80 93 c4 00 	sts	0x00C4, r24
    3ab8:	88 e9       	ldi	r24, 0x98	; 152
    3aba:	80 93 c1 00 	sts	0x00C1, r24
    3abe:	86 e0       	ldi	r24, 0x06	; 6
    3ac0:	80 93 c2 00 	sts	0x00C2, r24
    3ac4:	08 95       	ret

00003ac6 <_Z10uart0_putch>:
    3ac6:	20 91 77 05 	lds	r18, 0x0577
    3aca:	2f 5f       	subi	r18, 0xFF	; 255
    3acc:	2f 71       	andi	r18, 0x1F	; 31
    3ace:	90 91 76 05 	lds	r25, 0x0576
    3ad2:	29 17       	cp	r18, r25
    3ad4:	e1 f3       	breq	.-8      	; 0x3ace <_Z10uart0_putch+0x8>
    3ad6:	e2 2f       	mov	r30, r18
    3ad8:	f0 e0       	ldi	r31, 0x00	; 0
    3ada:	e8 56       	subi	r30, 0x68	; 104
    3adc:	fa 4f       	sbci	r31, 0xFA	; 250
    3ade:	80 83       	st	Z, r24
    3ae0:	20 93 77 05 	sts	0x0577, r18
    3ae4:	e1 ec       	ldi	r30, 0xC1	; 193
    3ae6:	f0 e0       	ldi	r31, 0x00	; 0
    3ae8:	80 81       	ld	r24, Z
    3aea:	80 62       	ori	r24, 0x20	; 32
    3aec:	80 83       	st	Z, r24
    3aee:	08 95       	ret

00003af0 <_Z10uart0_putsPKc>:
    3af0:	cf 93       	push	r28
    3af2:	df 93       	push	r29
    3af4:	ec 01       	movw	r28, r24
    3af6:	88 81       	ld	r24, Y
    3af8:	88 23       	and	r24, r24
    3afa:	29 f0       	breq	.+10     	; 0x3b06 <_Z10uart0_putsPKc+0x16>
    3afc:	21 96       	adiw	r28, 0x01	; 1
    3afe:	e3 df       	rcall	.-58     	; 0x3ac6 <_Z10uart0_putch>
    3b00:	89 91       	ld	r24, Y+
    3b02:	81 11       	cpse	r24, r1
    3b04:	fc cf       	rjmp	.-8      	; 0x3afe <_Z10uart0_putsPKc+0xe>
    3b06:	df 91       	pop	r29
    3b08:	cf 91       	pop	r28
    3b0a:	08 95       	ret

00003b0c <__vector_36>:
    3b0c:	1f 92       	push	r1
    3b0e:	0f 92       	push	r0
    3b10:	0f b6       	in	r0, 0x3f	; 63
    3b12:	0f 92       	push	r0
    3b14:	11 24       	eor	r1, r1
    3b16:	0b b6       	in	r0, 0x3b	; 59
    3b18:	0f 92       	push	r0
    3b1a:	2f 93       	push	r18
    3b1c:	8f 93       	push	r24
    3b1e:	9f 93       	push	r25
    3b20:	ef 93       	push	r30
    3b22:	ff 93       	push	r31
    3b24:	80 91 c8 00 	lds	r24, 0x00C8
    3b28:	20 91 ce 00 	lds	r18, 0x00CE
    3b2c:	88 71       	andi	r24, 0x18	; 24
    3b2e:	e0 91 30 05 	lds	r30, 0x0530
    3b32:	ef 5f       	subi	r30, 0xFF	; 255
    3b34:	ef 71       	andi	r30, 0x1F	; 31
    3b36:	90 91 2f 05 	lds	r25, 0x052F
    3b3a:	e9 17       	cp	r30, r25
    3b3c:	39 f0       	breq	.+14     	; 0x3b4c <__vector_36+0x40>
    3b3e:	e0 93 30 05 	sts	0x0530, r30
    3b42:	f0 e0       	ldi	r31, 0x00	; 0
    3b44:	ed 5c       	subi	r30, 0xCD	; 205
    3b46:	fa 4f       	sbci	r31, 0xFA	; 250
    3b48:	20 83       	st	Z, r18
    3b4a:	01 c0       	rjmp	.+2      	; 0x3b4e <__vector_36+0x42>
    3b4c:	82 e0       	ldi	r24, 0x02	; 2
    3b4e:	80 93 2e 05 	sts	0x052E, r24
    3b52:	ff 91       	pop	r31
    3b54:	ef 91       	pop	r30
    3b56:	9f 91       	pop	r25
    3b58:	8f 91       	pop	r24
    3b5a:	2f 91       	pop	r18
    3b5c:	0f 90       	pop	r0
    3b5e:	0b be       	out	0x3b, r0	; 59
    3b60:	0f 90       	pop	r0
    3b62:	0f be       	out	0x3f, r0	; 63
    3b64:	0f 90       	pop	r0
    3b66:	1f 90       	pop	r1
    3b68:	18 95       	reti

00003b6a <__vector_37>:
    3b6a:	1f 92       	push	r1
    3b6c:	0f 92       	push	r0
    3b6e:	0f b6       	in	r0, 0x3f	; 63
    3b70:	0f 92       	push	r0
    3b72:	11 24       	eor	r1, r1
    3b74:	0b b6       	in	r0, 0x3b	; 59
    3b76:	0f 92       	push	r0
    3b78:	8f 93       	push	r24
    3b7a:	9f 93       	push	r25
    3b7c:	ef 93       	push	r30
    3b7e:	ff 93       	push	r31
    3b80:	90 91 32 05 	lds	r25, 0x0532
    3b84:	80 91 31 05 	lds	r24, 0x0531
    3b88:	98 17       	cp	r25, r24
    3b8a:	69 f0       	breq	.+26     	; 0x3ba6 <__vector_37+0x3c>
    3b8c:	e0 91 31 05 	lds	r30, 0x0531
    3b90:	ef 5f       	subi	r30, 0xFF	; 255
    3b92:	ef 71       	andi	r30, 0x1F	; 31
    3b94:	e0 93 31 05 	sts	0x0531, r30
    3b98:	f0 e0       	ldi	r31, 0x00	; 0
    3b9a:	ed 5a       	subi	r30, 0xAD	; 173
    3b9c:	fa 4f       	sbci	r31, 0xFA	; 250
    3b9e:	80 81       	ld	r24, Z
    3ba0:	80 93 ce 00 	sts	0x00CE, r24
    3ba4:	05 c0       	rjmp	.+10     	; 0x3bb0 <__vector_37+0x46>
    3ba6:	e9 ec       	ldi	r30, 0xC9	; 201
    3ba8:	f0 e0       	ldi	r31, 0x00	; 0
    3baa:	80 81       	ld	r24, Z
    3bac:	8f 7d       	andi	r24, 0xDF	; 223
    3bae:	80 83       	st	Z, r24
    3bb0:	ff 91       	pop	r31
    3bb2:	ef 91       	pop	r30
    3bb4:	9f 91       	pop	r25
    3bb6:	8f 91       	pop	r24
    3bb8:	0f 90       	pop	r0
    3bba:	0b be       	out	0x3b, r0	; 59
    3bbc:	0f 90       	pop	r0
    3bbe:	0f be       	out	0x3f, r0	; 63
    3bc0:	0f 90       	pop	r0
    3bc2:	1f 90       	pop	r1
    3bc4:	18 95       	reti

00003bc6 <__vector_51>:
    3bc6:	1f 92       	push	r1
    3bc8:	0f 92       	push	r0
    3bca:	0f b6       	in	r0, 0x3f	; 63
    3bcc:	0f 92       	push	r0
    3bce:	11 24       	eor	r1, r1
    3bd0:	8f 93       	push	r24
    3bd2:	80 91 d6 00 	lds	r24, 0x00D6
    3bd6:	80 93 b8 05 	sts	0x05B8, r24
    3bda:	8f 91       	pop	r24
    3bdc:	0f 90       	pop	r0
    3bde:	0f be       	out	0x3f, r0	; 63
    3be0:	0f 90       	pop	r0
    3be2:	1f 90       	pop	r1
    3be4:	18 95       	reti

00003be6 <__vector_52>:
    3be6:	1f 92       	push	r1
    3be8:	0f 92       	push	r0
    3bea:	0f b6       	in	r0, 0x3f	; 63
    3bec:	0f 92       	push	r0
    3bee:	11 24       	eor	r1, r1
    3bf0:	0b b6       	in	r0, 0x3b	; 59
    3bf2:	0f 92       	push	r0
    3bf4:	8f 93       	push	r24
    3bf6:	9f 93       	push	r25
    3bf8:	ef 93       	push	r30
    3bfa:	ff 93       	push	r31
    3bfc:	90 91 0d 05 	lds	r25, 0x050D
    3c00:	80 91 0c 05 	lds	r24, 0x050C
    3c04:	98 17       	cp	r25, r24
    3c06:	69 f0       	breq	.+26     	; 0x3c22 <__vector_52+0x3c>
    3c08:	e0 91 0c 05 	lds	r30, 0x050C
    3c0c:	ef 5f       	subi	r30, 0xFF	; 255
    3c0e:	ef 71       	andi	r30, 0x1F	; 31
    3c10:	e0 93 0c 05 	sts	0x050C, r30
    3c14:	f0 e0       	ldi	r31, 0x00	; 0
    3c16:	e2 5f       	subi	r30, 0xF2	; 242
    3c18:	fa 4f       	sbci	r31, 0xFA	; 250
    3c1a:	80 81       	ld	r24, Z
    3c1c:	80 93 d6 00 	sts	0x00D6, r24
    3c20:	05 c0       	rjmp	.+10     	; 0x3c2c <__vector_52+0x46>
    3c22:	e1 ed       	ldi	r30, 0xD1	; 209
    3c24:	f0 e0       	ldi	r31, 0x00	; 0
    3c26:	80 81       	ld	r24, Z
    3c28:	8f 7d       	andi	r24, 0xDF	; 223
    3c2a:	80 83       	st	Z, r24
    3c2c:	ff 91       	pop	r31
    3c2e:	ef 91       	pop	r30
    3c30:	9f 91       	pop	r25
    3c32:	8f 91       	pop	r24
    3c34:	0f 90       	pop	r0
    3c36:	0b be       	out	0x3b, r0	; 59
    3c38:	0f 90       	pop	r0
    3c3a:	0f be       	out	0x3f, r0	; 63
    3c3c:	0f 90       	pop	r0
    3c3e:	1f 90       	pop	r1
    3c40:	18 95       	reti

00003c42 <_Z10uart2_initj>:
    3c42:	10 92 0d 05 	sts	0x050D, r1
    3c46:	10 92 0c 05 	sts	0x050C, r1
    3c4a:	10 92 0b 05 	sts	0x050B, r1
    3c4e:	10 92 0a 05 	sts	0x050A, r1
    3c52:	99 23       	and	r25, r25
    3c54:	24 f4       	brge	.+8      	; 0x3c5e <_Z10uart2_initj+0x1c>
    3c56:	22 e0       	ldi	r18, 0x02	; 2
    3c58:	20 93 d0 00 	sts	0x00D0, r18
    3c5c:	9f 77       	andi	r25, 0x7F	; 127
    3c5e:	90 93 d5 00 	sts	0x00D5, r25
    3c62:	80 93 d4 00 	sts	0x00D4, r24
    3c66:	88 e9       	ldi	r24, 0x98	; 152
    3c68:	80 93 d1 00 	sts	0x00D1, r24
    3c6c:	86 e0       	ldi	r24, 0x06	; 6
    3c6e:	80 93 d2 00 	sts	0x00D2, r24
    3c72:	08 95       	ret

00003c74 <_Z10uart2_getcv>:
    3c74:	80 91 b8 05 	lds	r24, 0x05B8
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	08 95       	ret

00003c7c <_Z10uart2_putch>:
    3c7c:	20 91 0d 05 	lds	r18, 0x050D
    3c80:	2f 5f       	subi	r18, 0xFF	; 255
    3c82:	2f 71       	andi	r18, 0x1F	; 31
    3c84:	90 91 0c 05 	lds	r25, 0x050C
    3c88:	29 17       	cp	r18, r25
    3c8a:	e1 f3       	breq	.-8      	; 0x3c84 <_Z10uart2_putch+0x8>
    3c8c:	e2 2f       	mov	r30, r18
    3c8e:	f0 e0       	ldi	r31, 0x00	; 0
    3c90:	e2 5f       	subi	r30, 0xF2	; 242
    3c92:	fa 4f       	sbci	r31, 0xFA	; 250
    3c94:	80 83       	st	Z, r24
    3c96:	20 93 0d 05 	sts	0x050D, r18
    3c9a:	e1 ed       	ldi	r30, 0xD1	; 209
    3c9c:	f0 e0       	ldi	r31, 0x00	; 0
    3c9e:	80 81       	ld	r24, Z
    3ca0:	80 62       	ori	r24, 0x20	; 32
    3ca2:	80 83       	st	Z, r24
    3ca4:	08 95       	ret

00003ca6 <__vector_54>:
ISR(UART3_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART3 Receive Complete interrupt
Purpose:  called when the UART3 has received a character
**************************************************************************/
{
    3ca6:	1f 92       	push	r1
    3ca8:	0f 92       	push	r0
    3caa:	0f b6       	in	r0, 0x3f	; 63
    3cac:	0f 92       	push	r0
    3cae:	11 24       	eor	r1, r1
    3cb0:	0b b6       	in	r0, 0x3b	; 59
    3cb2:	0f 92       	push	r0
    3cb4:	2f 93       	push	r18
    3cb6:	8f 93       	push	r24
    3cb8:	9f 93       	push	r25
    3cba:	ef 93       	push	r30
    3cbc:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;


	/* read UART status register and UART data register */
	usr = UART3_STATUS;
    3cbe:	80 91 30 01 	lds	r24, 0x0130
	data = UART3_DATA;
    3cc2:	20 91 36 01 	lds	r18, 0x0136
	

	/* */
	lastRxError = (usr & (_BV(FE3) | _BV(DOR3)));
    3cc6:	88 71       	andi	r24, 0x18	; 24

	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;
    3cc8:	e0 91 c7 04 	lds	r30, 0x04C7
    3ccc:	ef 5f       	subi	r30, 0xFF	; 255
    3cce:	ef 71       	andi	r30, 0x1F	; 31

	if (tmphead == UART3_RxTail) {
    3cd0:	90 91 c6 04 	lds	r25, 0x04C6
    3cd4:	e9 17       	cp	r30, r25
    3cd6:	39 f0       	breq	.+14     	; 0x3ce6 <__vector_54+0x40>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else {
		/* store new index */
		UART3_RxHead = tmphead;
    3cd8:	e0 93 c7 04 	sts	0x04C7, r30
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
    3cdc:	f0 e0       	ldi	r31, 0x00	; 0
    3cde:	e6 53       	subi	r30, 0x36	; 54
    3ce0:	fb 4f       	sbci	r31, 0xFB	; 251
    3ce2:	20 83       	st	Z, r18
    3ce4:	01 c0       	rjmp	.+2      	; 0x3ce8 <__vector_54+0x42>
	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;

	if (tmphead == UART3_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    3ce6:	82 e0       	ldi	r24, 0x02	; 2
		/* store new index */
		UART3_RxHead = tmphead;
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
	}
	UART3_LastRxError = lastRxError;
    3ce8:	80 93 c5 04 	sts	0x04C5, r24
}
    3cec:	ff 91       	pop	r31
    3cee:	ef 91       	pop	r30
    3cf0:	9f 91       	pop	r25
    3cf2:	8f 91       	pop	r24
    3cf4:	2f 91       	pop	r18
    3cf6:	0f 90       	pop	r0
    3cf8:	0b be       	out	0x3b, r0	; 59
    3cfa:	0f 90       	pop	r0
    3cfc:	0f be       	out	0x3f, r0	; 63
    3cfe:	0f 90       	pop	r0
    3d00:	1f 90       	pop	r1
    3d02:	18 95       	reti

00003d04 <__vector_55>:
ISR(UART3_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART3 Data Register Empty interrupt
Purpose:  called when the UART3 is ready to transmit the next byte
**************************************************************************/
{
    3d04:	1f 92       	push	r1
    3d06:	0f 92       	push	r0
    3d08:	0f b6       	in	r0, 0x3f	; 63
    3d0a:	0f 92       	push	r0
    3d0c:	11 24       	eor	r1, r1
    3d0e:	0b b6       	in	r0, 0x3b	; 59
    3d10:	0f 92       	push	r0
    3d12:	8f 93       	push	r24
    3d14:	9f 93       	push	r25
    3d16:	ef 93       	push	r30
    3d18:	ff 93       	push	r31
	unsigned char tmptail;


	if (UART3_TxHead != UART3_TxTail) {
    3d1a:	90 91 c9 04 	lds	r25, 0x04C9
    3d1e:	80 91 c8 04 	lds	r24, 0x04C8
    3d22:	98 17       	cp	r25, r24
    3d24:	69 f0       	breq	.+26     	; 0x3d40 <__vector_55+0x3c>
		/* calculate and store new buffer index */
		tmptail = (UART3_TxTail + 1) & UART_TX_BUFFER_MASK;
    3d26:	e0 91 c8 04 	lds	r30, 0x04C8
    3d2a:	ef 5f       	subi	r30, 0xFF	; 255
    3d2c:	ef 71       	andi	r30, 0x1F	; 31
		UART3_TxTail = tmptail;
    3d2e:	e0 93 c8 04 	sts	0x04C8, r30
		/* get one byte from buffer and write it to UART */
		UART3_DATA = UART3_TxBuf[tmptail];  /* start transmission */
    3d32:	f0 e0       	ldi	r31, 0x00	; 0
    3d34:	e6 51       	subi	r30, 0x16	; 22
    3d36:	fb 4f       	sbci	r31, 0xFB	; 251
    3d38:	80 81       	ld	r24, Z
    3d3a:	80 93 36 01 	sts	0x0136, r24
    3d3e:	05 c0       	rjmp	.+10     	; 0x3d4a <__vector_55+0x46>
	}
	else {
		/* tx buffer empty, disable UDRE interrupt */
		UART3_CONTROL &= ~_BV(UART3_UDRIE);
    3d40:	e1 e3       	ldi	r30, 0x31	; 49
    3d42:	f1 e0       	ldi	r31, 0x01	; 1
    3d44:	80 81       	ld	r24, Z
    3d46:	8f 7d       	andi	r24, 0xDF	; 223
    3d48:	80 83       	st	Z, r24
	}
}
    3d4a:	ff 91       	pop	r31
    3d4c:	ef 91       	pop	r30
    3d4e:	9f 91       	pop	r25
    3d50:	8f 91       	pop	r24
    3d52:	0f 90       	pop	r0
    3d54:	0b be       	out	0x3b, r0	; 59
    3d56:	0f 90       	pop	r0
    3d58:	0f be       	out	0x3f, r0	; 63
    3d5a:	0f 90       	pop	r0
    3d5c:	1f 90       	pop	r1
    3d5e:	18 95       	reti

00003d60 <_Z10uart3_initj>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart3_init(unsigned int baudrate)
{
	UART3_TxHead = 0;
    3d60:	10 92 c9 04 	sts	0x04C9, r1
	UART3_TxTail = 0;
    3d64:	10 92 c8 04 	sts	0x04C8, r1
	UART3_RxHead = 0;
    3d68:	10 92 c7 04 	sts	0x04C7, r1
	UART3_RxTail = 0;
    3d6c:	10 92 c6 04 	sts	0x04C6, r1


	/* Set baud rate */
	if (baudrate & 0x8000)
    3d70:	99 23       	and	r25, r25
    3d72:	24 f4       	brge	.+8      	; 0x3d7c <_Z10uart3_initj+0x1c>
	{
		UART3_STATUS = (3 << U2X3);  //Enable 2x speed 
    3d74:	26 e0       	ldi	r18, 0x06	; 6
    3d76:	20 93 30 01 	sts	0x0130, r18
		baudrate &= ~0x8000;
    3d7a:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRR3H = (unsigned char)(baudrate >> 8);
    3d7c:	90 93 35 01 	sts	0x0135, r25
	UBRR3L = (unsigned char)baudrate;
    3d80:	80 93 34 01 	sts	0x0134, r24

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART3_CONTROL = _BV(RXCIE3) | (1 << RXEN3) | (1 << TXEN3);
    3d84:	88 e9       	ldi	r24, 0x98	; 152
    3d86:	80 93 31 01 	sts	0x0131, r24

	/* Set frame format: asynchronous, 8data, no parity, 1-stop bit */
#ifdef URSEL3
	UCSR3C = (1 << URSEL3) | (1 << UCSZ30) | ( 1 << UCSZ31);
#else
	UCSR3C = (1 << UCSZ30) | ( 1 << UCSZ31);
    3d8a:	86 e0       	ldi	r24, 0x06	; 6
    3d8c:	80 93 32 01 	sts	0x0132, r24
    3d90:	08 95       	ret

00003d92 <_Z10uart3_getcv>:
{
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
    3d92:	90 91 c7 04 	lds	r25, 0x04C7
    3d96:	80 91 c6 04 	lds	r24, 0x04C6
    3d9a:	98 17       	cp	r25, r24
    3d9c:	91 f0       	breq	.+36     	; 0x3dc2 <_Z10uart3_getcv+0x30>
		 return UART_NO_DATA;   /* no data available */
	}

	/* calculate /store buffer index */
	tmptail = (UART3_RxTail + 1) & UART_RX_BUFFER_MASK;
    3d9e:	e0 91 c6 04 	lds	r30, 0x04C6
    3da2:	ef 5f       	subi	r30, 0xFF	; 255
    3da4:	ef 71       	andi	r30, 0x1F	; 31
	UART3_RxTail = tmptail;
    3da6:	e0 93 c6 04 	sts	0x04C6, r30

	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];
    3daa:	f0 e0       	ldi	r31, 0x00	; 0
    3dac:	e6 53       	subi	r30, 0x36	; 54
    3dae:	fb 4f       	sbci	r31, 0xFB	; 251
    3db0:	20 81       	ld	r18, Z

	return (UART3_LastRxError << 8) + data;
    3db2:	80 91 c5 04 	lds	r24, 0x04C5
    3db6:	90 e0       	ldi	r25, 0x00	; 0
    3db8:	98 2f       	mov	r25, r24
    3dba:	88 27       	eor	r24, r24
    3dbc:	82 0f       	add	r24, r18
    3dbe:	91 1d       	adc	r25, r1
    3dc0:	08 95       	ret
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
		 return UART_NO_DATA;   /* no data available */
    3dc2:	80 e0       	ldi	r24, 0x00	; 0
    3dc4:	91 e0       	ldi	r25, 0x01	; 1
	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];

	return (UART3_LastRxError << 8) + data;

}/* uart3_getc */
    3dc6:	08 95       	ret

00003dc8 <_Z10uart3_putch>:
void uart3_putc(unsigned char data)
{
	unsigned char tmphead;


	tmphead = (UART3_TxHead + 1) & UART_TX_BUFFER_MASK;
    3dc8:	20 91 c9 04 	lds	r18, 0x04C9
    3dcc:	2f 5f       	subi	r18, 0xFF	; 255
    3dce:	2f 71       	andi	r18, 0x1F	; 31

	while (tmphead == UART3_TxTail) {
    3dd0:	90 91 c8 04 	lds	r25, 0x04C8
    3dd4:	29 17       	cp	r18, r25
    3dd6:	e1 f3       	breq	.-8      	; 0x3dd0 <_Z10uart3_putch+0x8>
		;/* wait for free space in buffer */
	}

	UART3_TxBuf[tmphead] = data;
    3dd8:	e2 2f       	mov	r30, r18
    3dda:	f0 e0       	ldi	r31, 0x00	; 0
    3ddc:	e6 51       	subi	r30, 0x16	; 22
    3dde:	fb 4f       	sbci	r31, 0xFB	; 251
    3de0:	80 83       	st	Z, r24
	UART3_TxHead = tmphead;
    3de2:	20 93 c9 04 	sts	0x04C9, r18

	/* enable UDRE interrupt */
	UART3_CONTROL |= _BV(UART3_UDRIE);
    3de6:	e1 e3       	ldi	r30, 0x31	; 49
    3de8:	f1 e0       	ldi	r31, 0x01	; 1
    3dea:	80 81       	ld	r24, Z
    3dec:	80 62       	ori	r24, 0x20	; 32
    3dee:	80 83       	st	Z, r24
    3df0:	08 95       	ret

00003df2 <__subsf3>:
    3df2:	50 58       	subi	r21, 0x80	; 128

00003df4 <__addsf3>:
    3df4:	bb 27       	eor	r27, r27
    3df6:	aa 27       	eor	r26, r26
    3df8:	0e d0       	rcall	.+28     	; 0x3e16 <__addsf3x>
    3dfa:	27 c2       	rjmp	.+1102   	; 0x424a <__fp_round>
    3dfc:	f0 d1       	rcall	.+992    	; 0x41de <__fp_pscA>
    3dfe:	30 f0       	brcs	.+12     	; 0x3e0c <__addsf3+0x18>
    3e00:	f5 d1       	rcall	.+1002   	; 0x41ec <__fp_pscB>
    3e02:	20 f0       	brcs	.+8      	; 0x3e0c <__addsf3+0x18>
    3e04:	31 f4       	brne	.+12     	; 0x3e12 <__addsf3+0x1e>
    3e06:	9f 3f       	cpi	r25, 0xFF	; 255
    3e08:	11 f4       	brne	.+4      	; 0x3e0e <__addsf3+0x1a>
    3e0a:	1e f4       	brtc	.+6      	; 0x3e12 <__addsf3+0x1e>
    3e0c:	c0 c1       	rjmp	.+896    	; 0x418e <__fp_nan>
    3e0e:	0e f4       	brtc	.+2      	; 0x3e12 <__addsf3+0x1e>
    3e10:	e0 95       	com	r30
    3e12:	e7 fb       	bst	r30, 7
    3e14:	b6 c1       	rjmp	.+876    	; 0x4182 <__fp_inf>

00003e16 <__addsf3x>:
    3e16:	e9 2f       	mov	r30, r25
    3e18:	3a d2       	rcall	.+1140   	; 0x428e <__fp_split3>
    3e1a:	80 f3       	brcs	.-32     	; 0x3dfc <__addsf3+0x8>
    3e1c:	ba 17       	cp	r27, r26
    3e1e:	62 07       	cpc	r22, r18
    3e20:	73 07       	cpc	r23, r19
    3e22:	84 07       	cpc	r24, r20
    3e24:	95 07       	cpc	r25, r21
    3e26:	18 f0       	brcs	.+6      	; 0x3e2e <__addsf3x+0x18>
    3e28:	71 f4       	brne	.+28     	; 0x3e46 <__addsf3x+0x30>
    3e2a:	9e f5       	brtc	.+102    	; 0x3e92 <__addsf3x+0x7c>
    3e2c:	52 c2       	rjmp	.+1188   	; 0x42d2 <__fp_zero>
    3e2e:	0e f4       	brtc	.+2      	; 0x3e32 <__addsf3x+0x1c>
    3e30:	e0 95       	com	r30
    3e32:	0b 2e       	mov	r0, r27
    3e34:	ba 2f       	mov	r27, r26
    3e36:	a0 2d       	mov	r26, r0
    3e38:	0b 01       	movw	r0, r22
    3e3a:	b9 01       	movw	r22, r18
    3e3c:	90 01       	movw	r18, r0
    3e3e:	0c 01       	movw	r0, r24
    3e40:	ca 01       	movw	r24, r20
    3e42:	a0 01       	movw	r20, r0
    3e44:	11 24       	eor	r1, r1
    3e46:	ff 27       	eor	r31, r31
    3e48:	59 1b       	sub	r21, r25
    3e4a:	99 f0       	breq	.+38     	; 0x3e72 <__addsf3x+0x5c>
    3e4c:	59 3f       	cpi	r21, 0xF9	; 249
    3e4e:	50 f4       	brcc	.+20     	; 0x3e64 <__addsf3x+0x4e>
    3e50:	50 3e       	cpi	r21, 0xE0	; 224
    3e52:	68 f1       	brcs	.+90     	; 0x3eae <__addsf3x+0x98>
    3e54:	1a 16       	cp	r1, r26
    3e56:	f0 40       	sbci	r31, 0x00	; 0
    3e58:	a2 2f       	mov	r26, r18
    3e5a:	23 2f       	mov	r18, r19
    3e5c:	34 2f       	mov	r19, r20
    3e5e:	44 27       	eor	r20, r20
    3e60:	58 5f       	subi	r21, 0xF8	; 248
    3e62:	f3 cf       	rjmp	.-26     	; 0x3e4a <__addsf3x+0x34>
    3e64:	46 95       	lsr	r20
    3e66:	37 95       	ror	r19
    3e68:	27 95       	ror	r18
    3e6a:	a7 95       	ror	r26
    3e6c:	f0 40       	sbci	r31, 0x00	; 0
    3e6e:	53 95       	inc	r21
    3e70:	c9 f7       	brne	.-14     	; 0x3e64 <__addsf3x+0x4e>
    3e72:	7e f4       	brtc	.+30     	; 0x3e92 <__addsf3x+0x7c>
    3e74:	1f 16       	cp	r1, r31
    3e76:	ba 0b       	sbc	r27, r26
    3e78:	62 0b       	sbc	r22, r18
    3e7a:	73 0b       	sbc	r23, r19
    3e7c:	84 0b       	sbc	r24, r20
    3e7e:	ba f0       	brmi	.+46     	; 0x3eae <__addsf3x+0x98>
    3e80:	91 50       	subi	r25, 0x01	; 1
    3e82:	a1 f0       	breq	.+40     	; 0x3eac <__addsf3x+0x96>
    3e84:	ff 0f       	add	r31, r31
    3e86:	bb 1f       	adc	r27, r27
    3e88:	66 1f       	adc	r22, r22
    3e8a:	77 1f       	adc	r23, r23
    3e8c:	88 1f       	adc	r24, r24
    3e8e:	c2 f7       	brpl	.-16     	; 0x3e80 <__addsf3x+0x6a>
    3e90:	0e c0       	rjmp	.+28     	; 0x3eae <__addsf3x+0x98>
    3e92:	ba 0f       	add	r27, r26
    3e94:	62 1f       	adc	r22, r18
    3e96:	73 1f       	adc	r23, r19
    3e98:	84 1f       	adc	r24, r20
    3e9a:	48 f4       	brcc	.+18     	; 0x3eae <__addsf3x+0x98>
    3e9c:	87 95       	ror	r24
    3e9e:	77 95       	ror	r23
    3ea0:	67 95       	ror	r22
    3ea2:	b7 95       	ror	r27
    3ea4:	f7 95       	ror	r31
    3ea6:	9e 3f       	cpi	r25, 0xFE	; 254
    3ea8:	08 f0       	brcs	.+2      	; 0x3eac <__addsf3x+0x96>
    3eaa:	b3 cf       	rjmp	.-154    	; 0x3e12 <__addsf3+0x1e>
    3eac:	93 95       	inc	r25
    3eae:	88 0f       	add	r24, r24
    3eb0:	08 f0       	brcs	.+2      	; 0x3eb4 <__addsf3x+0x9e>
    3eb2:	99 27       	eor	r25, r25
    3eb4:	ee 0f       	add	r30, r30
    3eb6:	97 95       	ror	r25
    3eb8:	87 95       	ror	r24
    3eba:	08 95       	ret
    3ebc:	90 d1       	rcall	.+800    	; 0x41de <__fp_pscA>
    3ebe:	58 f0       	brcs	.+22     	; 0x3ed6 <__addsf3x+0xc0>
    3ec0:	80 e8       	ldi	r24, 0x80	; 128
    3ec2:	91 e0       	ldi	r25, 0x01	; 1
    3ec4:	09 f4       	brne	.+2      	; 0x3ec8 <__addsf3x+0xb2>
    3ec6:	9e ef       	ldi	r25, 0xFE	; 254
    3ec8:	91 d1       	rcall	.+802    	; 0x41ec <__fp_pscB>
    3eca:	28 f0       	brcs	.+10     	; 0x3ed6 <__addsf3x+0xc0>
    3ecc:	40 e8       	ldi	r20, 0x80	; 128
    3ece:	51 e0       	ldi	r21, 0x01	; 1
    3ed0:	59 f4       	brne	.+22     	; 0x3ee8 <atan2+0xe>
    3ed2:	5e ef       	ldi	r21, 0xFE	; 254
    3ed4:	09 c0       	rjmp	.+18     	; 0x3ee8 <atan2+0xe>
    3ed6:	5b c1       	rjmp	.+694    	; 0x418e <__fp_nan>
    3ed8:	fc c1       	rjmp	.+1016   	; 0x42d2 <__fp_zero>

00003eda <atan2>:
    3eda:	e9 2f       	mov	r30, r25
    3edc:	e0 78       	andi	r30, 0x80	; 128
    3ede:	d7 d1       	rcall	.+942    	; 0x428e <__fp_split3>
    3ee0:	68 f3       	brcs	.-38     	; 0x3ebc <__addsf3x+0xa6>
    3ee2:	09 2e       	mov	r0, r25
    3ee4:	05 2a       	or	r0, r21
    3ee6:	c1 f3       	breq	.-16     	; 0x3ed8 <__addsf3x+0xc2>
    3ee8:	26 17       	cp	r18, r22
    3eea:	37 07       	cpc	r19, r23
    3eec:	48 07       	cpc	r20, r24
    3eee:	59 07       	cpc	r21, r25
    3ef0:	38 f0       	brcs	.+14     	; 0x3f00 <atan2+0x26>
    3ef2:	0e 2e       	mov	r0, r30
    3ef4:	07 f8       	bld	r0, 7
    3ef6:	e0 25       	eor	r30, r0
    3ef8:	69 f0       	breq	.+26     	; 0x3f14 <atan2+0x3a>
    3efa:	e0 25       	eor	r30, r0
    3efc:	e0 64       	ori	r30, 0x40	; 64
    3efe:	0a c0       	rjmp	.+20     	; 0x3f14 <atan2+0x3a>
    3f00:	ef 63       	ori	r30, 0x3F	; 63
    3f02:	07 f8       	bld	r0, 7
    3f04:	00 94       	com	r0
    3f06:	07 fa       	bst	r0, 7
    3f08:	db 01       	movw	r26, r22
    3f0a:	b9 01       	movw	r22, r18
    3f0c:	9d 01       	movw	r18, r26
    3f0e:	dc 01       	movw	r26, r24
    3f10:	ca 01       	movw	r24, r20
    3f12:	ad 01       	movw	r20, r26
    3f14:	ef 93       	push	r30
    3f16:	4a d0       	rcall	.+148    	; 0x3fac <__divsf3_pse>
    3f18:	98 d1       	rcall	.+816    	; 0x424a <__fp_round>
    3f1a:	0a d0       	rcall	.+20     	; 0x3f30 <atan>
    3f1c:	5f 91       	pop	r21
    3f1e:	55 23       	and	r21, r21
    3f20:	31 f0       	breq	.+12     	; 0x3f2e <atan2+0x54>
    3f22:	2b ed       	ldi	r18, 0xDB	; 219
    3f24:	3f e0       	ldi	r19, 0x0F	; 15
    3f26:	49 e4       	ldi	r20, 0x49	; 73
    3f28:	50 fd       	sbrc	r21, 0
    3f2a:	49 ec       	ldi	r20, 0xC9	; 201
    3f2c:	63 cf       	rjmp	.-314    	; 0x3df4 <__addsf3>
    3f2e:	08 95       	ret

00003f30 <atan>:
    3f30:	df 93       	push	r29
    3f32:	dd 27       	eor	r29, r29
    3f34:	b9 2f       	mov	r27, r25
    3f36:	bf 77       	andi	r27, 0x7F	; 127
    3f38:	40 e8       	ldi	r20, 0x80	; 128
    3f3a:	5f e3       	ldi	r21, 0x3F	; 63
    3f3c:	16 16       	cp	r1, r22
    3f3e:	17 06       	cpc	r1, r23
    3f40:	48 07       	cpc	r20, r24
    3f42:	5b 07       	cpc	r21, r27
    3f44:	10 f4       	brcc	.+4      	; 0x3f4a <atan+0x1a>
    3f46:	d9 2f       	mov	r29, r25
    3f48:	cf d1       	rcall	.+926    	; 0x42e8 <inverse>
    3f4a:	9f 93       	push	r25
    3f4c:	8f 93       	push	r24
    3f4e:	7f 93       	push	r23
    3f50:	6f 93       	push	r22
    3f52:	7c d2       	rcall	.+1272   	; 0x444c <square>
    3f54:	e4 ee       	ldi	r30, 0xE4	; 228
    3f56:	f0 e0       	ldi	r31, 0x00	; 0
    3f58:	1d d1       	rcall	.+570    	; 0x4194 <__fp_powser>
    3f5a:	77 d1       	rcall	.+750    	; 0x424a <__fp_round>
    3f5c:	2f 91       	pop	r18
    3f5e:	3f 91       	pop	r19
    3f60:	4f 91       	pop	r20
    3f62:	5f 91       	pop	r21
    3f64:	d4 d1       	rcall	.+936    	; 0x430e <__mulsf3x>
    3f66:	dd 23       	and	r29, r29
    3f68:	49 f0       	breq	.+18     	; 0x3f7c <atan+0x4c>
    3f6a:	90 58       	subi	r25, 0x80	; 128
    3f6c:	a2 ea       	ldi	r26, 0xA2	; 162
    3f6e:	2a ed       	ldi	r18, 0xDA	; 218
    3f70:	3f e0       	ldi	r19, 0x0F	; 15
    3f72:	49 ec       	ldi	r20, 0xC9	; 201
    3f74:	5f e3       	ldi	r21, 0x3F	; 63
    3f76:	d0 78       	andi	r29, 0x80	; 128
    3f78:	5d 27       	eor	r21, r29
    3f7a:	4d df       	rcall	.-358    	; 0x3e16 <__addsf3x>
    3f7c:	df 91       	pop	r29
    3f7e:	65 c1       	rjmp	.+714    	; 0x424a <__fp_round>

00003f80 <__cmpsf2>:
    3f80:	dc d0       	rcall	.+440    	; 0x413a <__fp_cmp>
    3f82:	08 f4       	brcc	.+2      	; 0x3f86 <__cmpsf2+0x6>
    3f84:	81 e0       	ldi	r24, 0x01	; 1
    3f86:	08 95       	ret

00003f88 <cos>:
    3f88:	39 d1       	rcall	.+626    	; 0x41fc <__fp_rempio2>
    3f8a:	e3 95       	inc	r30
    3f8c:	6f c1       	rjmp	.+734    	; 0x426c <__fp_sinus>

00003f8e <__divsf3>:
    3f8e:	0c d0       	rcall	.+24     	; 0x3fa8 <__divsf3x>
    3f90:	5c c1       	rjmp	.+696    	; 0x424a <__fp_round>
    3f92:	2c d1       	rcall	.+600    	; 0x41ec <__fp_pscB>
    3f94:	40 f0       	brcs	.+16     	; 0x3fa6 <__divsf3+0x18>
    3f96:	23 d1       	rcall	.+582    	; 0x41de <__fp_pscA>
    3f98:	30 f0       	brcs	.+12     	; 0x3fa6 <__divsf3+0x18>
    3f9a:	21 f4       	brne	.+8      	; 0x3fa4 <__divsf3+0x16>
    3f9c:	5f 3f       	cpi	r21, 0xFF	; 255
    3f9e:	19 f0       	breq	.+6      	; 0x3fa6 <__divsf3+0x18>
    3fa0:	f0 c0       	rjmp	.+480    	; 0x4182 <__fp_inf>
    3fa2:	51 11       	cpse	r21, r1
    3fa4:	97 c1       	rjmp	.+814    	; 0x42d4 <__fp_szero>
    3fa6:	f3 c0       	rjmp	.+486    	; 0x418e <__fp_nan>

00003fa8 <__divsf3x>:
    3fa8:	72 d1       	rcall	.+740    	; 0x428e <__fp_split3>
    3faa:	98 f3       	brcs	.-26     	; 0x3f92 <__divsf3+0x4>

00003fac <__divsf3_pse>:
    3fac:	99 23       	and	r25, r25
    3fae:	c9 f3       	breq	.-14     	; 0x3fa2 <__divsf3+0x14>
    3fb0:	55 23       	and	r21, r21
    3fb2:	b1 f3       	breq	.-20     	; 0x3fa0 <__divsf3+0x12>
    3fb4:	95 1b       	sub	r25, r21
    3fb6:	55 0b       	sbc	r21, r21
    3fb8:	bb 27       	eor	r27, r27
    3fba:	aa 27       	eor	r26, r26
    3fbc:	62 17       	cp	r22, r18
    3fbe:	73 07       	cpc	r23, r19
    3fc0:	84 07       	cpc	r24, r20
    3fc2:	38 f0       	brcs	.+14     	; 0x3fd2 <__divsf3_pse+0x26>
    3fc4:	9f 5f       	subi	r25, 0xFF	; 255
    3fc6:	5f 4f       	sbci	r21, 0xFF	; 255
    3fc8:	22 0f       	add	r18, r18
    3fca:	33 1f       	adc	r19, r19
    3fcc:	44 1f       	adc	r20, r20
    3fce:	aa 1f       	adc	r26, r26
    3fd0:	a9 f3       	breq	.-22     	; 0x3fbc <__divsf3_pse+0x10>
    3fd2:	33 d0       	rcall	.+102    	; 0x403a <__divsf3_pse+0x8e>
    3fd4:	0e 2e       	mov	r0, r30
    3fd6:	3a f0       	brmi	.+14     	; 0x3fe6 <__divsf3_pse+0x3a>
    3fd8:	e0 e8       	ldi	r30, 0x80	; 128
    3fda:	30 d0       	rcall	.+96     	; 0x403c <__divsf3_pse+0x90>
    3fdc:	91 50       	subi	r25, 0x01	; 1
    3fde:	50 40       	sbci	r21, 0x00	; 0
    3fe0:	e6 95       	lsr	r30
    3fe2:	00 1c       	adc	r0, r0
    3fe4:	ca f7       	brpl	.-14     	; 0x3fd8 <__divsf3_pse+0x2c>
    3fe6:	29 d0       	rcall	.+82     	; 0x403a <__divsf3_pse+0x8e>
    3fe8:	fe 2f       	mov	r31, r30
    3fea:	27 d0       	rcall	.+78     	; 0x403a <__divsf3_pse+0x8e>
    3fec:	66 0f       	add	r22, r22
    3fee:	77 1f       	adc	r23, r23
    3ff0:	88 1f       	adc	r24, r24
    3ff2:	bb 1f       	adc	r27, r27
    3ff4:	26 17       	cp	r18, r22
    3ff6:	37 07       	cpc	r19, r23
    3ff8:	48 07       	cpc	r20, r24
    3ffa:	ab 07       	cpc	r26, r27
    3ffc:	b0 e8       	ldi	r27, 0x80	; 128
    3ffe:	09 f0       	breq	.+2      	; 0x4002 <__divsf3_pse+0x56>
    4000:	bb 0b       	sbc	r27, r27
    4002:	80 2d       	mov	r24, r0
    4004:	bf 01       	movw	r22, r30
    4006:	ff 27       	eor	r31, r31
    4008:	93 58       	subi	r25, 0x83	; 131
    400a:	5f 4f       	sbci	r21, 0xFF	; 255
    400c:	2a f0       	brmi	.+10     	; 0x4018 <__divsf3_pse+0x6c>
    400e:	9e 3f       	cpi	r25, 0xFE	; 254
    4010:	51 05       	cpc	r21, r1
    4012:	68 f0       	brcs	.+26     	; 0x402e <__divsf3_pse+0x82>
    4014:	b6 c0       	rjmp	.+364    	; 0x4182 <__fp_inf>
    4016:	5e c1       	rjmp	.+700    	; 0x42d4 <__fp_szero>
    4018:	5f 3f       	cpi	r21, 0xFF	; 255
    401a:	ec f3       	brlt	.-6      	; 0x4016 <__divsf3_pse+0x6a>
    401c:	98 3e       	cpi	r25, 0xE8	; 232
    401e:	dc f3       	brlt	.-10     	; 0x4016 <__divsf3_pse+0x6a>
    4020:	86 95       	lsr	r24
    4022:	77 95       	ror	r23
    4024:	67 95       	ror	r22
    4026:	b7 95       	ror	r27
    4028:	f7 95       	ror	r31
    402a:	9f 5f       	subi	r25, 0xFF	; 255
    402c:	c9 f7       	brne	.-14     	; 0x4020 <__divsf3_pse+0x74>
    402e:	88 0f       	add	r24, r24
    4030:	91 1d       	adc	r25, r1
    4032:	96 95       	lsr	r25
    4034:	87 95       	ror	r24
    4036:	97 f9       	bld	r25, 7
    4038:	08 95       	ret
    403a:	e1 e0       	ldi	r30, 0x01	; 1
    403c:	66 0f       	add	r22, r22
    403e:	77 1f       	adc	r23, r23
    4040:	88 1f       	adc	r24, r24
    4042:	bb 1f       	adc	r27, r27
    4044:	62 17       	cp	r22, r18
    4046:	73 07       	cpc	r23, r19
    4048:	84 07       	cpc	r24, r20
    404a:	ba 07       	cpc	r27, r26
    404c:	20 f0       	brcs	.+8      	; 0x4056 <__divsf3_pse+0xaa>
    404e:	62 1b       	sub	r22, r18
    4050:	73 0b       	sbc	r23, r19
    4052:	84 0b       	sbc	r24, r20
    4054:	ba 0b       	sbc	r27, r26
    4056:	ee 1f       	adc	r30, r30
    4058:	88 f7       	brcc	.-30     	; 0x403c <__divsf3_pse+0x90>
    405a:	e0 95       	com	r30
    405c:	08 95       	ret

0000405e <__fixsfsi>:
    405e:	04 d0       	rcall	.+8      	; 0x4068 <__fixunssfsi>
    4060:	68 94       	set
    4062:	b1 11       	cpse	r27, r1
    4064:	37 c1       	rjmp	.+622    	; 0x42d4 <__fp_szero>
    4066:	08 95       	ret

00004068 <__fixunssfsi>:
    4068:	1a d1       	rcall	.+564    	; 0x429e <__fp_splitA>
    406a:	88 f0       	brcs	.+34     	; 0x408e <__fixunssfsi+0x26>
    406c:	9f 57       	subi	r25, 0x7F	; 127
    406e:	90 f0       	brcs	.+36     	; 0x4094 <__fixunssfsi+0x2c>
    4070:	b9 2f       	mov	r27, r25
    4072:	99 27       	eor	r25, r25
    4074:	b7 51       	subi	r27, 0x17	; 23
    4076:	a0 f0       	brcs	.+40     	; 0x40a0 <__fixunssfsi+0x38>
    4078:	d1 f0       	breq	.+52     	; 0x40ae <__fixunssfsi+0x46>
    407a:	66 0f       	add	r22, r22
    407c:	77 1f       	adc	r23, r23
    407e:	88 1f       	adc	r24, r24
    4080:	99 1f       	adc	r25, r25
    4082:	1a f0       	brmi	.+6      	; 0x408a <__fixunssfsi+0x22>
    4084:	ba 95       	dec	r27
    4086:	c9 f7       	brne	.-14     	; 0x407a <__fixunssfsi+0x12>
    4088:	12 c0       	rjmp	.+36     	; 0x40ae <__fixunssfsi+0x46>
    408a:	b1 30       	cpi	r27, 0x01	; 1
    408c:	81 f0       	breq	.+32     	; 0x40ae <__fixunssfsi+0x46>
    408e:	21 d1       	rcall	.+578    	; 0x42d2 <__fp_zero>
    4090:	b1 e0       	ldi	r27, 0x01	; 1
    4092:	08 95       	ret
    4094:	1e c1       	rjmp	.+572    	; 0x42d2 <__fp_zero>
    4096:	67 2f       	mov	r22, r23
    4098:	78 2f       	mov	r23, r24
    409a:	88 27       	eor	r24, r24
    409c:	b8 5f       	subi	r27, 0xF8	; 248
    409e:	39 f0       	breq	.+14     	; 0x40ae <__fixunssfsi+0x46>
    40a0:	b9 3f       	cpi	r27, 0xF9	; 249
    40a2:	cc f3       	brlt	.-14     	; 0x4096 <__fixunssfsi+0x2e>
    40a4:	86 95       	lsr	r24
    40a6:	77 95       	ror	r23
    40a8:	67 95       	ror	r22
    40aa:	b3 95       	inc	r27
    40ac:	d9 f7       	brne	.-10     	; 0x40a4 <__fixunssfsi+0x3c>
    40ae:	3e f4       	brtc	.+14     	; 0x40be <__fixunssfsi+0x56>
    40b0:	90 95       	com	r25
    40b2:	80 95       	com	r24
    40b4:	70 95       	com	r23
    40b6:	61 95       	neg	r22
    40b8:	7f 4f       	sbci	r23, 0xFF	; 255
    40ba:	8f 4f       	sbci	r24, 0xFF	; 255
    40bc:	9f 4f       	sbci	r25, 0xFF	; 255
    40be:	08 95       	ret

000040c0 <__floatunsisf>:
    40c0:	e8 94       	clt
    40c2:	09 c0       	rjmp	.+18     	; 0x40d6 <__floatsisf+0x12>

000040c4 <__floatsisf>:
    40c4:	97 fb       	bst	r25, 7
    40c6:	3e f4       	brtc	.+14     	; 0x40d6 <__floatsisf+0x12>
    40c8:	90 95       	com	r25
    40ca:	80 95       	com	r24
    40cc:	70 95       	com	r23
    40ce:	61 95       	neg	r22
    40d0:	7f 4f       	sbci	r23, 0xFF	; 255
    40d2:	8f 4f       	sbci	r24, 0xFF	; 255
    40d4:	9f 4f       	sbci	r25, 0xFF	; 255
    40d6:	99 23       	and	r25, r25
    40d8:	a9 f0       	breq	.+42     	; 0x4104 <__floatsisf+0x40>
    40da:	f9 2f       	mov	r31, r25
    40dc:	96 e9       	ldi	r25, 0x96	; 150
    40de:	bb 27       	eor	r27, r27
    40e0:	93 95       	inc	r25
    40e2:	f6 95       	lsr	r31
    40e4:	87 95       	ror	r24
    40e6:	77 95       	ror	r23
    40e8:	67 95       	ror	r22
    40ea:	b7 95       	ror	r27
    40ec:	f1 11       	cpse	r31, r1
    40ee:	f8 cf       	rjmp	.-16     	; 0x40e0 <__floatsisf+0x1c>
    40f0:	fa f4       	brpl	.+62     	; 0x4130 <__floatsisf+0x6c>
    40f2:	bb 0f       	add	r27, r27
    40f4:	11 f4       	brne	.+4      	; 0x40fa <__floatsisf+0x36>
    40f6:	60 ff       	sbrs	r22, 0
    40f8:	1b c0       	rjmp	.+54     	; 0x4130 <__floatsisf+0x6c>
    40fa:	6f 5f       	subi	r22, 0xFF	; 255
    40fc:	7f 4f       	sbci	r23, 0xFF	; 255
    40fe:	8f 4f       	sbci	r24, 0xFF	; 255
    4100:	9f 4f       	sbci	r25, 0xFF	; 255
    4102:	16 c0       	rjmp	.+44     	; 0x4130 <__floatsisf+0x6c>
    4104:	88 23       	and	r24, r24
    4106:	11 f0       	breq	.+4      	; 0x410c <__floatsisf+0x48>
    4108:	96 e9       	ldi	r25, 0x96	; 150
    410a:	11 c0       	rjmp	.+34     	; 0x412e <__floatsisf+0x6a>
    410c:	77 23       	and	r23, r23
    410e:	21 f0       	breq	.+8      	; 0x4118 <__floatsisf+0x54>
    4110:	9e e8       	ldi	r25, 0x8E	; 142
    4112:	87 2f       	mov	r24, r23
    4114:	76 2f       	mov	r23, r22
    4116:	05 c0       	rjmp	.+10     	; 0x4122 <__floatsisf+0x5e>
    4118:	66 23       	and	r22, r22
    411a:	71 f0       	breq	.+28     	; 0x4138 <__floatsisf+0x74>
    411c:	96 e8       	ldi	r25, 0x86	; 134
    411e:	86 2f       	mov	r24, r22
    4120:	70 e0       	ldi	r23, 0x00	; 0
    4122:	60 e0       	ldi	r22, 0x00	; 0
    4124:	2a f0       	brmi	.+10     	; 0x4130 <__floatsisf+0x6c>
    4126:	9a 95       	dec	r25
    4128:	66 0f       	add	r22, r22
    412a:	77 1f       	adc	r23, r23
    412c:	88 1f       	adc	r24, r24
    412e:	da f7       	brpl	.-10     	; 0x4126 <__floatsisf+0x62>
    4130:	88 0f       	add	r24, r24
    4132:	96 95       	lsr	r25
    4134:	87 95       	ror	r24
    4136:	97 f9       	bld	r25, 7
    4138:	08 95       	ret

0000413a <__fp_cmp>:
    413a:	99 0f       	add	r25, r25
    413c:	00 08       	sbc	r0, r0
    413e:	55 0f       	add	r21, r21
    4140:	aa 0b       	sbc	r26, r26
    4142:	e0 e8       	ldi	r30, 0x80	; 128
    4144:	fe ef       	ldi	r31, 0xFE	; 254
    4146:	16 16       	cp	r1, r22
    4148:	17 06       	cpc	r1, r23
    414a:	e8 07       	cpc	r30, r24
    414c:	f9 07       	cpc	r31, r25
    414e:	c0 f0       	brcs	.+48     	; 0x4180 <__fp_cmp+0x46>
    4150:	12 16       	cp	r1, r18
    4152:	13 06       	cpc	r1, r19
    4154:	e4 07       	cpc	r30, r20
    4156:	f5 07       	cpc	r31, r21
    4158:	98 f0       	brcs	.+38     	; 0x4180 <__fp_cmp+0x46>
    415a:	62 1b       	sub	r22, r18
    415c:	73 0b       	sbc	r23, r19
    415e:	84 0b       	sbc	r24, r20
    4160:	95 0b       	sbc	r25, r21
    4162:	39 f4       	brne	.+14     	; 0x4172 <__fp_cmp+0x38>
    4164:	0a 26       	eor	r0, r26
    4166:	61 f0       	breq	.+24     	; 0x4180 <__fp_cmp+0x46>
    4168:	23 2b       	or	r18, r19
    416a:	24 2b       	or	r18, r20
    416c:	25 2b       	or	r18, r21
    416e:	21 f4       	brne	.+8      	; 0x4178 <__fp_cmp+0x3e>
    4170:	08 95       	ret
    4172:	0a 26       	eor	r0, r26
    4174:	09 f4       	brne	.+2      	; 0x4178 <__fp_cmp+0x3e>
    4176:	a1 40       	sbci	r26, 0x01	; 1
    4178:	a6 95       	lsr	r26
    417a:	8f ef       	ldi	r24, 0xFF	; 255
    417c:	81 1d       	adc	r24, r1
    417e:	81 1d       	adc	r24, r1
    4180:	08 95       	ret

00004182 <__fp_inf>:
    4182:	97 f9       	bld	r25, 7
    4184:	9f 67       	ori	r25, 0x7F	; 127
    4186:	80 e8       	ldi	r24, 0x80	; 128
    4188:	70 e0       	ldi	r23, 0x00	; 0
    418a:	60 e0       	ldi	r22, 0x00	; 0
    418c:	08 95       	ret

0000418e <__fp_nan>:
    418e:	9f ef       	ldi	r25, 0xFF	; 255
    4190:	80 ec       	ldi	r24, 0xC0	; 192
    4192:	08 95       	ret

00004194 <__fp_powser>:
    4194:	df 93       	push	r29
    4196:	cf 93       	push	r28
    4198:	1f 93       	push	r17
    419a:	0f 93       	push	r16
    419c:	ff 92       	push	r15
    419e:	ef 92       	push	r14
    41a0:	df 92       	push	r13
    41a2:	7b 01       	movw	r14, r22
    41a4:	8c 01       	movw	r16, r24
    41a6:	68 94       	set
    41a8:	05 c0       	rjmp	.+10     	; 0x41b4 <__fp_powser+0x20>
    41aa:	da 2e       	mov	r13, r26
    41ac:	ef 01       	movw	r28, r30
    41ae:	af d0       	rcall	.+350    	; 0x430e <__mulsf3x>
    41b0:	fe 01       	movw	r30, r28
    41b2:	e8 94       	clt
    41b4:	a5 91       	lpm	r26, Z+
    41b6:	25 91       	lpm	r18, Z+
    41b8:	35 91       	lpm	r19, Z+
    41ba:	45 91       	lpm	r20, Z+
    41bc:	55 91       	lpm	r21, Z+
    41be:	ae f3       	brts	.-22     	; 0x41aa <__fp_powser+0x16>
    41c0:	ef 01       	movw	r28, r30
    41c2:	29 de       	rcall	.-942    	; 0x3e16 <__addsf3x>
    41c4:	fe 01       	movw	r30, r28
    41c6:	97 01       	movw	r18, r14
    41c8:	a8 01       	movw	r20, r16
    41ca:	da 94       	dec	r13
    41cc:	79 f7       	brne	.-34     	; 0x41ac <__fp_powser+0x18>
    41ce:	df 90       	pop	r13
    41d0:	ef 90       	pop	r14
    41d2:	ff 90       	pop	r15
    41d4:	0f 91       	pop	r16
    41d6:	1f 91       	pop	r17
    41d8:	cf 91       	pop	r28
    41da:	df 91       	pop	r29
    41dc:	08 95       	ret

000041de <__fp_pscA>:
    41de:	00 24       	eor	r0, r0
    41e0:	0a 94       	dec	r0
    41e2:	16 16       	cp	r1, r22
    41e4:	17 06       	cpc	r1, r23
    41e6:	18 06       	cpc	r1, r24
    41e8:	09 06       	cpc	r0, r25
    41ea:	08 95       	ret

000041ec <__fp_pscB>:
    41ec:	00 24       	eor	r0, r0
    41ee:	0a 94       	dec	r0
    41f0:	12 16       	cp	r1, r18
    41f2:	13 06       	cpc	r1, r19
    41f4:	14 06       	cpc	r1, r20
    41f6:	05 06       	cpc	r0, r21
    41f8:	08 95       	ret
    41fa:	c9 cf       	rjmp	.-110    	; 0x418e <__fp_nan>

000041fc <__fp_rempio2>:
    41fc:	50 d0       	rcall	.+160    	; 0x429e <__fp_splitA>
    41fe:	e8 f3       	brcs	.-6      	; 0x41fa <__fp_pscB+0xe>
    4200:	e8 94       	clt
    4202:	e0 e0       	ldi	r30, 0x00	; 0
    4204:	bb 27       	eor	r27, r27
    4206:	9f 57       	subi	r25, 0x7F	; 127
    4208:	f0 f0       	brcs	.+60     	; 0x4246 <__fp_rempio2+0x4a>
    420a:	2a ed       	ldi	r18, 0xDA	; 218
    420c:	3f e0       	ldi	r19, 0x0F	; 15
    420e:	49 ec       	ldi	r20, 0xC9	; 201
    4210:	06 c0       	rjmp	.+12     	; 0x421e <__fp_rempio2+0x22>
    4212:	ee 0f       	add	r30, r30
    4214:	bb 0f       	add	r27, r27
    4216:	66 1f       	adc	r22, r22
    4218:	77 1f       	adc	r23, r23
    421a:	88 1f       	adc	r24, r24
    421c:	28 f0       	brcs	.+10     	; 0x4228 <__fp_rempio2+0x2c>
    421e:	b2 3a       	cpi	r27, 0xA2	; 162
    4220:	62 07       	cpc	r22, r18
    4222:	73 07       	cpc	r23, r19
    4224:	84 07       	cpc	r24, r20
    4226:	28 f0       	brcs	.+10     	; 0x4232 <__fp_rempio2+0x36>
    4228:	b2 5a       	subi	r27, 0xA2	; 162
    422a:	62 0b       	sbc	r22, r18
    422c:	73 0b       	sbc	r23, r19
    422e:	84 0b       	sbc	r24, r20
    4230:	e3 95       	inc	r30
    4232:	9a 95       	dec	r25
    4234:	72 f7       	brpl	.-36     	; 0x4212 <__fp_rempio2+0x16>
    4236:	80 38       	cpi	r24, 0x80	; 128
    4238:	30 f4       	brcc	.+12     	; 0x4246 <__fp_rempio2+0x4a>
    423a:	9a 95       	dec	r25
    423c:	bb 0f       	add	r27, r27
    423e:	66 1f       	adc	r22, r22
    4240:	77 1f       	adc	r23, r23
    4242:	88 1f       	adc	r24, r24
    4244:	d2 f7       	brpl	.-12     	; 0x423a <__fp_rempio2+0x3e>
    4246:	90 48       	sbci	r25, 0x80	; 128
    4248:	06 c1       	rjmp	.+524    	; 0x4456 <__fp_mpack_finite>

0000424a <__fp_round>:
    424a:	09 2e       	mov	r0, r25
    424c:	03 94       	inc	r0
    424e:	00 0c       	add	r0, r0
    4250:	11 f4       	brne	.+4      	; 0x4256 <__fp_round+0xc>
    4252:	88 23       	and	r24, r24
    4254:	52 f0       	brmi	.+20     	; 0x426a <__fp_round+0x20>
    4256:	bb 0f       	add	r27, r27
    4258:	40 f4       	brcc	.+16     	; 0x426a <__fp_round+0x20>
    425a:	bf 2b       	or	r27, r31
    425c:	11 f4       	brne	.+4      	; 0x4262 <__fp_round+0x18>
    425e:	60 ff       	sbrs	r22, 0
    4260:	04 c0       	rjmp	.+8      	; 0x426a <__fp_round+0x20>
    4262:	6f 5f       	subi	r22, 0xFF	; 255
    4264:	7f 4f       	sbci	r23, 0xFF	; 255
    4266:	8f 4f       	sbci	r24, 0xFF	; 255
    4268:	9f 4f       	sbci	r25, 0xFF	; 255
    426a:	08 95       	ret

0000426c <__fp_sinus>:
    426c:	ef 93       	push	r30
    426e:	e0 ff       	sbrs	r30, 0
    4270:	06 c0       	rjmp	.+12     	; 0x427e <__fp_sinus+0x12>
    4272:	a2 ea       	ldi	r26, 0xA2	; 162
    4274:	2a ed       	ldi	r18, 0xDA	; 218
    4276:	3f e0       	ldi	r19, 0x0F	; 15
    4278:	49 ec       	ldi	r20, 0xC9	; 201
    427a:	5f eb       	ldi	r21, 0xBF	; 191
    427c:	cc dd       	rcall	.-1128   	; 0x3e16 <__addsf3x>
    427e:	e5 df       	rcall	.-54     	; 0x424a <__fp_round>
    4280:	0f 90       	pop	r0
    4282:	03 94       	inc	r0
    4284:	01 fc       	sbrc	r0, 1
    4286:	90 58       	subi	r25, 0x80	; 128
    4288:	e1 e1       	ldi	r30, 0x11	; 17
    428a:	f1 e0       	ldi	r31, 0x01	; 1
    428c:	f7 c0       	rjmp	.+494    	; 0x447c <__fp_powsodd>

0000428e <__fp_split3>:
    428e:	57 fd       	sbrc	r21, 7
    4290:	90 58       	subi	r25, 0x80	; 128
    4292:	44 0f       	add	r20, r20
    4294:	55 1f       	adc	r21, r21
    4296:	59 f0       	breq	.+22     	; 0x42ae <__fp_splitA+0x10>
    4298:	5f 3f       	cpi	r21, 0xFF	; 255
    429a:	71 f0       	breq	.+28     	; 0x42b8 <__fp_splitA+0x1a>
    429c:	47 95       	ror	r20

0000429e <__fp_splitA>:
    429e:	88 0f       	add	r24, r24
    42a0:	97 fb       	bst	r25, 7
    42a2:	99 1f       	adc	r25, r25
    42a4:	61 f0       	breq	.+24     	; 0x42be <__fp_splitA+0x20>
    42a6:	9f 3f       	cpi	r25, 0xFF	; 255
    42a8:	79 f0       	breq	.+30     	; 0x42c8 <__fp_splitA+0x2a>
    42aa:	87 95       	ror	r24
    42ac:	08 95       	ret
    42ae:	12 16       	cp	r1, r18
    42b0:	13 06       	cpc	r1, r19
    42b2:	14 06       	cpc	r1, r20
    42b4:	55 1f       	adc	r21, r21
    42b6:	f2 cf       	rjmp	.-28     	; 0x429c <__fp_split3+0xe>
    42b8:	46 95       	lsr	r20
    42ba:	f1 df       	rcall	.-30     	; 0x429e <__fp_splitA>
    42bc:	08 c0       	rjmp	.+16     	; 0x42ce <__fp_splitA+0x30>
    42be:	16 16       	cp	r1, r22
    42c0:	17 06       	cpc	r1, r23
    42c2:	18 06       	cpc	r1, r24
    42c4:	99 1f       	adc	r25, r25
    42c6:	f1 cf       	rjmp	.-30     	; 0x42aa <__fp_splitA+0xc>
    42c8:	86 95       	lsr	r24
    42ca:	71 05       	cpc	r23, r1
    42cc:	61 05       	cpc	r22, r1
    42ce:	08 94       	sec
    42d0:	08 95       	ret

000042d2 <__fp_zero>:
    42d2:	e8 94       	clt

000042d4 <__fp_szero>:
    42d4:	bb 27       	eor	r27, r27
    42d6:	66 27       	eor	r22, r22
    42d8:	77 27       	eor	r23, r23
    42da:	cb 01       	movw	r24, r22
    42dc:	97 f9       	bld	r25, 7
    42de:	08 95       	ret

000042e0 <__gesf2>:
    42e0:	2c df       	rcall	.-424    	; 0x413a <__fp_cmp>
    42e2:	08 f4       	brcc	.+2      	; 0x42e6 <__gesf2+0x6>
    42e4:	8f ef       	ldi	r24, 0xFF	; 255
    42e6:	08 95       	ret

000042e8 <inverse>:
    42e8:	9b 01       	movw	r18, r22
    42ea:	ac 01       	movw	r20, r24
    42ec:	60 e0       	ldi	r22, 0x00	; 0
    42ee:	70 e0       	ldi	r23, 0x00	; 0
    42f0:	80 e8       	ldi	r24, 0x80	; 128
    42f2:	9f e3       	ldi	r25, 0x3F	; 63
    42f4:	4c ce       	rjmp	.-872    	; 0x3f8e <__divsf3>

000042f6 <__mulsf3>:
    42f6:	0b d0       	rcall	.+22     	; 0x430e <__mulsf3x>
    42f8:	a8 cf       	rjmp	.-176    	; 0x424a <__fp_round>
    42fa:	71 df       	rcall	.-286    	; 0x41de <__fp_pscA>
    42fc:	28 f0       	brcs	.+10     	; 0x4308 <__mulsf3+0x12>
    42fe:	76 df       	rcall	.-276    	; 0x41ec <__fp_pscB>
    4300:	18 f0       	brcs	.+6      	; 0x4308 <__mulsf3+0x12>
    4302:	95 23       	and	r25, r21
    4304:	09 f0       	breq	.+2      	; 0x4308 <__mulsf3+0x12>
    4306:	3d cf       	rjmp	.-390    	; 0x4182 <__fp_inf>
    4308:	42 cf       	rjmp	.-380    	; 0x418e <__fp_nan>
    430a:	11 24       	eor	r1, r1
    430c:	e3 cf       	rjmp	.-58     	; 0x42d4 <__fp_szero>

0000430e <__mulsf3x>:
    430e:	bf df       	rcall	.-130    	; 0x428e <__fp_split3>
    4310:	a0 f3       	brcs	.-24     	; 0x42fa <__mulsf3+0x4>

00004312 <__mulsf3_pse>:
    4312:	95 9f       	mul	r25, r21
    4314:	d1 f3       	breq	.-12     	; 0x430a <__mulsf3+0x14>
    4316:	95 0f       	add	r25, r21
    4318:	50 e0       	ldi	r21, 0x00	; 0
    431a:	55 1f       	adc	r21, r21
    431c:	62 9f       	mul	r22, r18
    431e:	f0 01       	movw	r30, r0
    4320:	72 9f       	mul	r23, r18
    4322:	bb 27       	eor	r27, r27
    4324:	f0 0d       	add	r31, r0
    4326:	b1 1d       	adc	r27, r1
    4328:	63 9f       	mul	r22, r19
    432a:	aa 27       	eor	r26, r26
    432c:	f0 0d       	add	r31, r0
    432e:	b1 1d       	adc	r27, r1
    4330:	aa 1f       	adc	r26, r26
    4332:	64 9f       	mul	r22, r20
    4334:	66 27       	eor	r22, r22
    4336:	b0 0d       	add	r27, r0
    4338:	a1 1d       	adc	r26, r1
    433a:	66 1f       	adc	r22, r22
    433c:	82 9f       	mul	r24, r18
    433e:	22 27       	eor	r18, r18
    4340:	b0 0d       	add	r27, r0
    4342:	a1 1d       	adc	r26, r1
    4344:	62 1f       	adc	r22, r18
    4346:	73 9f       	mul	r23, r19
    4348:	b0 0d       	add	r27, r0
    434a:	a1 1d       	adc	r26, r1
    434c:	62 1f       	adc	r22, r18
    434e:	83 9f       	mul	r24, r19
    4350:	a0 0d       	add	r26, r0
    4352:	61 1d       	adc	r22, r1
    4354:	22 1f       	adc	r18, r18
    4356:	74 9f       	mul	r23, r20
    4358:	33 27       	eor	r19, r19
    435a:	a0 0d       	add	r26, r0
    435c:	61 1d       	adc	r22, r1
    435e:	23 1f       	adc	r18, r19
    4360:	84 9f       	mul	r24, r20
    4362:	60 0d       	add	r22, r0
    4364:	21 1d       	adc	r18, r1
    4366:	82 2f       	mov	r24, r18
    4368:	76 2f       	mov	r23, r22
    436a:	6a 2f       	mov	r22, r26
    436c:	11 24       	eor	r1, r1
    436e:	9f 57       	subi	r25, 0x7F	; 127
    4370:	50 40       	sbci	r21, 0x00	; 0
    4372:	8a f0       	brmi	.+34     	; 0x4396 <__mulsf3_pse+0x84>
    4374:	e1 f0       	breq	.+56     	; 0x43ae <__mulsf3_pse+0x9c>
    4376:	88 23       	and	r24, r24
    4378:	4a f0       	brmi	.+18     	; 0x438c <__mulsf3_pse+0x7a>
    437a:	ee 0f       	add	r30, r30
    437c:	ff 1f       	adc	r31, r31
    437e:	bb 1f       	adc	r27, r27
    4380:	66 1f       	adc	r22, r22
    4382:	77 1f       	adc	r23, r23
    4384:	88 1f       	adc	r24, r24
    4386:	91 50       	subi	r25, 0x01	; 1
    4388:	50 40       	sbci	r21, 0x00	; 0
    438a:	a9 f7       	brne	.-22     	; 0x4376 <__mulsf3_pse+0x64>
    438c:	9e 3f       	cpi	r25, 0xFE	; 254
    438e:	51 05       	cpc	r21, r1
    4390:	70 f0       	brcs	.+28     	; 0x43ae <__mulsf3_pse+0x9c>
    4392:	f7 ce       	rjmp	.-530    	; 0x4182 <__fp_inf>
    4394:	9f cf       	rjmp	.-194    	; 0x42d4 <__fp_szero>
    4396:	5f 3f       	cpi	r21, 0xFF	; 255
    4398:	ec f3       	brlt	.-6      	; 0x4394 <__mulsf3_pse+0x82>
    439a:	98 3e       	cpi	r25, 0xE8	; 232
    439c:	dc f3       	brlt	.-10     	; 0x4394 <__mulsf3_pse+0x82>
    439e:	86 95       	lsr	r24
    43a0:	77 95       	ror	r23
    43a2:	67 95       	ror	r22
    43a4:	b7 95       	ror	r27
    43a6:	f7 95       	ror	r31
    43a8:	e7 95       	ror	r30
    43aa:	9f 5f       	subi	r25, 0xFF	; 255
    43ac:	c1 f7       	brne	.-16     	; 0x439e <__mulsf3_pse+0x8c>
    43ae:	fe 2b       	or	r31, r30
    43b0:	88 0f       	add	r24, r24
    43b2:	91 1d       	adc	r25, r1
    43b4:	96 95       	lsr	r25
    43b6:	87 95       	ror	r24
    43b8:	97 f9       	bld	r25, 7
    43ba:	08 95       	ret

000043bc <sin>:
    43bc:	9f 93       	push	r25
    43be:	1e df       	rcall	.-452    	; 0x41fc <__fp_rempio2>
    43c0:	0f 90       	pop	r0
    43c2:	07 fc       	sbrc	r0, 7
    43c4:	ee 5f       	subi	r30, 0xFE	; 254
    43c6:	52 cf       	rjmp	.-348    	; 0x426c <__fp_sinus>
    43c8:	11 f4       	brne	.+4      	; 0x43ce <sin+0x12>
    43ca:	0e f4       	brtc	.+2      	; 0x43ce <sin+0x12>
    43cc:	e0 ce       	rjmp	.-576    	; 0x418e <__fp_nan>
    43ce:	41 c0       	rjmp	.+130    	; 0x4452 <__fp_mpack>

000043d0 <sqrt>:
    43d0:	66 df       	rcall	.-308    	; 0x429e <__fp_splitA>
    43d2:	d0 f3       	brcs	.-12     	; 0x43c8 <sin+0xc>
    43d4:	99 23       	and	r25, r25
    43d6:	d9 f3       	breq	.-10     	; 0x43ce <sin+0x12>
    43d8:	ce f3       	brts	.-14     	; 0x43cc <sin+0x10>
    43da:	9f 57       	subi	r25, 0x7F	; 127
    43dc:	55 0b       	sbc	r21, r21
    43de:	87 ff       	sbrs	r24, 7
    43e0:	46 d0       	rcall	.+140    	; 0x446e <__fp_norm2>
    43e2:	00 24       	eor	r0, r0
    43e4:	a0 e6       	ldi	r26, 0x60	; 96
    43e6:	40 ea       	ldi	r20, 0xA0	; 160
    43e8:	90 01       	movw	r18, r0
    43ea:	80 58       	subi	r24, 0x80	; 128
    43ec:	56 95       	lsr	r21
    43ee:	97 95       	ror	r25
    43f0:	28 f4       	brcc	.+10     	; 0x43fc <sqrt+0x2c>
    43f2:	80 5c       	subi	r24, 0xC0	; 192
    43f4:	66 0f       	add	r22, r22
    43f6:	77 1f       	adc	r23, r23
    43f8:	88 1f       	adc	r24, r24
    43fa:	20 f0       	brcs	.+8      	; 0x4404 <sqrt+0x34>
    43fc:	26 17       	cp	r18, r22
    43fe:	37 07       	cpc	r19, r23
    4400:	48 07       	cpc	r20, r24
    4402:	30 f4       	brcc	.+12     	; 0x4410 <sqrt+0x40>
    4404:	62 1b       	sub	r22, r18
    4406:	73 0b       	sbc	r23, r19
    4408:	84 0b       	sbc	r24, r20
    440a:	20 29       	or	r18, r0
    440c:	31 29       	or	r19, r1
    440e:	4a 2b       	or	r20, r26
    4410:	a6 95       	lsr	r26
    4412:	17 94       	ror	r1
    4414:	07 94       	ror	r0
    4416:	20 25       	eor	r18, r0
    4418:	31 25       	eor	r19, r1
    441a:	4a 27       	eor	r20, r26
    441c:	58 f7       	brcc	.-42     	; 0x43f4 <sqrt+0x24>
    441e:	66 0f       	add	r22, r22
    4420:	77 1f       	adc	r23, r23
    4422:	88 1f       	adc	r24, r24
    4424:	20 f0       	brcs	.+8      	; 0x442e <sqrt+0x5e>
    4426:	26 17       	cp	r18, r22
    4428:	37 07       	cpc	r19, r23
    442a:	48 07       	cpc	r20, r24
    442c:	30 f4       	brcc	.+12     	; 0x443a <sqrt+0x6a>
    442e:	62 0b       	sbc	r22, r18
    4430:	73 0b       	sbc	r23, r19
    4432:	84 0b       	sbc	r24, r20
    4434:	20 0d       	add	r18, r0
    4436:	31 1d       	adc	r19, r1
    4438:	41 1d       	adc	r20, r1
    443a:	a0 95       	com	r26
    443c:	81 f7       	brne	.-32     	; 0x441e <sqrt+0x4e>
    443e:	b9 01       	movw	r22, r18
    4440:	84 2f       	mov	r24, r20
    4442:	91 58       	subi	r25, 0x81	; 129
    4444:	88 0f       	add	r24, r24
    4446:	96 95       	lsr	r25
    4448:	87 95       	ror	r24
    444a:	08 95       	ret

0000444c <square>:
    444c:	9b 01       	movw	r18, r22
    444e:	ac 01       	movw	r20, r24
    4450:	52 cf       	rjmp	.-348    	; 0x42f6 <__mulsf3>

00004452 <__fp_mpack>:
    4452:	9f 3f       	cpi	r25, 0xFF	; 255
    4454:	31 f0       	breq	.+12     	; 0x4462 <__fp_mpack_finite+0xc>

00004456 <__fp_mpack_finite>:
    4456:	91 50       	subi	r25, 0x01	; 1
    4458:	20 f4       	brcc	.+8      	; 0x4462 <__fp_mpack_finite+0xc>
    445a:	87 95       	ror	r24
    445c:	77 95       	ror	r23
    445e:	67 95       	ror	r22
    4460:	b7 95       	ror	r27
    4462:	88 0f       	add	r24, r24
    4464:	91 1d       	adc	r25, r1
    4466:	96 95       	lsr	r25
    4468:	87 95       	ror	r24
    446a:	97 f9       	bld	r25, 7
    446c:	08 95       	ret

0000446e <__fp_norm2>:
    446e:	91 50       	subi	r25, 0x01	; 1
    4470:	50 40       	sbci	r21, 0x00	; 0
    4472:	66 0f       	add	r22, r22
    4474:	77 1f       	adc	r23, r23
    4476:	88 1f       	adc	r24, r24
    4478:	d2 f7       	brpl	.-12     	; 0x446e <__fp_norm2>
    447a:	08 95       	ret

0000447c <__fp_powsodd>:
    447c:	9f 93       	push	r25
    447e:	8f 93       	push	r24
    4480:	7f 93       	push	r23
    4482:	6f 93       	push	r22
    4484:	ff 93       	push	r31
    4486:	ef 93       	push	r30
    4488:	9b 01       	movw	r18, r22
    448a:	ac 01       	movw	r20, r24
    448c:	34 df       	rcall	.-408    	; 0x42f6 <__mulsf3>
    448e:	ef 91       	pop	r30
    4490:	ff 91       	pop	r31
    4492:	80 de       	rcall	.-768    	; 0x4194 <__fp_powser>
    4494:	2f 91       	pop	r18
    4496:	3f 91       	pop	r19
    4498:	4f 91       	pop	r20
    449a:	5f 91       	pop	r21
    449c:	2c cf       	rjmp	.-424    	; 0x42f6 <__mulsf3>

0000449e <__divmodhi4>:
    449e:	97 fb       	bst	r25, 7
    44a0:	07 2e       	mov	r0, r23
    44a2:	16 f4       	brtc	.+4      	; 0x44a8 <__divmodhi4+0xa>
    44a4:	00 94       	com	r0
    44a6:	06 d0       	rcall	.+12     	; 0x44b4 <__divmodhi4_neg1>
    44a8:	77 fd       	sbrc	r23, 7
    44aa:	08 d0       	rcall	.+16     	; 0x44bc <__divmodhi4_neg2>
    44ac:	0b d0       	rcall	.+22     	; 0x44c4 <__udivmodhi4>
    44ae:	07 fc       	sbrc	r0, 7
    44b0:	05 d0       	rcall	.+10     	; 0x44bc <__divmodhi4_neg2>
    44b2:	3e f4       	brtc	.+14     	; 0x44c2 <__divmodhi4_exit>

000044b4 <__divmodhi4_neg1>:
    44b4:	90 95       	com	r25
    44b6:	81 95       	neg	r24
    44b8:	9f 4f       	sbci	r25, 0xFF	; 255
    44ba:	08 95       	ret

000044bc <__divmodhi4_neg2>:
    44bc:	70 95       	com	r23
    44be:	61 95       	neg	r22
    44c0:	7f 4f       	sbci	r23, 0xFF	; 255

000044c2 <__divmodhi4_exit>:
    44c2:	08 95       	ret

000044c4 <__udivmodhi4>:
    44c4:	aa 1b       	sub	r26, r26
    44c6:	bb 1b       	sub	r27, r27
    44c8:	51 e1       	ldi	r21, 0x11	; 17
    44ca:	07 c0       	rjmp	.+14     	; 0x44da <__udivmodhi4_ep>

000044cc <__udivmodhi4_loop>:
    44cc:	aa 1f       	adc	r26, r26
    44ce:	bb 1f       	adc	r27, r27
    44d0:	a6 17       	cp	r26, r22
    44d2:	b7 07       	cpc	r27, r23
    44d4:	10 f0       	brcs	.+4      	; 0x44da <__udivmodhi4_ep>
    44d6:	a6 1b       	sub	r26, r22
    44d8:	b7 0b       	sbc	r27, r23

000044da <__udivmodhi4_ep>:
    44da:	88 1f       	adc	r24, r24
    44dc:	99 1f       	adc	r25, r25
    44de:	5a 95       	dec	r21
    44e0:	a9 f7       	brne	.-22     	; 0x44cc <__udivmodhi4_loop>
    44e2:	80 95       	com	r24
    44e4:	90 95       	com	r25
    44e6:	bc 01       	movw	r22, r24
    44e8:	cd 01       	movw	r24, r26
    44ea:	08 95       	ret

000044ec <__tablejump2__>:
    44ec:	ee 0f       	add	r30, r30
    44ee:	ff 1f       	adc	r31, r31
    44f0:	88 1f       	adc	r24, r24
    44f2:	8b bf       	out	0x3b, r24	; 59
    44f4:	07 90       	elpm	r0, Z+
    44f6:	f6 91       	elpm	r31, Z
    44f8:	e0 2d       	mov	r30, r0
    44fa:	19 94       	eijmp

000044fc <_exit>:
    44fc:	f8 94       	cli

000044fe <__stop_program>:
    44fe:	ff cf       	rjmp	.-2      	; 0x44fe <__stop_program>
